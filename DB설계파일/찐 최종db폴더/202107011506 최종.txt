
DROP TABLESPACE ERP_DB INCLUDING CONTENTS AND DATAFILES;

CREATE TABLESPACE ERP_DB DATAFILE 'ERP_DB' 
SIZE 2048M AUTOEXTEND ON NEXT 4M MAXSIZE UNLIMITED 
LOGGING PERMANENT EXTENT MANAGEMENT LOCAL AUTOALLOCATE 
BLOCKSIZE 8K SEGMENT SPACE MANAGEMENT MANUAL 
FLASHBACK ON;
--Tablespace의 이름을 ERP_DB, 크기를 2G로 설정, 2G 초과시 자동으로 4M 씩 자동 확장 생성한다.

create user erp_admin identified by erp_admin;
grant DBA, resource, connect to erp_admin WITH ADMIN OPTION;
conn erp_admin/erp_admin;

SET SERVEROUTPUT ON;
DROP TABLE "SM_CRI_ZIP" CASCADE CONSTRAINTS;
DROP TABLE "SM_CRI_COM_REG" CASCADE CONSTRAINTS;
DROP TABLE "SM_CRI_WOR_REG" CASCADE CONSTRAINTS;
DROP TABLE "SM_CRI_SEC_REG" CASCADE CONSTRAINTS;
DROP TABLE "SM_CRI_DEP_REG" CASCADE CONSTRAINTS;
DROP TABLE "SM_CRI_EMP_REG" CASCADE CONSTRAINTS;
DROP TABLE "SM_CRI_SYS_ENV_SET" CASCADE CONSTRAINTS;
DROP TABLE "SM_BIM_GEN_CUS_REG" CASCADE CONSTRAINTS;
DROP TABLE "SM_BIM_ITE_GRO_REG" CASCADE CONSTRAINTS;
DROP TABLE "SM_BIM_ITE_REG" CASCADE CONSTRAINTS;
DROP TABLE "SM_BIM_HOU_REG" CASCADE CONSTRAINTS;
DROP TABLE "SM_BIM_PRO_REG" CASCADE CONSTRAINTS;
DROP TABLE "SM_BIM_OUT_REG" CASCADE CONSTRAINTS;
DROP TABLE "SM_BIM_LOG_MAN" CASCADE CONSTRAINTS;
DROP TABLE "SM_BIM_INS_TYP" CASCADE CONSTRAINTS;
DROP TABLE "SM_BIM_SET_REG" CASCADE CONSTRAINTS;
DROP TABLE "SM_BIM_COM_REG" CASCADE CONSTRAINTS;
DROP TABLE "SM_BIM_OUT_ITEM_CUS" CASCADE CONSTRAINTS;
DROP TABLE "SM_BIM_OUT_ITEM_CUS_IN" CASCADE CONSTRAINTS;
DROP TABLE "SM_BIM_SAL_PLA_REG" CASCADE CONSTRAINTS;
DROP TABLE "SM_BIM_WOR_REG" CASCADE CONSTRAINTS;
DROP TABLE "SM_BIM_PRO_WOR_REG" CASCADE CONSTRAINTS;
DROP TABLE "SM_BIM_OUT_WOR_REG" CASCADE CONSTRAINTS;
DROP TABLE "SM_BIM_PRO_LINE_REG" CASCADE CONSTRAINTS;
DROP TABLE "CSM_SM_ORD_REG" CASCADE CONSTRAINTS;
DROP TABLE "CSM_SM_REL_PRO" CASCADE CONSTRAINTS;
DROP TABLE "CSM_SM_COR_REG" CASCADE CONSTRAINTS;
DROP TABLE "PMM_PM_MPS" CASCADE CONSTRAINTS;
DROP TABLE "PMM_PM_MPS_OS" CASCADE CONSTRAINTS;
DROP TABLE "PMM_PM_ORDER" CASCADE CONSTRAINTS;
DROP TABLE "PMM_PM_MRP" CASCADE CONSTRAINTS;
DROP TABLE "CPM_BIM_BOM_REG" CASCADE CONSTRAINTS;
DROP TABLE "CPM_BIM_OUT_PRI" CASCADE CONSTRAINTS;
DROP TABLE "CPM_BIM_DEF_TYP_REG" CASCADE CONSTRAINTS;
DROP TABLE "CPM_BIM_DEF_GROUP" CASCADE CONSTRAINTS;
DROP TABLE "CPM_PM_PRO_PLA_REG" CASCADE CONSTRAINTS;
DROP TABLE "CPM_PM_OPE_PER_REG" CASCADE CONSTRAINTS;
DROP TABLE "CPM_PM_PRO_MAT_FOR_DET" CASCADE CONSTRAINTS;
DROP TABLE "CPM_PM_PRO_MAT_FOR" CASCADE CONSTRAINTS;
DROP TABLE "CPM_PM_OPE_PER_REG_DET" CASCADE CONSTRAINTS;
DROP TABLE "CPM_OM_OUT_PER_REG" CASCADE CONSTRAINTS;
DROP TABLE "CPM_OM_OUT_MAT_FOR_DET" CASCADE CONSTRAINTS;
DROP TABLE "CPM_OM_OUT_MAT_FOR" CASCADE CONSTRAINTS;
DROP TABLE "CPM_OM_OUT_PER_REG_DET" CASCADE CONSTRAINTS;
DROP TABLE "CPM_OM_OUT_FIN" CASCADE CONSTRAINTS;
DROP TABLE "CPM_OM_OUT_FIN_DET" CASCADE CONSTRAINTS;
DROP TABLE "PM_SM_PRO_STOCK" CASCADE CONSTRAINTS;
DROP TABLE "PM_SM_PRO_FINISHEDPRODUCT" CASCADE CONSTRAINTS;
DROP TABLE "PM_SM_ITE_PRI" CASCADE CONSTRAINTS;
DROP TABLE "MENU" CASCADE CONSTRAINTS;


DROP SEQUENCE NO_seq;
DROP SEQUENCE SEQ_seq;
DROP SEQUENCE seq_SM_BIM_Gen_Cus_Reg_no;
DROP SEQUENCE seq_SM_BIM_Sal_Pla_Reg_no;
--DROP SEQUENCE seq_CSM_SM_Est_Reg_no;
DROP SEQUENCE seq_CSM_SM_Ord_Reg_no;
--DROP SEQUENCE seq_CSM_SM_Req_Reg_no;
DROP SEQUENCE seq_CSM_SM_Rel_Pro_no;
DROP SEQUENCE seq_PMM_PM_MPS_no;
DROP SEQUENCE seq_PMM_PM_MPS_OS_no;
DROP SEQUENCE seq_PMM_PM_ORDER_no;
DROP SEQUENCE seq_PMM_PM_CM_no;
DROP SEQUENCE seq_PMM_PM_RP_no;
DROP SEQUENCE seq_PMM_PM_RP_DEAD_no;
DROP SEQUENCE seq_PMM_PM_RRR_no;
DROP SEQUENCE seq_PMM_PM_RRR_CHECK_no;
DROP SEQUENCE seq_PM_SM_Pro_Stock_no;
DROP SEQUENCE seq_PM_SM_Sto_Mov_Main_no;
DROP SEQUENCE seq_PM_SM_Sto_Adj_Main_no;
DROP SEQUENCE seq_PM_SM_Set_Man_Main_no;
DROP SEQUENCE seq_CPM_PM_Pro_Pla_Reg_no;
DROP SEQUENCE seq_CPM_PM_Pro_Mat_For_Det_no;
DROP SEQUENCE seq_CPM_PM_Ope_Per_Reg_no;
DROP SEQUENCE seq_CPM_PM_Ope_Per_Reg_Det_no;
DROP SEQUENCE seq_CPM_OM_Out_Fin_no;
DROP SEQUENCE seq_CPM_OM_Out_FinNo_no;  
DROP SEQUENCE seq_CPM_BIM_BOM_Reg_no;
DROP SEQUENCE seq_PM_SM_Pro_FProduct_no;

--DROP TRIGGER trg_operation_nodml;
--drop trigger trg_outsourcing_nodml;
drop trigger trg_ope_out_nodml;
----------------------------------------------
drop trigger Quantity_Upd_TRG;


DROP PROCEDURE P_RESET_SEQ;
DROP PROCEDURE P_RESET_SEQ1;
DROP PROCEDURE P_RESET_SEQ2;
--DROP PROCEDURE P_RESET_SEQ3;

drop function  F_GET_NEXT_SEQ;
drop function  F_GET_CURR_SEQ;
drop function  func_hou_reg;
drop function  func_Wor_Reg;
drop function  func_pro_reg;
drop function  func_Pro_Wor_Reg;
drop function  func_Out_Reg;
drop function  func_Out_Wor_Reg;
--drop function  func_Ite_Reg;

--NO 자동생성 시퀀스
CREATE SEQUENCE NO_seq START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
-- 예시 INSERT INTO tmp values(tmp_seq.NEXTVAL, 'tmptmp');
--순번 sequence 자동생성 시퀀스
CREATE SEQUENCE SEQ_seq START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_SM_BIM_Gen_Cus_Reg_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_SM_BIM_Sal_Pla_Reg_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
--CREATE SEQUENCE seq_CSM_SM_Est_Reg_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_CSM_SM_Ord_Reg_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
--CREATE SEQUENCE seq_CSM_SM_Req_Reg_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_CSM_SM_Rel_Pro_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_PMM_PM_MPS_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_PMM_PM_MPS_OS_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_PMM_PM_ORDER_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_PMM_PM_CM_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_PMM_PM_RP_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_PMM_PM_RP_DEAD_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_PMM_PM_RRR_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_PMM_PM_RRR_CHECK_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_PM_SM_Pro_Stock_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_PM_SM_Sto_Mov_Main_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_PM_SM_Sto_Adj_Main_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_PM_SM_Set_Man_Main_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_PM_SM_Pro_FProduct_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_CPM_PM_Pro_Pla_Reg_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_CPM_PM_Pro_Mat_For_Det_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;

CREATE SEQUENCE seq_CPM_PM_Ope_Per_Reg_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_CPM_PM_Ope_Per_Reg_Det_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_CPM_OM_Out_Fin_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_CPM_OM_Out_FinNo_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_CPM_BIM_BOM_Reg_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;

    CREATE OR REPLACE FUNCTION  F_GET_NEXT_SEQ (p_flag varchar2) 
    return varchar2
    IS
    v_next_no varchar2(200);
    BEGIN
        v_next_no := null;
        IF p_flag = 'NO' THEN
            SELECT
                    LPAD(NO_seq.NEXTVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'SEQ' THEN
            SELECT
                    LPAD(SEQ_seq.NEXTVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'SM_BIM_Gen_Cus_Reg' THEN
            SELECT
                    LPAD(seq_SM_BIM_Gen_Cus_Reg_no.NEXTVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'SM_BIM_Sal_Pla_Reg' THEN
             SELECT
                    'PL'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_SM_BIM_Sal_Pla_Reg_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
--        ELSIF p_flag = 'CSM_SM_Est_Reg' THEN
--             SELECT
--                    'ES'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CSM_SM_Est_Reg_no.NEXTVAL,6,0)
--                    INTO v_next_no
--                FROM DUAL;
        ELSIF p_flag = 'CSM_SM_Ord_Reg' THEN
             SELECT
                    'SO'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CSM_SM_Ord_Reg_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
--        ELSIF p_flag = 'CSM_SM_Req_Reg' THEN
--             SELECT
--                    'IR'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CSM_SM_Req_Reg_no .NEXTVAL,6,0)
--                    INTO v_next_no
--                FROM DUAL;
        ELSIF p_flag = 'CSM_SM_Rel_Pro' THEN
             SELECT
                    'IS'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CSM_SM_Rel_Pro_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
     ELSIF p_flag = 'PMM_PM_MPS' THEN
             SELECT
                    'JS'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_MPS_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_MPS_OS' THEN
             SELECT
                    'OS'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_MPS_OS_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_ORDER' THEN
             SELECT
                    'P0'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_ORDER_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_CM' THEN
             SELECT
                    'PR'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_CM_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_RP' THEN
             SELECT
                    'RV'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_RP_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_RP_DEAD' THEN
             SELECT
                    'D0'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_RP_DEAD_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_RRR' THEN
             SELECT
                    'SR'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_RRR_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_RRR_CHECK' THEN
             SELECT
                    'C0'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_RRR_CHECK_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PM_SM_Pro_Stock' THEN
             SELECT
                    LPAD(SEQ_PM_SM_Pro_Stock_NO.NEXTVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PM_SM_Sto_Mov_Main' THEN
             SELECT
                    'MV'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PM_SM_Sto_Mov_Main_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PM_SM_Sto_Adj_Main' THEN
             SELECT
                    'IA'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PM_SM_Sto_Adj_Main_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PM_SM_Set_Man_Main' THEN
             SELECT
                    'SM'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PM_SM_Set_Man_Main_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PM_SM_Pro_FProduct' THEN
             SELECT
                    LPAD(SEQ_PM_SM_Pro_FProduct_NO.NEXTVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_PM_Pro_Pla_Reg' THEN
             SELECT
                    'PP'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CPM_PM_Pro_Pla_Reg_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_PM_Pro_Mat_For_Det' THEN
            SELECT
                    LPAD(SEQ_CPM_PM_Pro_Mat_For_Det_NO.NEXTVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_PM_Ope_Per_Reg' THEN
             SELECT
                    'W0'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CPM_PM_Ope_Per_Reg_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_PM_Ope_Per_Reg_Det' THEN
             SELECT
                    'WR'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CPM_PM_Ope_Per_Reg_Det_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_OM_Out_Fin' THEN
             SELECT
                    'OC'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CPM_OM_Out_Fin_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_OM_Out_FinNo' THEN
             SELECT
                    LPAD(SEQ_CPM_OM_Out_FinNo_NO.NEXTVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_BIM_BOM_Reg' THEN
             SELECT
                    LPAD(SEQ_CPM_BIM_BOM_Reg_NO.NEXTVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        END IF;
        RETURN v_next_no;
    END F_GET_NEXT_SEQ;
    /

 CREATE OR REPLACE FUNCTION  F_GET_CURR_SEQ (p_flag varchar2) 
    return varchar2
    IS
    v_next_no varchar2(200);
    BEGIN
        v_next_no := null;
        IF p_flag = 'NO' THEN
            SELECT
                    LPAD(NO_seq.CURRVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'SEQ' THEN
            SELECT
                    LPAD(SEQ_seq.CURRVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'SM_BIM_Gen_Cus_Reg' THEN
            SELECT
                    LPAD(seq_SM_BIM_Gen_Cus_Reg_no.CURRVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'SM_BIM_Sal_Pla_Reg' THEN
             SELECT
                    'PL'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_SM_BIM_Sal_Pla_Reg_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
--        ELSIF p_flag = 'CSM_SM_Est_Reg' THEN
--             SELECT
--                    'ES'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CSM_SM_Est_Reg_no.CURRVAL,6,0)
--                    INTO v_next_no
--                FROM DUAL;
        ELSIF p_flag = 'CSM_SM_Ord_Reg' THEN
             SELECT
                    'SO'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CSM_SM_Ord_Reg_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
--        ELSIF p_flag = 'CSM_SM_Req_Reg' THEN
--             SELECT
--                    'IR'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CSM_SM_Req_Reg_no.CURRVAL,6,0)
--                    INTO v_next_no
--                FROM DUAL;
        ELSIF p_flag = 'CSM_SM_Rel_Pro' THEN
             SELECT
                    'IS'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CSM_SM_Rel_Pro_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_MPS' THEN
             SELECT
                    'JS'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_MPS_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_MPS_OS' THEN
             SELECT
                    'OS'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_MPS_OS_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_ORDER' THEN
             SELECT
                    'P0'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_ORDER_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_CM' THEN
             SELECT
                    'PR'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_CM_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_RP' THEN
             SELECT
                    'RV'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_RP_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_RP_DEAD' THEN
             SELECT
                    'D0'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_RP_DEAD_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_RRR' THEN
             SELECT
                    'SR'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_RRR_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_RRR_CHECK' THEN
             SELECT
                    'C0'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_RRR_CHECK_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PM_SM_Pro_Stock' THEN
             SELECT
                    LPAD(SEQ_PM_SM_Pro_Stock_NO.CURRVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PM_SM_Sto_Mov_Main' THEN
             SELECT
                    'MV'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PM_SM_Sto_Mov_Main_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PM_SM_Sto_Adj_Main' THEN
             SELECT
                    'IA'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PM_SM_Sto_Adj_Main_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PM_SM_Set_Man_Main' THEN
             SELECT
                    'SM'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PM_SM_Set_Man_Main_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PM_SM_Pro_FProduct' THEN
            SELECT
                    LPAD(SEQ_PM_SM_Pro_FProduct_NO.CURRVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_PM_Pro_Pla_Reg' THEN
             SELECT
                    'PP'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CPM_PM_Pro_Pla_Reg_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_PM_Pro_Mat_For_Det' THEN
            SELECT
                    LPAD(SEQ_CPM_PM_Pro_Mat_For_Det_NO.CURRVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_PM_Ope_Per_Reg' THEN
             SELECT
                    'W0'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CPM_PM_Ope_Per_Reg_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_PM_Ope_Per_Reg_Det' THEN
             SELECT
                    'WR'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CPM_PM_Ope_Per_Reg_Det_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_OM_Out_Fin' THEN
             SELECT
                    'OC'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CPM_OM_Out_Fin_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_OM_Out_FinNo' THEN
             SELECT
                    LPAD(SEQ_CPM_OM_Out_FinNo_no.CURRVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_BIM_BOM_Reg' THEN
            SELECT
                    LPAD(SEQ_CPM_BIM_BOM_Reg_NO.CURRVAL,5,0)
                    INTO v_next_no
                FROM DUAL;        
                
        END IF;
        RETURN v_next_no;
    END F_GET_CURR_SEQ;
    /

CREATE OR REPLACE PROCEDURE P_RESET_SEQ(SEQ_NAME IN VARCHAR2)
IS
    L_VAL NUMBER;
BEGIN
    EXECUTE IMMEDIATE 'SELECT ' || SEQ_NAME || '.NEXTVAL FROM DUAL ' 
    INTO L_VAL;
  
    EXECUTE IMMEDIATE 'ALTER SEQUENCE ' || SEQ_NAME || ' INCREMENT BY -' || L_VAL ;


    EXECUTE IMMEDIATE 'SELECT ' || SEQ_NAME || '.NEXTVAL FROM DUAL '
    INTO L_VAL;
      
    EXECUTE IMMEDIATE 'ALTER SEQUENCE ' || SEQ_NAME || ' INCREMENT BY 1';
    
END;
/



--EXECUTE P_RESET_SEQ('NO_seq');
--EXECUTE P_RESET_SEQ('SEQ_seq');
--EXECUTE P_RESET_SEQ('seq_SM_BIM_Gen_Cus_Reg_no');
--EXECUTE P_RESET_SEQ('seq_SM_BIM_Sal_Pla_Reg_no');
--EXECUTE P_RESET_SEQ('seq_CSM_SM_Est_Reg_no');
--EXECUTE P_RESET_SEQ('seq_CSM_SM_Ord_Reg_no');
--EXECUTE P_RESET_SEQ('seq_CSM_SM_Req_Reg_no');
--EXECUTE P_RESET_SEQ('seq_CSM_SM_Rel_Pro_no');
--EXECUTE P_RESET_SEQ('seq_PMM_PM_MPS_OS_no');
--EXECUTE P_RESET_SEQ('seq_PMM_PM_ORDER_no');
--EXECUTE P_RESET_SEQ('seq_PMM_PM_CM_no');
--EXECUTE P_RESET_SEQ('seq_PMM_PM_RP_no');
--EXECUTE P_RESET_SEQ('seq_PMM_PM_RP_DEAD_no');
--EXECUTE P_RESET_SEQ('seq_PMM_PM_RRR_no');
--EXECUTE P_RESET_SEQ('seq_PMM_PM_RRR_CHECK_no');
--EXECUTE P_RESET_SEQ('seq_PM_SM_Sto_Mov_Main_no');
--EXECUTE P_RESET_SEQ('seq_PM_SM_Sto_Adj_Main_no');
--EXECUTE P_RESET_SEQ('seq_PM_SM_Set_Man_Main_no');
--EXECUTE P_RESET_SEQ('seq_CPM_PM_Pro_Pla_Reg_no');
--EXECUTE P_RESET_SEQ('seq_CPM_PM_Ope_Per_Reg_no');
--EXECUTE P_RESET_SEQ('seq_CPM_PM_Ope_Per_Reg_Det_no');
--EXECUTE P_RESET_SEQ('seq_CPM_OM_Out_Fin_no');



--DECLARE
--    X NUMBER;
--BEGIN
--    SYS.DBMS_JOB.SUBMIT
--    (
--        job         => X
--        ,what       =>
--            'BEGIN
--                P_RESET_SEQ(''seq_SM_BIM_Gen_Cus_Reg_no'');
--                P_RESET_SEQ(''seq_SM_BIM_Sal_Pla_Reg_no'');
--                P_RESET_SEQ(''seq_CSM_SM_Est_Reg_no'');
--                P_RESET_SEQ(''seq_CSM_SM_Ord_Reg_no'');
--                P_RESET_SEQ(''seq_CSM_SM_Req_Reg_no'');
--                P_RESET_SEQ(''seq_CSM_SM_Rel_Pro_no'');
--                P_RESET_SEQ(''seq_PMM_PM_MPS_OS_no'');
--                P_RESET_SEQ(''seq_PMM_PM_ORDER_no'');
--                P_RESET_SEQ(''seq_PMM_PM_CM_no'');
--                P_RESET_SEQ(''seq_PMM_PM_RP_no'');
--                P_RESET_SEQ(''seq_PMM_PM_RP_DEAD_no'');
--                P_RESET_SEQ(''seq_PMM_PM_RRR_no'');
--                P_RESET_SEQ(''seq_PMM_PM_RRR_CHECK_no'');
--                P_RESET_SEQ(''seq_PM_SM_Sto_Mov_Main_no'');
--                P_RESET_SEQ(''seq_PM_SM_Sto_Adj_Main_no'');
--                P_RESET_SEQ(''seq_PM_SM_Set_Man_Main_no'');
--                P_RESET_SEQ(''seq_CPM_PM_Pro_Pla_Reg_no'');
--                P_RESET_SEQ(''seq_CPM_PM_Ope_Per_Reg_no'');
--                P_RESET_SEQ(''seq_CPM_PM_Ope_Per_Reg_Det_no'');
--                P_RESET_SEQ(''seq_CPM_OM_Out_Fin_no'');
--            END;'
--        ,next_date  => to_date('11-06-2021 12:40:00','mm/dd/yyyy hh24:mi:ss')
--        ,interval   => 'TRUNC(SYSDATE+1)'
--        ,no_parse   => FALSE
--    );
--    :JobNumber := to_char(X);
--END;
--/


 --확인 
--
-- SELECT no_SEQ.CURRVAL AS 번호시퀀스 FROM DUAL ; 
-- SELECT seq_SEQ.CURRVAL AS 일반거래처시퀀스 FROM DUAL ; 
-- SELECT seq_SM_BIM_Gen_Cus_Reg_no.NEXTVAL AS 일반거래처시퀀스 FROM DUAL ; 
-- SELECT seq_SM_BIM_Gen_Cus_Reg_no.CURRVAL AS 일반거래처시퀀스 FROM DUAL ; 
 
-- SELECT seq_SM_BIM_Sal_Pla_Reg_no.CURRVAL  AS 판매계획등록 FROM DUAL; 
-- SELECT seq_CSM_SM_Est_Reg_no.CURRVAL AS 견적등록 FROM DUAL ; 
-- SELECT seq_CSM_SM_Ord_Reg_no.CURRVAL AS 수주등록 FROM DUAL ; 
-- SELECT seq_CSM_SM_Req_Reg_no.CURRVAL AS 출고의뢰등록 FROM DUAL ; 
-- SELECT seq_CSM_SM_Rel_Pro_no.CURRVAL AS 출고처리 FROM DUAL ; 
-- SELECT seq_PMM_PM_MPS_OS_no.CURRVAL AS "주계획서작성(판매,주문계획)" FROM DUAL ; 
-- SELECT seq_PMM_PM_ORDER_no.CURRVAL AS "발주,발주마감처리" FROM DUAL ; 
-- SELECT seq_PMM_PM_CM_no.CURRVAL AS 청구등록 FROM DUAL ; 
-- SELECT seq_PMM_PM_RP_no.CURRVAL AS 입고처리 FROM DUAL ; 
-- SELECT seq_PMM_PM_RP_DEAD_no.CURRVAL AS 입고처리마감 FROM DUAL ; 
-- SELECT seq_PMM_PM_RRR_no.CURRVAL AS 입고의뢰등록 FROM DUAL ; 
-- SELECT seq_PMM_PM_RRR_CHECK_no.CURRVAL AS 입고의뢰등록검사 FROM DUAL ; 
-- SELECT seq_PM_SM_Sto_Mov_Main_no.CURRVAL AS "재고이동 등록 메인" FROM DUAL ; 
-- SELECT seq_PM_SM_Sto_Adj_Main_no.CURRVAL AS "기초재고/재고조정등록 메인" FROM DUAL ; 
-- SELECT seq_PM_SM_Set_Man_Main_no.CURRVAL AS "set품 수불조정등록 모품목" FROM DUAL ; 
-- SELECT seq_CPM_PM_Pro_Pla_Reg_no.CURRVAL AS 생산계획등록 FROM DUAL ; 
-- SELECT seq_CPM_PM_Ope_Per_Reg_no.CURRVAL AS 작업실적등록 FROM DUAL ; 
-- SELECT seq_CPM_PM_Ope_Per_Reg_Det_no.CURRVAL AS "작업실적등록 세부사항" FROM DUAL ; 
--  SELECT seq_CPM_OM_Out_Fin_no.CURRVAL AS 외주마감 FROM DUAL ; 
--  
--select * from user_sequences;



--우편번호
create table SM_CRI_Zip (
Zipcode varchar2(12) PRIMARY KEY, --우편번호
Road_Address varchar2(60) NOT NULL, 
Lot_Address varchar2(60) 
);

insert into SM_CRI_Zip (
Zipcode, Road_Address, Lot_Address)
values ( 
'07252' , '서울특별시 영등포구 영등포로53길 21', '서울특별시 영등포구 영등포동2가 208' );
INSERT INTO SM_CRI_Zip VALUES ( '21354' , '인청광역시 부평구 신트리로 8번길 15' , NULL);
INSERT INTO SM_CRI_Zip VALUES ( '04706' , '서울특별시 성동구 마장로23길 11-14(홍익동)' , NULL);
INSERT INTO SM_CRI_Zip VALUES ( '04705' , '서울특별시 성동구 마장로22길(홍익동)' , NULL);
INSERT INTO SM_CRI_Zip VALUES ( '21352' , '인천광역시 부평구' , NULL);
INSERT INTO SM_CRI_Zip VALUES ( '614012' , '부산광역시 부산진구 중앙동' , NULL);
INSERT INTO SM_CRI_Zip VALUES ( '689841' , '울산광역시 울주군' , NULL);
INSERT INTO SM_CRI_Zip VALUES ( '135802' , '서울특별시 강남구' , NULL);
INSERT INTO SM_CRI_Zip VALUES ( '157804' , '서울특별시 강서구' , NULL);
INSERT INTO SM_CRI_Zip VALUES ( '136857' , '서울특별시 강북구' , NULL);
INSERT INTO SM_CRI_Zip VALUES ( '120806' , '서울특별시 서대문구' , NULL);

--회사등록
Create table SM_CRI_Com_Reg ( 
Company_code varchar2(12) PRIMARY KEY,--회사코드,회사코드
Company_Name varchar2(50) NOT NULL,--회사명,회사명
Sortation varchar2(10) NOT NULL,--구분
Fiscal_Year_Number varchar2(3) NOT NULL,--회계연도_기수
Fiscal_Year_Dates date NOT NULL,--회계연도_시작
Fiscal_Year_Datee date NOT NULL,--회계연도_끝
Company_Registration_Number varchar2(13) NOT NULL UNIQUE,--사업자등록번호
Corporate_Registration_Number varchar2(15) UNIQUE,--법인등록번호
Representatives_Name varchar2(50) NOT NULL ,--대표자성명
Resident_Registration_Number varchar2(15) UNIQUE,--주민등록번호
Main_Store_Postal_Code varchar2(5) NOT NULL,--본점우편번호
Main_Store_Address varchar2(60) NOT NULL,--본점주소
Main_Branch_Number varchar2(60),--본점번지
Main_Store_Tel varchar2(13),--본점전화번호
Upstate varchar2(20) NOT NULL,--업태
Industry varchar2(20) NOT NULL,--종목
Date_Of_Establishment date NOT NULL, --설립년월일
Whether_To_Use_Status varchar2(10),--사용여부
CONSTRAINT FK_Com_Reg FOREIGN KEY(Main_Store_Postal_Code)
REFERENCES SM_CRI_Zip(Zipcode) on delete cascade
);

--외국인여부 삭제,본점FAX번호 삭제
insert into SM_CRI_Com_Reg (
Company_code,--회사코드
Company_Name,--회사명
Sortation,--구분
Fiscal_Year_Number,--회계연도_기수
Fiscal_Year_Dates,--회계연도시작
Fiscal_Year_Datee,--회계연도끝
Company_Registration_Number,--사업자등록번호
Corporate_Registration_Number,--법인등록번호
Representatives_Name,--대표자성명
Resident_Registration_Number,--주민등록번호
Main_Store_Postal_Code,
Main_Store_Address,--본점주소
Main_Branch_Number,--본점번지
Main_Store_Tel,--본점전화번호
Upstate,--업태
Industry,--종목
Date_Of_Establishment, --설립년월일
Whether_To_Use_Status) --사용여부
VALUES (7000, '킹덤컴퓨터', '1', 9, '2021-01-01','2021-12-31', '107-86-12344' , '110111-0921513',
'서철민', '691028-1066939' , '07252' , '서울특별시 영등포구 영등포로53길 21','영등포동2가',
'055-335-7506', '제조, 도소매', '전자제품외', '2013-03-01', '1.사용' );


------------------------------------------------------------

--사업장 등록
create table SM_CRI_Wor_Reg ( 
Workplace_Code varchar2(12) PRIMARY KEY,--사업장코드 
Workplace_Name varchar2(50) NOT NULL UNIQUE,--사업장명
Company_Registration_Number varchar2(13) NOT NULL UNIQUE,--사업자등록번호 
Corporate_Registration_Number varchar2(15) UNIQUE ,--법인등록번호
Representatives_Name varchar2(50) NOT NULL,--대표자성명 
Workplace_Zipcode varchar2(5),--사업장우편번호 
Workplace_Address varchar2(60) NOT NULL,--사업장주소
Workplace_Number varchar2(60),--사업장번지
Workplace_Tel varchar2(13), --사업장전화번호
Upstate varchar2(20) NOT NULL, --업태 varchar2(20)으로 변경
Industry varchar2(20) NOT NULL, --종목 varchar2(20)으로 변경
Main_Store_Status varchar2(10), -- 본점여부 
CONSTRAINT FK_Wor_Reg FOREIGN KEY(Workplace_Zipcode)
REFERENCES SM_CRI_Zip(Zipcode) on delete cascade
);

--사업장 FAX번호, 관할세무서 삭제
INSERT INTO SM_CRI_Wor_Reg VALUES(
'2000' , '(주)킹덤컴퓨터 인천지사' , '121-85-35555' , '110111-0921513' , '서질풍' , '21354' ,'인천광역시 부평구 신트리로 8번길 15',
'(부평동)','051-153-5858','제조,도소매','전자제품외','2'
);

INSERT INTO SM_CRI_Wor_Reg VALUES (
'1000' , '(주)킹덤컴퓨터 본사' , '107-86-12344' , '110111-1234567' , '김철민' , '07252' , '서울특별시 영등포구 영등포로53길 21' ,
'(영등포동2가)' , '02-346-5126' , '제조,도소매' , '전자제품외' , '1'
); 

------------------------------------------------------------------
--부문등록
create table SM_CRI_Sec_Reg ( 
Sector_Code varchar2(12) PRIMARY KEY, --부문코드 
Sector_Name varchar2(50) NOT NULL  UNIQUE, --부문명
UseDate date NOT NULL--사용기간
);


insert into SM_CRI_Sec_Reg values ( '1000' , '관리부문(본사)' , '2021-01-01' );
insert into SM_CRI_Sec_Reg values ( '2000' , '영업부문(본사)' , '2021-01-01' );
insert into SM_CRI_Sec_Reg values ( '3000' , '자재부문(본사)' , '2021-01-01' );
insert into SM_CRI_Sec_Reg values ( '4000' , '생산부문(본사)' , '2021-01-01' );
insert into SM_CRI_Sec_Reg values ( '5000' , '자재부문(인천지사)' , '2021-01-01' );
insert into SM_CRI_Sec_Reg values ( '6000' , '생산부문(인천지사)' , '2021-01-01' );

---------------------------------------------------------------
--부서등록
CREATE table SM_CRI_Dep_Reg (
Department_Code varchar2(12) PRIMARY KEY, --부서코드
Department_Name varchar2(50) NOT NULL ,--부서명 
Workplace_Code varchar2(12) NOT NULL ,--사업장코드
Workplace_Name varchar2(50) NOT NULL , --사업장명
Sector_Code varchar2(12) NOT NULL, --부문코드 
Sector_Name varchar2(50) NOT NULL, --부문명
Usedate date NOT NULL,--사용기간
CONSTRAINT SMCRIDepReg_WorkplaceCode_FK FOREIGN KEY(Workplace_Code)
REFERENCES SM_CRI_Wor_Reg(Workplace_Code) on delete cascade,
CONSTRAINT SMCRIDepReg_SectorCode_FK FOREIGN KEY(Sector_Code)
REFERENCES SM_CRI_Sec_Reg(Sector_Code) on delete cascade
);

--부서등록
insert into SM_CRI_Dep_Reg 
VALUES ('1100' , '임원실' , '1000' , '(주)킹덤컴퓨터본사' , '1000' , '관리부문(본사)' , '2021-01-01' );
insert into SM_CRI_Dep_Reg 
VALUES ('1200' , '관리부' , '1000' , '(주)킹덤컴퓨터본사' , '1000' , '관리부문(본사)' , '2021-01-01' );
insert into SM_CRI_Dep_Reg 
VALUES ('2100' , '영업1부' , '1000' , '(주)킹덤컴퓨터본사' , '2000' , '영업부문(본사)' , '2021-01-01' );
insert into SM_CRI_Dep_Reg 
VALUES ('2200' , '영업2부' , '1000' , '(주)킹덤컴퓨터본사' , '2000' , '영업부문(본사)' , '2021-01-01' );
insert into SM_CRI_Dep_Reg 
VALUES ('2300' , '영업3부' , '1000' , '(주)킹덤컴퓨터본사' , '2000' , '영업부문(본사)' , '2021-01-01' );
insert into SM_CRI_Dep_Reg 
VALUES ('3100' , '자재부' , '1000' , '(주)킹덤컴퓨터본사' , '3000' , '자재부문(본사)' , '2021-01-01' );
insert into SM_CRI_Dep_Reg 
VALUES ('4100' , '생산부' , '1000' , '(주)킹덤컴퓨터본사' , '4000' , '관리부문(본사)' , '2021-01-01' );
insert into SM_CRI_Dep_Reg 
VALUES ('5100' , '자재부' , '1000' , '(주)킹덤컴퓨터본사' , '5000' , '자재부문(인천지사)' , '2021-01-01' );
insert into SM_CRI_Dep_Reg 
VALUES ('6100' , '관리부' , '1000' , '(주)킹덤컴퓨터본사' , '6000' , '생산부문(인천지사)' , '2021-01-01' );

-----------------------------------------------------------------
--사원등록
create table SM_CRI_Emp_Reg (
Employee_Code varchar2(12) PRIMARY KEY, --사원코드 
Employee_Name varchar2(50) NOT NULL, --사원명 
Department_Code varchar2(12) NOT NULL, --부서코드 
Department_Name varchar2(50) NOT NULL, --부서명 
Employee_Password varchar2(10),
JoinDate date NOT NULL, --입사일
ResignationDate date, --퇴사일
Emergency_Contact_Network varchar2(13) NOT NULL UNIQUE, --비상연락망
CONSTRAINT FK_DeP_Code FOREIGN KEY(Department_Code)
REFERENCES SM_CRI_Dep_Reg(Department_Code) on delete cascade
);
--사원명(영문) 삭제

insert into SM_CRI_Emp_Reg (
Employee_Code ,
Employee_Name,
Department_Code,
Department_Name,
Employee_Password,
JoinDate ,
ResignationDate,
Emergency_Contact_Network
)values ( '20130302' , '유원규', '1200','관리부','0000', '2013-03-01', NULL , '010-1546-8761');

------------------------------------------------------------------
--시스템 환경설정
create table SM_CRI_Sys_Env_set (
Division varchar2(10), --구분
Code varchar2(12) PRIMARY KEY, --코드
Environment_Element_Name varchar2(50) NOT NULL, --환경요소명
Type_Classification varchar2(30) NOT NULL, --유형구분
Type_Settings varchar2(2) NOT NULL, --유형설정
Selection_Range varchar2(100) NOT NULL, --선택범위
Note varchar2(1000) --비고
);

insert into SM_CRI_Sys_Env_set
values ( '공통', '01', '본지점회계여부' , '여부' , '1' , '0.미사용 1.사용' , NULL );
insert into SM_CRI_Sys_Env_set
values ( '공통', '02', '수량소숫점자리수' , '자리수' , '2' , '선택범위:0~6' , NULL );
insert into SM_CRI_Sys_Env_set
values ( '공통', '05', '비율소숫점자리수' , '자리수' , '2' , '선택범위:0~6' , NULL );
insert into SM_CRI_Sys_Env_set
values ( '공통', '11', '비율%표시여부' , '여부' , '1' , '1.여 2.부' , NULL );

--------------------------------------------------------

--일반거래처등록
Create table SM_BIM_Gen_Cus_Reg (
General_Customer_Code varchar2(12) PRIMARY KEY, --거래처코드
General_Customer_Name varchar2(50) NOT NULL unique, --거래처명
General_Customer_Division varchar2(10) NOT NULL, --구분
Company_Registration_Number varchar2(13) NOT NULL UNIQUE, --사업자등록번호 
Resident_Registration_Number varchar2(15), --주민등록번호 
Representativs_Name varchar2(50) NOT NULL, --대표자성명 
Upstate varchar2(20) NOT NULL, --업태
Industry varchar2(20) NOT NULL, --종목
Zipcode varchar2(12) NOT NULL, --우편번호
Workplace_Address varchar2(60) NOT NULL, --사업장주소
GeneralCustomer_Tel varchar2(13) , --거래처전화번호
Wholesale_Retail_Business_Code varchar2(12), --주류코드
CONSTRAINT FK_Gen_Address FOREIGN KEY(Zipcode)
REFERENCES SM_CRI_Zip(Zipcode) on delete cascade
);

SELECT * FROM SM_BIM_Gen_Cus_Reg;

--SELECT F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg') FROM SM_BIM_Gen_Cus_Reg;

SELECT seq_SM_BIM_Gen_Cus_Reg_no.NEXTVAL AS 일반거래처시퀀스 FROM DUAL ; 
insert into SM_BIM_Gen_Cus_Reg 
values ( F_GET_CURR_SEQ('SM_BIM_Gen_Cus_Reg'), '(주)삼도전자', '일반' , '102-81-66312' , '670328-179321' , '서화풍',
'도, 소매', '전자제품 외', '04706' , '서울특별시 성동구 마장로23길 11-14(홍익동)' , '02-2293-9488' , NULL);
insert into SM_BIM_Gen_Cus_Reg 
values ( F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'), '(주)오라클전자', '일반' , '102-81-66313' , '670321-179322' , '김바보',
'도, 소매', '전자제품 외', '04705' , '서울특별시 성동구 마장로22길(홍익동)' , '02-2291-9486' , NULL);
insert into SM_BIM_Gen_Cus_Reg 
values ( F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'), '(주)디비컴퓨터', '일반' , '102-81-66314' , '670322-179323' , '미니언',
'도, 소매', '컴퓨터', '21352' , '인천광역시 부평구' , '02-2292-9485' , NULL);
insert into SM_BIM_Gen_Cus_Reg 
values ( F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'더지글로직스', '일반' , '102-81-66315' , '670323-179324' , '박수건',
'도, 소매', '전자제품 외', '614012' , '부산광역시 부산진구 중앙동' , '02-2294-9484' , NULL);
insert into SM_BIM_Gen_Cus_Reg 
values ( F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'(주)서울컴텍', '일반' , '102-81-66316' , '670324-179325' , '비전공',
'도, 소매', '전자제품 외', '689841' , '울산광역시 울주군' , '02-2295-9483' , NULL);
insert into SM_BIM_Gen_Cus_Reg 
values ( F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'), '(주)씨네스', '일반' , '102-81-66317' , '670325-179326' , '박주영',
'도, 소매', '전자제품 외', '135802' , '서울특별시 강남구' , '02-2296-9482' , NULL);
insert into SM_BIM_Gen_Cus_Reg 
values (F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'), '(주)삼화INC', '일반' , '102-81-66318' , '670326-179327' , '오라정',
'도, 소매', '전자제품 외', '157804' , '서울특별시 강서구' , '02-2297-9481' , NULL);
insert into SM_BIM_Gen_Cus_Reg 
values ( F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'), '(주)삼주전자', '일반' , '102-81-66319' , '670327-179328' , '공팔이',
'도, 소매', '전자제품 외', '136857' , '서울특별시 강북구' , '02-2298-9480' , NULL);
insert into SM_BIM_Gen_Cus_Reg 
values ( F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'), '(주)포스코전자', '일반' , '102-81-66320' , '670328-179321' , '이지훈',
'도, 소매', '전자제품 외', '120806' , '서울특별시 서대문구' , '02-2293-9487' , NULL);

--------------------------------------------------------------------
--품목군 등록
create table SM_BIM_Ite_gro_Reg (
Item_Group_Code varchar2(12) PRIMARY KEY, --품목군코드
Item_Group_Name varchar2(50) NOT NULL, --품목군명
Use_Status varchar2(10) DEFAULT '사용', -- 사용여부
Explanation varchar2(200) -- 품목군설명
);

insert into SM_BIM_Ite_gro_Reg values ( 'CA10' , '케이스', 1 , NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'BOARD' , '메인보드', 1 , NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'CPU' , 'CPU', 1 , NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'RAM' , 'RAM', 1 , NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'GPU' , 'GPU', 1 , NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'SSD' , 'SSD', 1 , NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'HDD' , 'HDD', 1 , NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'POWER' , 'POWER', 1 , NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'PC10' , '데스크탑PC', 1 , NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'AD01' , 'AD보드', 1 , NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'IVT' , '인버터' , 1 , NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'SMPS' , 'SMPS' , 1 , NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'IPBOARD' , 'IP보드' , 1 , NULL);
INSERT INTO SM_BIM_Ite_gro_Reg values ( 'BACKLIGHT' , '백라이트' , 1, NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'MONITER' , '모니터' , 1 , NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'DESKTOP' , '데스크탑' , 1 , NULL );
insert into SM_BIM_Ite_gro_Reg values ( 'KEYBOARD' , '키보드' , 1 ,NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'MOUSE' , '마우스' , 1 , NULL);

------------------------------------------------------------------
--품목등록
create table SM_BIM_Ite_Reg (
Item_Code varchar2(12) PRIMARY KEY, --품목코드
Item_Name varchar2(50) UNIQUE NOT NULL, --품목명
Standard varchar2(20), --규격
Inventory_Unit varchar2(5) DEFAULT 'EA', --재고단위
Whether_LOT varchar2(10), --LOT여부
SET_Item varchar2(10), --SET품목
Inspection_Status varchar2(10), --검사여부
Use_Status varchar2(30), -- 사용여부
LOT_Quantity number(5) DEFAULT 0, --LOT수량 
Drawing_Number varchar2(5), --도면번호 
Hs_Code varchar2(12), --HSCODE
Width varchar2(100), --폭
Length varchar2(100), --길이
Height varchar2(100), --높이
Cost number(15) DEFAULT 0, --원가
Item_Group_Code varchar2(12), -- 품목군등록
dailyProduction number(5) NOT NULL,--일 생산량
Division varchar2(20) not null, --완제품/반제품/부품 구분
Notes varchar2(200),

constraint SMBIMIteReg_ItemGroupCode_FK foreign key (Item_Group_Code) references SM_BIM_Ite_gro_Reg(Item_Group_Code)
);
--제품
insert into SM_BIM_Ite_Reg VALUES
('PCSET01','사무용컴퓨터',NULL,'SET', 1 , 1 , 1 , 1 , '0' , NULL, NULL, NULL ,NULL , NULL , 409000 ,'PC10' , 100,'완제품' , NULL); 
insert into SM_BIM_Ite_Reg VALUES
('PCSET02','게이밍컴퓨터',NULL,'SET', 1 , 1 , 1 , 1 , '0' , NULL, NULL, NULL ,NULL , NULL , 3177600 ,'PC10' , 200,'완제품' , NULL); 
insert into SM_BIM_Ite_Reg VALUES
('PCSET03','저사양컴퓨터',NULL,'SET', 1 , 1 , 1 , 1 , '0' , NULL, NULL, NULL ,NULL , NULL , 229000 ,'PC10' , 300,'완제품' , NULL); 
insert into SM_BIM_Ite_Reg VALUES
('PCSET04','최고급컴퓨터',NULL,'SET', 1 , 1 , 1 , 1 , '0' , NULL, NULL, NULL ,NULL , NULL , 4159600 ,'PC10' , 400,'완제품' , NULL); 

--반제품
insert into SM_BIM_Ite_Reg VALUES
('MT01','27inch모니터',NULL,'EA', 1 , 1 , 1 , 1 , '0' , NULL, NULL, '611.70mm' ,'463mm' , '250.50mm' , 209000 ,'MONITER' , 500,'반제품' , NULL); 
insert into SM_BIM_Ite_Reg VALUES
('MT02','32inch모니터',NULL,'EA', 1 , 1 , 1 , 1 , '0' , NULL, NULL, '714.30mm' ,'512.30mm' , '208.80mm' , 398890 ,'MONITER' , 600,'반제품' , NULL);
insert into SM_BIM_Ite_Reg VALUES
('MT03','43inch모니터',NULL,'EA', 1 , 1 , 1 , 1 , '0' , NULL, NULL, '1080mm' ,'1100mm' , '250.50mm' , 649000 ,'MONITER' , 700,'반제품' , NULL);
insert into SM_BIM_Ite_Reg VALUES
('DT01','피카소VEGA8',NULL,'EA', 1 , 1 , 1 , 1 , '0' , NULL, NULL, 'NULL' ,'NULL' , 'NULL' , 449900 ,'DESKTOP' , 800,'반제품' , NULL);
insert into SM_BIM_Ite_Reg VALUES
('DT02','프리플로우ELITE',NULL,'EA', 1 , 1 , 1 , 1 , '0' , NULL, NULL, 'NULL' ,'NULL' , 'NULL' , 1189000 ,'DESKTOP' , 900,'반제품' , NULL);
insert into SM_BIM_Ite_Reg VALUES
('DT03','게이밍본체PC',NULL,'EA', 1 , 1 , 1 , 1 , '0' , NULL, NULL, 'NULL' ,'NULL' , 'NULL' , 1487000 ,'DESKTOP' , 1000,'반제품' , NULL);
insert into SM_BIM_Ite_Reg VALUES
('DT04','EXKOREA',NULL,'EA', 1 , 1 , 1 , 1 , '0' , NULL, NULL, 'NULL' ,'NULL' , 'NULL' , 339900 ,'DESKTOP' , 100,'반제품' , NULL);


--부품
insert into SM_BIM_Ite_Reg VALUES
('CASE01','슬림형본체',NULL,'EA', 1 , 1 , 1 , 1 , '0' , NULL, NULL, '210mm' ,'395mm' , '475mm' , 300000 ,'CA10' , 200,'부품' , NULL); 
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'CASE03' , 'ABKO NCORE' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '210mm' , '390mm' , '461mm' , 50000 ,'CA10', 300,'부품' , NULL);
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'HDD01' , 'WD BLUE 7200' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , NULL , NULL, NULL ,60000 ,'HDD',400,'부품', '1T/SATA3');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'HDD02' , 'Seagate BarraCuda 7200' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 80000 ,'HDD',500,'부품', '1T/SATA3');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'SSD01' , '삼성전자 980 PRO' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 700000 ,'SSD',600,'부품', NULL);
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'SSD02' , '삼성전자 970 EVO' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 600000 ,'SSD',700,'부품', NULL);
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'SSD03' , '삼성전자 870 EVO' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 500000 ,'SSD', 800,'부품',NULL);
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'GPU01' , '지포스 RTX 3060' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 1000000 ,'GPU',900,'부품', 'MSI/1837MHz/550W/276mm');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'GPU02' , '지포스 RTX 3070' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 1200000 ,'GPU',1000,'부품', 'MSI/1830MHz/650W/323mm');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'GPU03' , '지포스 RTX 2060' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 800000 ,'GPU', 100,'부품','GIGAByte/1755MHz/500W/226mm');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'GPU04' , '지포스 GTX1050 Ti' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 600000 ,'GPU',200,'부품', 'MSI/1341MHz/300W/177mm   ');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'GPU05' , '갤럭시 GT1030' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 600000 ,'GPU', 300,'부품','갤럭시/1227MHz/180mm');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'CPU01' , 'AMD 라이젠5' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 500000 ,'CPU',400,'부품', 'AMD/6코어/3.6GHZ');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'CPU02' , 'core I5-10세대' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 700000 ,'CPU', 500,'부품','인텔/6코어/4.1GHz');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'CPU03' , 'core I5-11세대' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 900000 ,'CPU', 600,'부품','인텔/6코어/2.6GHz');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'CPU04' , 'core I7-11세대' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 1200000 ,'CPU',700,'부품', '인텔/8코어/3.6GHz');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'CPU05' , 'AMD 라이젠3 Pro' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 700000 ,'CPU', 800,'부품','AMD/4코어/3.8GHz');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'RAM01' , 'ADATA XPG DDR4-3200' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 500000 ,'RAM', 900,'부품','DDR4/3200MHz/16G');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'RAM02' , 'KLEVV DDR4-3200' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 400000 ,'RAM',1000,'부품', 'DDR4/3200MHz/32G');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'RAM03' , '삼성 DDR4-3200' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 600000 ,'RAM', 100,'부품','DDR4/3200MHz/8G');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'BOARD01' , '박격포 MAG B560M' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 300000 ,'BOARD',200,'부품', '인텔/DDR4/24.4x24.4cm');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'BOARD02' , 'ASRock B550M' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 100000 ,'BOARD',300,'부품', 'AMD/DDR4/24.4x24.4cm');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'BOARD03' , 'GIGABYTE A320M' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 1500000 , 'BOARD',400,'부품','AMD/DDR4/24.4x19.5cm');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'POWER01' , '시소닉 A12 STD' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , '140mm' , '150mm' , 200000 ,'POWER', 500,'부품','500W');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'POWER02' , 'ASUS POG Thor 850P' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '135mm' , '160mm' , 0 , 300000 ,'POWER',600,'부품', '852W');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'POWER03' , '마이크로닉 Classic 2' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '120mm', '140mm' , 0 , 400000 , 'POWER',700,'부품','750W');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'ADBOARD01' , '정면소켓형 AD 보드' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '105mm', '55mm' , 0 , 23000 , 'AD01',800,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'ADBOARD02' , '초소형 AD 보드' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '110mm', '27mm' , 0 , 15000 , 'AD01',900,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'ADBOARD03' , '2232GW AD 보드' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '117mm', '86mm' , 0 , 19000 , 'AD01',1000,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'INVERTER01' , 'FIF1742-01A' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '155mm', '40mm' , 0 , 6500 , 'IVT',100,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'INVERTER02' , 'TWT-122K' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '160mm', '45mm' , 0 , 7000 , 'IVT',200,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'INVERTER03' , 'DS-1307WK' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '160mm', '26mm' , 0 , 8500 , 'IVT',300,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'SMPS01' , 'IDF060CV-S24V1' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '150mm', '50mm' , 0 , 7000 , 'SMPS',400,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'SMPS02' , 'IDF100CV-S24V1' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '170mm', '70mm' , 0 , 10000 , 'SMPS',500,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'SMPS03' , 'IDF600CV-S24V2' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '160mm', '60mm' , 0 , 15000 , 'SMPS',600,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'LIPSBOARD01' , 'LI01' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '147mm', '116mm' , 0 , 10000 , 'IPBOARD',700,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'LIPSBOARD02' , 'LI10' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '148mm', '135mm' , 0 , 17000 , 'IPBOARD',800,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'LIPSBOARD03' , 'LL01' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '151mm', '120mm' , 0 , 12000 , 'IPBOARD',900,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'BL01' , '32MB25VQ' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '559mm', '11mm' , 0 , 24000 , 'BACKLIGHT',1000,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'BL02' , '32LF550B' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '559mm', '11mm' , 0 , 22000 , 'BACKLIGHT',100,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'BL03' , 'L32LX530H' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '559mm', '11mm' , 0 , 23000 , 'BACKLIGHT',200,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'KB01' , 'COX-CK87' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , NULL , NULL , 0 , 49900 , 'KEYBOARD',300,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'KB02' , 'SPA-NKG2CUB' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , NULL , NULL , 0 , 72000 , 'KEYBOARD',400,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'KB03' , 'BUBBLE IR-K10' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , NULL , NULL , 0 , 14890 , 'KEYBOARD',500,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'MO01' , 'G102' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , NULL , NULL , 0 , 18150 , 'MOUSE',600,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'MO02' , 'G304' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , NULL , NULL , 0 , 37880 , 'MOUSE',700,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'MO03' , 'BEETLE' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , NULL , NULL , 0 , 9000 , 'MOUSE',800,'부품','NULL');

--------------------------------------------------------------------
--창고등록

create table SM_BIM_Hou_Reg (
House_Code varchar2(12) PRIMARY KEY, --창고코드 등록 
House_Name varchar2(50) UNIQUE NOT NULL, --창고명
House_Location_IN varchar2(50), --입고기본위치 
House_Location_OUT varchar2(50), --출고기본위치 
House_Explanation varchar2(200), --창고 설명
House_Status varchar2(10) DEFAULT '1.부'  --창고 사용여부
);

insert into SM_BIM_Hou_Reg values ( 'M100' , '제품창고' , '제품양품장소' , '제품양품장소' , null , '사용' );
insert into SM_BIM_Hou_Reg values ( 'M200' , '부품창고' , null , null , null , '사용' );


create table SM_BIM_Pro_Reg (
Process_Code varchar2(12) PRIMARY KEY , --공정(생산)코드
Process_Name varchar2(50) NOT NULL, --공정(생산)명
Process_Location_IN varchar2(50), --입고기본위치
Process_Location_OUT varchar2(50), --출고기본위치
Process_Explanation varchar2(200), --공정설명
Process_Status varchar2(10) DEFAULT '1.부'
);

insert into SM_BIM_Pro_Reg values ( 'L100' , '작업공정' , null , null , null , '사용' );
insert into SM_BIM_Pro_Reg values ( 'L200' , '작업공정(조립)' , null , null , null , '사용' );

create table SM_BIM_Out_Reg (
Outsourcing_Code varchar2(12) PRIMARY KEY, --외주공정코드 
Outsourcing_Name varchar2(50) NOT NULL, --외주공정명
Outsourcing_Location_IN varchar2(50), --입고기본위치
Outsourcing_Location_OUT varchar2(50), --출고기본위치
Outsourcing_Explanation varchar2(200), --공정설명
Outsourcing_Status varchar2(10) DEFAULT '1.부'
);

insert into SM_BIM_Out_Reg values ('P100' , '외주공정' , null , null , null , '사용');

-------------------------------------------------------------------
--물류관리내역등록

create table SM_BIM_Log_Man (
Logistics_IN_Code varchar2(12) PRIMARY KEY, --관리내역코드
Logistics_IN_Name varchar2(50) NOT NULL, --관리항목명
Explanation varchar2(200), --품목군설명
Remarks varchar2(200) --비고200 새로만듬
);

insert into SM_BIM_Log_Man values ( 'AG','지역그룹구분', NULL, NULL);
insert into SM_BIM_Log_Man values ( 'AM','지역관리구분', NULL, NULL);
insert into SM_BIM_Log_Man values ( 'LA','재고조정구분', NULL, NULL);
insert into SM_BIM_Log_Man values ( 'LE','수입 제비용 구분', NULL, NULL);
insert into SM_BIM_Log_Man values ( 'LP','구매자재구분', NULL, NULL);
insert into SM_BIM_Log_Man values ( 'LQ','품질검사구분', NULL, NULL);
insert into SM_BIM_Log_Man values ( 'LS','영업관리구분', NULL, NULL);
--------------------------------------------------------------------

--검사유형등록
create table SM_BIM_Ins_Typ (
Inspection_Code varchar2(12) PRIMARY KEY, --검사유형코드 varchar2(12)
Inspection_Name varchar2(50) NOT NULL, --검사유형명 varchar2(30)
Inspection_Question varchar2(200), --검사유형질문
Remarks varchar2(200) --비고 새로생성 
);
insert into SM_BIM_Ins_Typ values ( '10-1' ,'외관검사', '긁힘이나 손상된곳은 없는가?' , null);
insert into SM_BIM_Ins_Typ values ( '10-2' ,'외관검사', '포장 상태는 양호한가' , null);
insert into SM_BIM_Ins_Typ values ( '10-3' ,'외관검사', '얼룩이나 번짐현상은 없는가?' , null);



-------------------------------------------------------------------
--SET품 등록

create table SM_BIM_SET_Reg(
SET_Code varchar2(12) primary key, --셋트품 코드
SET_Name varchar2(50) unique not null, --셋트품 명
SET_Standard varchar2(20), --규격
SET_Unit varchar2(5) default 'SET' --단위
);


insert into SM_BIM_SET_Reg values ( 'PC10' , '데스크탑PC' , NULL , null );

------------------------------------------------------------------
--SET품 구성품 등록
create table SM_BIM_Com_Reg (
SET_Code varchar2(12), --셋트품 코드
Components_Code varchar2(12) not null unique, --구성품 코드
Components_Name varchar2(30) not null unique, --구성품 명
Components_Standard varchar2(20),
Components_Unit varchar2(5) default 'EA',
Components_Stock number(5)default '0',
CONSTRAINT FK_SET_SETCode FOREIGN KEY(SET_Code)
REFERENCES SM_BIM_SET_Reg(SET_Code),
CONSTRAINT FK_SET_Item_Code FOREIGN KEY(Components_Code)
REFERENCES SM_BIM_Ite_Reg(Item_Code),
CONSTRAINT FK_SET_Item_Name FOREIGN KEY(Components_Name)
REFERENCES SM_BIM_Ite_Reg(Item_Name)
);

insert into SM_BIM_Com_Reg values ( 'PC10' , 'SSD01' , '삼성전자 980 PRO' , null , null , null);
insert into SM_BIM_Com_Reg values ( 'PC10' , 'GPU01' , '지포스 RTX 3060' , null , null , null);
insert into SM_BIM_Com_Reg values ( 'PC10' , 'CPU01' , 'AMD 라이젠5' , null , null , null);
insert into SM_BIM_Com_Reg values ( 'PC10' , 'POWER01' , '시소닉 A12 STD' , null , null , null);


--------------------------------------------------------------------
--고객별출력품목등록
create table SM_BIM_Out_Item_Cus (
Item_Code varchar2(12) PRIMARY KEY,  -- 품목품번
Item_Name varchar2(50) NOT NULL, -- 품명
Standard varchar2(20), --규격
CONSTRAINT FK_Cus_Item_CODE FOREIGN KEY(Item_Code)
REFERENCES SM_BIM_Ite_Reg(Item_Code)
);
insert into SM_BIM_Out_Item_Cus values ( 'CASE01', '슬림형본체'  , null );
insert into SM_BIM_Out_Item_Cus values ( 'GPU03' , '지포스 RTX 2060' , null );
insert into SM_BIM_Out_Item_Cus values ('CPU05' , 'AMD 라이젠3 Pro' , null);
insert into SM_BIM_Out_Item_Cus values ( 'RAM03', '삼성 DDR4-3200' , null);
insert into SM_BIM_Out_Item_Cus values ( 'BOARD01' , '박격포 MAG B560M' , null);
insert into SM_BIM_Out_Item_Cus values ('POWER03' , '마이크로닉 Classic 2' , null);

--------------------------------------------------------------------------------------
--고객별품목등록 정규화
create table SM_BIM_Out_Item_Cus_IN (
Customer_Code varchar2(12) PRIMARY KEY, --고객코드
Customer_Name varchar2(50) NOT NULL, --고객명
Item_Code varchar2(12) NOT NULL, --출력품번
Item_Name varchar2(50) NOT NULL, --출력품명
Standard varchar2(20) --출력규격
);

EXECUTE P_RESET_SEQ('seq_SM_BIM_Gen_Cus_Reg_no');
SELECT F_GET_CURR_SEQ('SM_BIM_Gen_Cus_Reg') FROM SM_BIM_Out_Item_Cus_IN;

SELECT seq_SM_BIM_Gen_Cus_Reg_no.NEXTVAL AS 일반거래처시퀀스 FROM DUAL ; 

insert into SM_BIM_Out_Item_Cus_IN values (F_GET_CURR_SEQ('SM_BIM_Gen_Cus_Reg'), '(주)삼도전자' , 'CASE01', '슬림형본체', NULL);
insert into SM_BIM_Out_Item_Cus_IN values (F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'), '(주)오라클전자' , 'GPU03', '지포스 RTX 2060', NULL);
insert into SM_BIM_Out_Item_Cus_IN values (F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'), '(주)디비컴퓨터' , 'CPU05',  'AMD 라이젠3 Pro', NULL);
insert into SM_BIM_Out_Item_Cus_IN values (F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'), '더지글로직스' ,'RAM03', '삼성 DDR4-3200' , NULL);
insert into SM_BIM_Out_Item_Cus_IN values (F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'), '(주)서울컴텍', 'BOARD01' , '박격포 MAG B560M' , NULL);
insert into SM_BIM_Out_Item_Cus_IN values (F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'), '(주)씨네스',  'POWER03' , '마이크로닉 Classic 2', NULL);
EXECUTE P_RESET_SEQ('seq_SM_BIM_Gen_Cus_Reg_no');
SELECT * FROM SM_BIM_Out_Item_Cus_IN;
-------------------------------------------------------------------
--판매계획등록
create table SM_BIM_Sal_Pla_Reg (
Plan_Code varchar2(12) PRIMARY KEY,--판매등록코드
Plan_Date date not null, --판매계획등록일자
Item_Code varchar2(12) NOT NULL, --품번 
Item_Name varchar2(50) NOT NULL, --품명
Standard varchar2(20), --규격
Inventory_Unit varchar2(5) DEFAULT 'EA', --단위
Plan_Item_Quantity number(5) DEFAULT '0', --수량 
Plan_Unit_Price number(15) DEFAULT '0', --예상단가 
Newplan_Item_Quantity number(5), --수정후 수량
Newplan_Unit_Price number(15) DEFAULT '0' --수정후 예상단가
);

EXECUTE P_RESET_SEQ('seq_SM_BIM_Gen_Cus_Reg_no');
insert into SM_BIM_Sal_Pla_Reg values (F_GET_NEXT_SEQ('SM_BIM_Sal_Pla_Reg'),sysdate,'CPU05' , 'AMD 라이젠3 PRO' , null, 'EA' , 100 , 500000 ,120 , 500000 );
insert into SM_BIM_Sal_Pla_Reg values (F_GET_NEXT_SEQ('SM_BIM_Sal_Pla_Reg'),sysdate+1,'RAM03' , '삼성 DDR4-3200' , null, 'EA' , 100 , 100000 ,120 , 100000 );
insert into SM_BIM_Sal_Pla_Reg values (F_GET_NEXT_SEQ('SM_BIM_Sal_Pla_Reg'),sysdate+2 ,'POWER01' , '시소닉 A12 STD' , null, 'EA' , 100 , 400000 ,120 , 400000 );
insert into SM_BIM_Sal_Pla_Reg values (F_GET_NEXT_SEQ('SM_BIM_Sal_Pla_Reg'),sysdate+3,'SSD01' , '삼성전자 980 PRO' , null, 'EA' , 100 , 200000 ,120 , 300000 );
SELECT * FROM SM_BIM_Sal_Pla_Reg;
------------------------------------------------------------------
--장소등록
create table SM_BIM_Wor_Reg(
Location_Code varchar2(12) primary key, --위치 코드
Location_Name varchar2(50) not null, --위치명
Location_Explanation varchar2(200), --위치설명
Release_Code varchar2(12), --가출고 코드
Release_Customer varchar2(50), --가출고 거래처명
Suitability varchar2(10), --적합여부
Availability varchar2(10), --가용재고여부
Status varchar2(10) default '1.부'--사용여부
);

insert into SM_BIM_Wor_Reg values ('M101', '제품양품장소', NULL , NULL , NULL, '적합' , '1.여' , '사용' );
insert into SM_BIM_Wor_Reg values ('M102', '제품불양품장소', NULL , NULL , NULL, '적합' , '2.부' , '사용' );
insert into SM_BIM_Wor_Reg values ('M201', '부품양품장소', NULL , NULL , NULL, '적합' , '1.여' , '사용' );
insert into SM_BIM_Wor_Reg values ('M202', '부품불양품장소', NULL , NULL , NULL, '적합' , '2.부' , '사용' );


---------------------------------------------------------------------
--생산작업장 등록
create table SM_BIM_Pro_Wor_Reg(
Workplace_Code varchar2(12) primary key,--작업장코드
Workplace_Name varchar2(50) not null,--작업장명
Workplace_Explanation varchar2(200),--작업장설명
Suitability varchar2(10),--적합여부
Process_Explanation varchar2(200),
Status varchar2(10) default '1.부'--사용여부
);

insert into SM_BIM_Pro_Wor_Reg values ('L101', '제품작업장' , NULL, '적합',null , '사용');
insert into SM_BIM_Pro_Wor_Reg values ('L102', '반제품작업장' , NULL, '적합',null , '사용');
insert into SM_BIM_Pro_Wor_Reg values ('L201', '제품작업장(조립)' , NULL, '적합',null , '사용');

--------------------------------------------------------------------------------
--외주작업장 등록
create table SM_BIM_Out_Wor_Reg(
Outsourcing_Code varchar(12),
Workplace_Code varchar2(12) primary key, --작업장 코드
Outcustomer varchar2(12) not null,--외주거래처 코드
Workplace_Name varchar2(50), --작업장명
Outcustomer_Name varchar2(50), --외주거래처명
Workplace_Explanation varchar2(200), --작업장설명
Suitability varchar2(10), --적합여부
Status varchar2(10) default '1.부', --사용여부
CONSTRAINT FK_Outsourcing_Code FOREIGN KEY(Outsourcing_Code)
REFERENCES SM_BIM_Out_Reg(Outsourcing_Code)
);

EXECUTE P_RESET_SEQ('seq_SM_BIM_Gen_Cus_Reg_no');
insert into SM_BIM_Out_Wor_Reg values ('P100','P101',F_GET_NEXT_SEQ('SM_BIM_Sal_Pla_Reg'), '(주)삼도전자' , '(주)삼도전자' , NULL , '적합' , '사용' );
insert into SM_BIM_Out_Wor_Reg values ('P100','P102',F_GET_NEXT_SEQ('SM_BIM_Sal_Pla_Reg'), '(주)오라클전자' , '(주)오라클전자',  NULL , '적합' , '사용' );
insert into SM_BIM_Out_Wor_Reg values ('P100','P103',F_GET_NEXT_SEQ('SM_BIM_Sal_Pla_Reg'), '(주)디비컴퓨터', '(주)디비컴퓨터',  NULL , '적합' , '사용' );
insert into SM_BIM_Out_Wor_Reg values ('P100','P104',F_GET_NEXT_SEQ('SM_BIM_Sal_Pla_Reg'), '더지글로직스',  '더지글로직스',  NULL , '적합' , '사용' );
insert into SM_BIM_Out_Wor_Reg values ('P100','P105',F_GET_NEXT_SEQ('SM_BIM_Sal_Pla_Reg'), '(주)서울컴텍', '(주)서울컴텍',  NULL , '적합' , '사용' );

-------------------------------------------------------------------------------------------------
--생산 라인 등록
create table SM_BIM_Pro_Line_Reg(
    --생산설비
    productionFacility varchar2(50),
    --작업팀
    taskTeam varchar2(50)
);
insert into SM_BIM_Pro_Line_Reg values ('본체 라인 1호', '생산 1반');
insert into SM_BIM_Pro_Line_Reg values ('본체 라인 2호', '생산 2반');
insert into SM_BIM_Pro_Line_Reg values ('본체 라인 3호', '생산 3반');
insert into SM_BIM_Pro_Line_Reg values ('본체 라인 4호', '생산 4반');
insert into SM_BIM_Pro_Line_Reg values ('PC 라인 1호', '조립 1반');
insert into SM_BIM_Pro_Line_Reg values ('PC 라인 2호', '조립 2반');
insert into SM_BIM_Pro_Line_Reg values ('PC 라인 3호', '조립 3반');
insert into SM_BIM_Pro_Line_Reg values ('PC 라인 4호', '조립 4반');



-----------------------------------------------------------------------------------견적등록
--
----테이블 생성
--create table CSM_SM_Est_Reg(
----견적 번호(PK)
--estimateNum varchar2(12) PRIMARY KEY,
----견적 일자(uk)
--estimateDate date,
----고객코드(FK)
--customerCode varchar2(12) not null,
----부가세 구분
--tax varchar2(20) not null,
----비고
--note varchar2(1000),
--
----FK 
--CONSTRAINT FKCSMSMESTREG_BUYER FOREIGN KEY (customerCode) 
--REFERENCES SM_BIM_Gen_Cus_Reg(General_Customer_Code) ON DELETE CASCADE
--);
--
--
--EXECUTE P_RESET_SEQ('seq_SM_BIM_Gen_Cus_Reg_no');
--SELECT seq_SM_BIM_Gen_Cus_Reg_no.NEXTVAL FROM DUAL ;
-- SELECT seq_CSM_SM_Est_Reg_no.NEXTVAL FROM DUAL ; 
--
----데이터 등록1
--INSERT INTO CSM_SM_Est_Reg
--VALUES (F_GET_CURR_SEQ('CSM_SM_Est_Reg'),sysdate,F_GET_CURR_SEQ('SM_BIM_Gen_Cus_Reg'),'부가세포함',null);
--
----데이터 등록2
--INSERT INTO CSM_SM_Est_Reg
--VALUES (F_GET_NEXT_SEQ('CSM_SM_Est_Reg'),sysdate+1,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'부가세포함',null);
----데이터 등록3
--INSERT INTO CSM_SM_Est_Reg
--VALUES (F_GET_NEXT_SEQ('CSM_SM_Est_Reg'),sysdate+2,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'부가세포함',null);
----데이터 등록4
--INSERT INTO CSM_SM_Est_Reg
--VALUES (F_GET_NEXT_SEQ('CSM_SM_Est_Reg'),sysdate+3,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'부가세포함',null);
----데이터 등록5
--INSERT INTO CSM_SM_Est_Reg
--VALUES (F_GET_NEXT_SEQ('CSM_SM_Est_Reg'),sysdate+4,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'부가세포함',null);
----데이터 등록6
--INSERT INTO CSM_SM_Est_Reg
--VALUES (F_GET_NEXT_SEQ('CSM_SM_Est_Reg'),sysdate+5,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'부가세포함',null);
----데이터 등록7
--INSERT INTO CSM_SM_Est_Reg
--VALUES (F_GET_NEXT_SEQ('CSM_SM_Est_Reg'),sysdate+6,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'부가세포함',null);
--
----데이터 등록8
--INSERT INTO CSM_SM_Est_Reg
--VALUES (F_GET_NEXT_SEQ('CSM_SM_Est_Reg'),sysdate+7,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'부가세포함',null);
----데이터 등록9
--INSERT INTO CSM_SM_Est_Reg
--VALUES (F_GET_NEXT_SEQ('CSM_SM_Est_Reg'),sysdate+8,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'부가세포함',null);
----데이터 등록10
--INSERT INTO CSM_SM_Est_Reg
--VALUES (F_GET_NEXT_SEQ('CSM_SM_Est_Reg'),sysdate+9,F_GET_CURR_SEQ('SM_BIM_Gen_Cus_Reg'),'부가세포함',null);
--SELECT * FROM CSM_SM_Est_Reg;
-----------------------------------------------------------------------------------수주등록
--테이블 생성
create table CSM_SM_Ord_Reg(
--주문 번호(PK)
ordersNum varchar2(12) PRIMARY KEY,
--주문 일자
ordersdate Date not null,
--고객(FK)
General_Customer_Code varchar2(12) not null,
--부가세구분
tax varchar2(20) not null,
--비고
Note varchar2(1000),

--FK

--고객
CONSTRAINT FK_CSMSMORDREG_BUYER FOREIGN KEY (General_Customer_Code) 
REFERENCES SM_BIM_Gen_Cus_Reg(General_Customer_Code) ON DELETE CASCADE
);

EXECUTE P_RESET_SEQ('seq_SM_BIM_Gen_Cus_Reg_no');
 SELECT seq_CSM_SM_Ord_Reg_no.NEXTVAL FROM DUAL ; 
 SELECT seq_SM_BIM_Gen_Cus_Reg_no.NEXTVAL FROM DUAL ;

--데이터 등록1
INSERT INTO CSM_SM_Ord_Reg
VALUES(F_GET_CURR_SEQ('CSM_SM_Ord_Reg'),sysdate,F_GET_CURR_SEQ('SM_BIM_Gen_Cus_Reg'),'부가세포함',null);
--데이터 등록2
INSERT INTO CSM_SM_Ord_Reg
VALUES(F_GET_NEXT_SEQ('CSM_SM_Ord_Reg'),sysdate+1,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'부가세포함',null);
--데이터 등록3
INSERT INTO CSM_SM_Ord_Reg
VALUES(F_GET_NEXT_SEQ('CSM_SM_Ord_Reg'),sysdate+2,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'부가세포함',null);
--데이터 등록4
INSERT INTO CSM_SM_Ord_Reg
VALUES(F_GET_NEXT_SEQ('CSM_SM_Ord_Reg'),sysdate+3,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'부가세포함',null);
--데이터 등록5
INSERT INTO CSM_SM_Ord_Reg
VALUES(F_GET_NEXT_SEQ('CSM_SM_Ord_Reg'),sysdate+4,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'부가세포함',null);
--데이터 등록6
INSERT INTO CSM_SM_Ord_Reg
VALUES(F_GET_NEXT_SEQ('CSM_SM_Ord_Reg'),sysdate+5,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'부가세포함',null);
--데이터 등록7
INSERT INTO CSM_SM_Ord_Reg
VALUES(F_GET_NEXT_SEQ('CSM_SM_Ord_Reg'),sysdate+6,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'부가세포함',null);
--데이터 등록8
INSERT INTO CSM_SM_Ord_Reg
VALUES(F_GET_NEXT_SEQ('CSM_SM_Ord_Reg'),sysdate+7,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'부가세포함',null);
--데이터 등록9
INSERT INTO CSM_SM_Ord_Reg
VALUES(F_GET_NEXT_SEQ('CSM_SM_Ord_Reg'),sysdate+8,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'부가세포함',null);
--데이터 등록10
INSERT INTO CSM_SM_Ord_Reg
VALUES(F_GET_NEXT_SEQ('CSM_SM_Ord_Reg'),'20210525',F_GET_CURR_SEQ('SM_BIM_Gen_Cus_Reg'),'부가세포함',null);
SELECT * FROM CSM_SM_ORD_REG;
-----------------------------------------------------------------------------------출고의뢰등록
--테이블 생성
--create table  CSM_SM_Req_Reg(
--    --의뢰 번호(PK)
--requestNum varchar2(12) PRIMARY KEY,
--    --의뢰 일자
--requestDate Date not null,
--    --고객(FK)
--customerCode varchar2(12) not null,
--    --납품처
--deliveryPlace varchar2(50),
--    --의뢰창고(FK)
--House_Code varchar2(12) not null,
--    --의뢰 담당자
--requestHead varchar2(50),
--    --요청마감일
--requestDeadLine Date not null,
--    --비고
--note varchar2(1000),
--
--
----FK
--
----고객
--CONSTRAINT FK_CSMSMREQREG_BUYER FOREIGN KEY (customerCode) 
--REFERENCES SM_BIM_Gen_Cus_Reg(General_Customer_Code) ON DELETE CASCADE,
--
--
----(창고등록에서 창고코드를 가지고 왓을때)
--CONSTRAINT FKCSMSMREQREG_REQUESTWAREHOUSE FOREIGN KEY (House_Code) 
--REFERENCES  SM_BIM_Hou_Reg(House_Code) ON DELETE CASCADE
--
--);
--
--
--EXECUTE P_RESET_SEQ('seq_SM_BIM_Gen_Cus_Reg_no');
--
-- SELECT seq_CSM_SM_Req_Reg_no.NEXTVAL FROM DUAL ; 
-- SELECT seq_SM_BIM_Gen_Cus_Reg_no.NEXTVAL FROM DUAL ;
--
----데이터 등록(창고등록에서 창고코드를 가지고 왓을때)1
--INSERT INTO CSM_SM_Req_Reg
--values (F_GET_CURR_SEQ('CSM_SM_Req_Reg'),sysdate,F_GET_CURR_SEQ('SM_BIM_Gen_Cus_Reg'),null,'M100',null, sysdate+90,null);
----데이터 등록2
--INSERT INTO CSM_SM_Req_Reg
--values (F_GET_NEXT_SEQ('CSM_SM_Req_Reg'),sysdate+1,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),null,'M100',null, sysdate+90,null);
----데이터 등록3
--INSERT INTO CSM_SM_Req_Reg
--values (F_GET_NEXT_SEQ('CSM_SM_Req_Reg'),sysdate+2,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),null,'M100',null, sysdate+90,null);
----데이터 등록4
--INSERT INTO CSM_SM_Req_Reg
--values (F_GET_NEXT_SEQ('CSM_SM_Req_Reg'),sysdate+3,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),null,'M100',null, sysdate+90,null);
----데이터 등록5
--INSERT INTO CSM_SM_Req_Reg
--values (F_GET_NEXT_SEQ('CSM_SM_Req_Reg'),sysdate+4,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),null,'M100',null, sysdate+90,null);
----데이터 등록6
--INSERT INTO CSM_SM_Req_Reg
--values (F_GET_NEXT_SEQ('CSM_SM_Req_Reg'),sysdate+5,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),null,'M100',null, sysdate+90,null);
----데이터 등록7
--INSERT INTO CSM_SM_Req_Reg
--values (F_GET_NEXT_SEQ('CSM_SM_Req_Reg'),sysdate+6,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),null,'M100',null, sysdate+90,null);
----데이터 등록8
--INSERT INTO CSM_SM_Req_Reg
--values (F_GET_NEXT_SEQ('CSM_SM_Req_Reg'),sysdate+7,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),null,'M100',null, sysdate+90,null);
----데이터 등록9
--INSERT INTO CSM_SM_Req_Reg
--values (F_GET_NEXT_SEQ('CSM_SM_Req_Reg'),sysdate+8,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),null,'M100',null, sysdate+90,null);
--SELECT * FROM CSM_SM_Req_Reg;
-----------------------------------------------------------------------------------
--출고처리 테이블 생성 
create table CSM_SM_Rel_Pro(
--출고 번호(PK)
releaseNum Varchar2(12) PRIMARY KEY,
--출고 일자
releaseDate Date not null,
--고객((FK)
General_Customer_Code Varchar2(12) not null,
--출고 구분
releaseOX Varchar2(10) not null,
--마감,
deadLine Varchar2(30) ,
--비고
note varchar2(1000),

--FK

--고객
CONSTRAINT FK_CSMSMRELREG_BUYER FOREIGN KEY (General_Customer_Code) 
REFERENCES SM_BIM_Gen_Cus_Reg(General_Customer_Code) ON DELETE CASCADE
);

EXECUTE P_RESET_SEQ('seq_SM_BIM_Gen_Cus_Reg_no');
 SELECT seq_CSM_SM_Rel_Pro_no.NEXTVAL FROM DUAL ; 
 SELECT seq_SM_BIM_Gen_Cus_Reg_no.NEXTVAL FROM DUAL ;

--데이터 등록
INSERT INTO CSM_SM_Rel_Pro
VALUES(F_GET_CURR_SEQ('CSM_SM_Rel_Pro'),sysdate+90,F_GET_CURR_SEQ('SM_BIM_Gen_Cus_Reg'),'건별',null,null);

--데이터 등록
INSERT INTO CSM_SM_Rel_Pro
VALUES(F_GET_NEXT_SEQ('CSM_SM_Rel_Pro'),sysdate+90,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'건별',null,null);

--데이터 등록
INSERT INTO CSM_SM_Rel_Pro
VALUES(F_GET_NEXT_SEQ('CSM_SM_Rel_Pro'),sysdate+90,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'건별',null,null);

--데이터 등록
INSERT INTO CSM_SM_Rel_Pro
VALUES(F_GET_NEXT_SEQ('CSM_SM_Rel_Pro'),sysdate+90,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'건별',null,null);

--데이터 등록
INSERT INTO CSM_SM_Rel_Pro
VALUES(F_GET_NEXT_SEQ('CSM_SM_Rel_Pro'),sysdate+90,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'건별',null,null);

--데이터 등록
INSERT INTO CSM_SM_Rel_Pro
VALUES(F_GET_NEXT_SEQ('CSM_SM_Rel_Pro'),sysdate+90,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'건별',null,null);

--데이터 등록
INSERT INTO CSM_SM_Rel_Pro
VALUES(F_GET_NEXT_SEQ('CSM_SM_Rel_Pro'),sysdate+90,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'건별',null,null);

--데이터 등록
INSERT INTO CSM_SM_Rel_Pro
VALUES(F_GET_NEXT_SEQ('CSM_SM_Rel_Pro'),sysdate+90,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'건별',null,null);

--데이터 등록
INSERT INTO CSM_SM_Rel_Pro
VALUES(F_GET_NEXT_SEQ('CSM_SM_Rel_Pro'),sysdate+90,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'건별',null,null);

SELECT * FROM CSM_SM_Rel_Pro;

------------------------------------------------------공통 주문 등록(common orders registration)

--테이블 생성
create table CSM_SM_COR_Reg(

No varchar2(12) primary key,
--코드(수주, 출고)
code varchar2(12) not null,
--품번(공통)(FK)
Item_Code varchar2(12) not null,
--품명(공통)(FK)
Item_Name varchar2(50) not null,
--규격
standard varchar2(20) DEFAULT NULL,
--단위
Inventory_Unit varchar2(5) DEFAULT 'EA',
--납기일(견적, 수주, 출고의뢰)
dueDate date not null,
--주문 수량(공통)
ordersQuantity Number(5) DEFAULT '0',
--단가(견적, 수주, 출고처리)
productPrice Number(15) DEFAULT '0',
--부가세단가(견적, 수주, 출고처리)
vatPrice Number(15) DEFAULT '0',
--출하예정일(수주)
expectedDate DATE not null,
--검사(의뢰, 수주)
inspection Varchar2(10) not null,
--출고구분(예외/주문)(출고처리)
orderOX varchar2(20) not null,
--고객
General_Customer_Code varchar2(12) not null,

--FK설정

--품목코드
CONSTRAINT FK_CSMSMCORREF_Item_Code FOREIGN KEY (Item_Code) 
REFERENCES SM_BIM_Ite_Reg(Item_Code) ON DELETE CASCADE,
--품목이름
CONSTRAINT FK_CSMSMCORREG_Item_Name FOREIGN KEY (Item_Name) 
REFERENCES SM_BIM_Ite_Reg(Item_Name) ON DELETE CASCADE


);


--데이터 등록
INSERT INTO CSM_SM_COR_Reg
VALUES ('1','SO2107000001','CPU05' , 'AMD 라이젠3 Pro' ,null,'EA',sysdate+1,100,1000000,100000,sysdate+1,'검사','주문출고', '00001');

--데이터 등록
INSERT INTO CSM_SM_COR_Reg
VALUES ('2','SO2107000002','CPU05' , 'AMD 라이젠3 Pro',null,'EA',sysdate+2,10,10000,1000,sysdate+2,'검사','주문출고', '00002');

--데이터 등록
INSERT INTO CSM_SM_COR_Reg
VALUES ('3','SO2107000003','RAM03' , '삼성 DDR4-3200',null,'EA',sysdate+3,40,800000,80000,sysdate+3,'검사','주문출고', '00003');

--데이터 등록
INSERT INTO CSM_SM_COR_Reg
VALUES ('3','SO2107000004','RAM03' , '삼성 DDR4-3200',null,'EA',sysdate+4,30,200000,20000,sysdate+4,'검사','주문출고', '00004');

--데이터 등록
INSERT INTO CSM_SM_COR_Reg
VALUES ('4','SO2107000005','POWER01' , '시소닉 A12 STD',null,'EA',sysdate+5,50,300000,30000,sysdate+5,'검사','주문출고', '00005');

--데이터 등록
INSERT INTO CSM_SM_COR_Reg
VALUES ('5','SO2107000006','SSD01' , '삼성전자 980 PRO',null,'EA',sysdate+6,80,400000,40000,sysdate+6,'검사','주문출고', '00006');

--데이터 등록
INSERT INTO CSM_SM_COR_Reg
VALUES ('6','SO2107000007','POWER01' , '시소닉 A12 STD',null,'EA',sysdate+7,80,700000,70000,sysdate+7,'검사','주문출고', '00007');

--데이터 등록
INSERT INTO CSM_SM_COR_Reg
VALUES ('7','SO2107000008','POWER01' , '시소닉 A12 STD',null,'EA',sysdate+8,80,700000,70000,sysdate+7,'검사','주문출고', '00008');

--데이터 등록
INSERT INTO CSM_SM_COR_Reg
VALUES ('8','SO2107000009','POWER01' , '시소닉 A12 STD',null,'EA',sysdate+9,80,700000,70000,sysdate+7,'검사','주문출고', '00009');

--데이터 등록
INSERT INTO CSM_SM_COR_Reg
VALUES ('9','SO2107000010','POWER01' , '시소닉 A12 STD',null,'EA',sysdate+9,80,700000,70000,sysdate+7,'검사','주문출고', '00009');


--데이터 등록
INSERT INTO CSM_SM_COR_Reg
VALUES ('10','IS2107000001','CPU05' , 'AMD 라이젠3 Pro' ,null,'EA',sysdate+1,100,1000000,100000,'20211102','검사','주문출고', '00001');

--데이터 등록
INSERT INTO CSM_SM_COR_Reg
VALUES ('11','IS2107000002', 'CPU05' , 'AMD 라이젠3 Pro',null,'EA',sysdate+2,10,10000,1000,'20210102','검사','주문출고', '00002');

--데이터 등록
INSERT INTO CSM_SM_COR_Reg
VALUES ('12','IS2107000003','RAM03' , '삼성 DDR4-3200',null,'EA',sysdate+3,40,800000,80000,'20210706','검사','주문출고', '00003');

--데이터 등록
INSERT INTO CSM_SM_COR_Reg
VALUES ('13','IS2107000004','RAM03' , '삼성 DDR4-3200',null,'EA',sysdate+4,30,200000,20000,sysdate+4,'검사','주문출고', '00004');

--데이터 등록
INSERT INTO CSM_SM_COR_Reg
VALUES ('14','IS2107000005','POWER01' , '시소닉 A12 STD',null,'EA',sysdate+5,50,300000,30000,sysdate+5,'검사','주문출고', '00005');

--데이터 등록
INSERT INTO CSM_SM_COR_Reg
VALUES ('15','IS2107000006', 'SSD01' , '삼성전자 980 PRO',null,'EA',sysdate+6,80,400000,40000,sysdate+6,'검사','주문출고', '00006');

--데이터 등록
INSERT INTO CSM_SM_COR_Reg
VALUES ('16','IS2107000007','POWER01' , '시소닉 A12 STD',null,'EA',sysdate+7,80,700000,70000,sysdate+7,'검사','주문출고', '00007');

--데이터 등록
INSERT INTO CSM_SM_COR_Reg
VALUES ('17','IS2107000008','POWER01' , '시소닉 A12 STD',null,'EA',sysdate+8,80,700000,70000,sysdate+7,'검사','주문출고', '00008');

--데이터 등록
INSERT INTO CSM_SM_COR_Reg
VALUES ('18','IS2107000009','POWER01' , '시소닉 A12 STD',null,'EA',sysdate+9,80,700000,70000,sysdate+7,'검사','주문출고', '00009');

--데이터 등록
INSERT INTO CSM_SM_COR_Reg
VALUES ('19','IS2107000010','POWER01' , '시소닉 A12 STD',null,'EA',sysdate+9,80,700000,70000,sysdate+7,'검사','주문출고', '00009');

---------------------------------------------------------------------------------------------------------------------
--주계획서작성(주문)
create table PMM_PM_MPS(
planNO varchar2(12) primary key,
plandate date ,--계획일
Item_Code varchar2(12) not null,--품번
Item_Name varchar2(50) not null,--품명
standard varchar2(20),--규격
Inventory_Unit varchar2(5) not null,--단위
sequence number(5),--순서
expectedDate date,--출하예정일
dueDate date,--납기일
plan_Quantity number(5),--계획수량
general_Customer_Name varchar2(20) not null, --회사명
note varchar2(1000) , --비고
constraint fk_PMMPMMPS_Item_Code foreign key (Item_Code) references SM_BIM_Ite_Reg(Item_Code) on delete cascade
);
EXECUTE P_RESET_SEQ('SEQ_seq');
SELECT SEQ_seq.NEXTVAL FROM DUAL ;
SELECT seq_PMM_PM_MPS_no.NEXTVAL FROM DUAL ;

INSERT INTO PMM_PM_MPS
VALUES(F_GET_CURR_SEQ('PMM_PM_MPS'),sysdate,'CPU05','AMD 라이젠3 Pro',NULL,'EA',F_GET_CURR_SEQ('SEQ'),'20211102','20211102',10,'(주)디비컴퓨터','이상없음');
INSERT INTO PMM_PM_MPS
VALUES(F_GET_NEXT_SEQ('PMM_PM_MPS'),sysdate+1,'RAM03','삼성 DDR4-3200',NULL,'EA',F_GET_NEXT_SEQ('SEQ'),'20210901','20210901',30,'더지글로직스','이상없음');
INSERT INTO PMM_PM_MPS
VALUES(F_GET_NEXT_SEQ('PMM_PM_MPS'),sysdate+2,'POWER01','시소닉 A12 STD',NULL,'EA',F_GET_NEXT_SEQ('SEQ'),'20210902','20210902',50,'(주)삼도전자','이상없음');
INSERT INTO PMM_PM_MPS
VALUES(F_GET_NEXT_SEQ('PMM_PM_MPS'),sysdate+3,'SSD01','삼성전자 980 PRO',NULL,'EA',F_GET_NEXT_SEQ('SEQ'),'20210202','20210202',80,'(주)삼도전자','이상없음');

SELECT * FROM PMM_PM_MPS;

--주계획서작성(주문계획)
create table PMM_PM_MPS_OS(
orderno varchar2(12) primary key,--주문번호
sequence number(5),--순서
ordersdate date,--주문일자
general_Customer_Name varchar2(50) not null,--회사명
Item_Code varchar2(12) not null,--품번
Item_Name varchar2(50) not null,--품명
standard varchar2(20),--규격
Inventory_Unit varchar2(5) not null,--단위
ordersQuantity number(5),--주문수량
expectedDate date,--출하예정일
note varchar2(1000) ,--비고
constraint fk_PMMPMMPSOS_Item_Code foreign key (Item_Code) references SM_BIM_Ite_Reg(Item_Code) on delete cascade
);

EXECUTE P_RESET_SEQ('SEQ_seq');
EXECUTE P_RESET_SEQ('seq_CSM_SM_Ord_Reg_no');
SELECT SEQ_seq.NEXTVAL FROM DUAL ;
SELECT seq_CSM_SM_Ord_Reg_no.NEXTVAL FROM DUAL ;

INSERT INTO PMM_PM_MPS_OS
VALUES(F_GET_NEXT_SEQ('PMM_PM_MPS_OS'),F_GET_NEXT_SEQ('SEQ'),sysdate,'(주)삼도전자','POWER01','시소닉 A12 STD',NULL,'EA',50.00,sysdate+1,'이상없음');
INSERT INTO PMM_PM_MPS_OS
VALUES(F_GET_NEXT_SEQ('PMM_PM_MPS_OS'),F_GET_NEXT_SEQ('SEQ'),sysdate,'더지글로직스','RAM03','삼성 DDR4-3200',NULL,'EA',30.00,sysdate,'이상없음');
INSERT INTO PMM_PM_MPS_OS
VALUES(F_GET_NEXT_SEQ('PMM_PM_MPS_OS'),F_GET_NEXT_SEQ('SEQ'),sysdate,'(주)디비컴퓨터','CPU05','AMD 라이젠3 Pro',NULL,'EA',10.00,sysdate+1,'이상없음');


----입고검사등록(리스트)
--create table PMM_PM_RIP_LIST(
--sequence number(5),--순서
--Item_Code varchar2(12) not null,   --품번
--Item_Name varchar2(50) not null,      --품명
--Standard varchar2(20) ,      --규격
--Inventory_Unit varchar2(5),   --단위
--check_Quantity number(5),--검사수량
--check_type varchar2(15) not null,--검사유형
--check_division varchar2(15) not null,--검사구분
--pass_Whether varchar2(10) not null,--합격여뷰
--pass number(5),--합격수량
--fail number(5),--불합격수량
--constraint fk_PMMPMRIPLIST_Item_Code foreign key (Item_Code) references SM_BIM_Ite_Reg(Item_Code) on delete cascade
--);
--
--EXECUTE P_RESET_SEQ('SEQ_seq');
--SELECT SEQ_seq.NEXTVAL FROM DUAL ;
--
--INSERT INTO PMM_PM_RIP_LIST
--VALUES(F_GET_CURR_SEQ('SEQ'),'SSD01','삼성전자 980 PRO',NULL,'EA',80,'외관검사','샘플검사','합격',80,0);
--INSERT INTO PMM_PM_RIP_LIST
--VALUES(F_GET_NEXT_SEQ('SEQ'),'POWER01','시소닉 A12 STD',NULL,'EA',50,'외관검사','샘플검사','합격',50,0);
--INSERT INTO PMM_PM_RIP_LIST
--VALUES(F_GET_NEXT_SEQ('SEQ'),'RAM03','삼성 DDR4-3200',NULL,'EA',30,'외관검사','샘플검사','합격',30,0);
--INSERT INTO PMM_PM_RIP_LIST
--VALUES(F_GET_NEXT_SEQ('SEQ'),'CPU05','AMD 라이젠3 Pro',NULL,'EA',10,'외관검사','샘플검사','합격',10,0);
--
--SELECT * FROM PMM_PM_RIP_LIST;

--발주,발주마감처리
create table PMM_PM_ORDER(
order_no varchar2(12)primary key,--발주번호
order_date date,--발주일자
code number(5),  --코드
general_Customer_Name varchar2(50) not null,--회사명
sequence number(5),--순서
Item_Code varchar2(12) not null,--품번   
Item_Name varchar2(50) not null,   --품명
Standard varchar2(20),   --규격
Inventory_Unit varchar2(5) DEFAULT 'EA',      --단위
Order_quantity number(5),--발주수량
Price number(15), --단가
deadline varchar2(10) not null,--마감
note varchar2(1000), --비고
constraint fk_PMMPMORDER_Item_Code foreign key (Item_Code) references SM_BIM_Ite_Reg(Item_Code) on delete cascade
);
EXECUTE P_RESET_SEQ('SEQ_seq');
SELECT SEQ_seq.NEXTVAL FROM DUAL ;
SELECT seq_PMM_PM_ORDER_no.NEXTVAL FROM DUAL ;

INSERT INTO PMM_PM_ORDER
VALUES(F_GET_CURR_SEQ('PMM_PM_ORDER'),sysdate,002,'(주)디비컴퓨터',F_GET_CURR_SEQ('SEQ'),'GPU01','지포스 RTX 3060',NULL,'EA',10,500000,'진행','이상없음');
INSERT INTO PMM_PM_ORDER
VALUES(F_GET_NEXT_SEQ('PMM_PM_ORDER'),sysdate+1,003,'더지글로직스',F_GET_NEXT_SEQ('SEQ'),'RAM03','삼성 DDR4-3200',NULL,'EA',30,100000,'진행','이상없음');
INSERT INTO PMM_PM_ORDER
VALUES(F_GET_NEXT_SEQ('PMM_PM_ORDER'),sysdate+2,004,'(주)삼도전자',F_GET_NEXT_SEQ('SEQ'),'SMPS03','IDF600CV-S24V2',NULL,'EA',50,400000,'진행','이상없음');
INSERT INTO PMM_PM_ORDER
VALUES(F_GET_NEXT_SEQ('PMM_PM_ORDER'),sysdate+3,005,'(주)삼도전자',F_GET_NEXT_SEQ('SEQ'),'SSD01','삼성전자 980 PRO',NULL,'EA',80,200000,'진행','이상없음');

SELECT * FROM PMM_PM_ORDER;

--소요량전개(주문,판매,생산)
create table PMM_PM_MRP(
Item_Code varchar2(12) not null,--품번
Item_Name varchar2(50) not null,--품명
standard varchar2(20),--규격
dueDate date,--소요일자
sequence number(5),--순서
expectedDate date,--예정발주일
Expected_Quantity number(5),--예정수량
Inventory_Unit varchar2(5)not null, --단위
constraint fk_PMMPMMRP_Item_Code foreign key (Item_Code) references SM_BIM_Ite_Reg(Item_Code) on delete cascade
);
EXECUTE P_RESET_SEQ('SEQ_seq');
SELECT SEQ_seq.NEXTVAL FROM DUAL ;
SELECT seq_PMM_PM_ORDER_no.NEXTVAL FROM DUAL ;

INSERT INTO PMM_PM_MRP
VALUES('CPU05','AMD 라이젠3 Pro',NULL,sysdate,F_GET_CURR_SEQ('SEQ'),sysdate,10,'EA');
INSERT INTO PMM_PM_MRP
VALUES('RAM03','삼성 DDR4-3200',NULL,sysdate+1,F_GET_NEXT_SEQ('SEQ'),sysdate+1,30,'EA');
INSERT INTO PMM_PM_MRP
VALUES('POWER01','시소닉 A12 STD',NULL,sysdate+2,F_GET_NEXT_SEQ('SEQ'),sysdate+2,50,'EA');
INSERT INTO PMM_PM_MRP
VALUES('SSD01','삼성전자 980 PRO',NULL,sysdate+3,F_GET_NEXT_SEQ('SEQ'),sysdate+3,80,'EA');

SELECT * FROM PMM_PM_MRP;

----3 청구등록
--create table PMM_PM_CM(
--sequence number(5),--순서,
--claim_no varchar2(12) PRIMARY KEY,--청구번호
--claim_date date,--청구일자
--claim_division varchar2(7)not null,--청구구분
--note varchar2(1000) not null--비고
--);
--
--EXECUTE P_RESET_SEQ('seq_PMM_PM_CM_no');
--SELECT seq_PMM_PM_CM_no.NEXTVAL FROM DUAL ;
--EXECUTE P_RESET_SEQ('SEQ_seq');
--SELECT SEQ_seq.NEXTVAL FROM DUAL ;
--
--INSERT INTO PMM_PM_CM
--VALUES(F_GET_CURR_SEQ('SEQ'),F_GET_CURR_SEQ('PMM_PM_CM'),'20210301','생산','이상없음');
--INSERT INTO PMM_PM_CM
--VALUES(F_GET_NEXT_SEQ('SEQ'),F_GET_NEXT_SEQ('PMM_PM_CM'),'20211101','구매','이상없음');
--INSERT INTO PMM_PM_CM
--VALUES(F_GET_NEXT_SEQ('SEQ'),F_GET_NEXT_SEQ('PMM_PM_CM'),'20210901','생산','이상없음');
--INSERT INTO PMM_PM_CM
--VALUES(F_GET_NEXT_SEQ('SEQ'),F_GET_NEXT_SEQ('PMM_PM_CM'),'20210902','구매','이상없음');
--INSERT INTO PMM_PM_CM
--VALUES(F_GET_NEXT_SEQ('SEQ'),F_GET_NEXT_SEQ('PMM_PM_CM'),'20210201','생산','이상없음');
--
--SELECT * FROM PMM_PM_CM;
--
----청구등록(리스트)
--create table PMM_PM_CM_LIST(
--sequence number(5),--순서
--Item_Code varchar2(12) not null,--품번
--Item_Name varchar2(50) not null,--품명
--standard varchar2(20),--규격
--requestdate date,--요청일
--Inventory_Unit varchar2(5)not null,--재고단위
--Inventory_qty number(5)not null,--재고단위수량
--claim_unit varchar2(5)not null,--청구단위
--claim_Quantity number(5),--청구단위수량
--Due_date date,--납기일
--receiving_date date,--입고예정일
--receiving_qty number(5),--의뢰수량
--inspection varchar2(10) not null,--검사
--constraint fk_PMMPMCMLIST_Item_Code foreign key (Item_Code) references SM_BIM_Ite_Reg(Item_Code) on delete cascade
--);
--
--EXECUTE P_RESET_SEQ('SEQ_seq');
--SELECT SEQ_seq.NEXTVAL FROM DUAL ;
--
--INSERT INTO PMM_PM_CM_LIST
--VALUES(F_GET_CURR_SEQ('SEQ'),'CPU05','AMD 라이젠3 Pro',NULL,'20211101','EA',10,'EA',10,'20211102','20211102',10,'검사');
--INSERT INTO PMM_PM_CM_LIST
--VALUES(F_GET_NEXT_SEQ('SEQ'),'RAM03','삼성 DDR4-3200',NULL,'20210901','EA',30,'EA',30,'20210901','20210901',30,'검사');
--INSERT INTO PMM_PM_CM_LIST
--VALUES(F_GET_NEXT_SEQ('SEQ'),'POWER01','시소닉 A12 STD',NULL,'20210902','EA',50,'EA',50,'20210902','20210902',50,'검사');
--INSERT INTO PMM_PM_CM_LIST
--VALUES(F_GET_NEXT_SEQ('SEQ'),'SSD01','삼성전자 980 PRO',NULL,'20210201','EA',80,'EA',80,'20210202','20210202',80,'검사');
--
--SELECT * FROM PMM_PM_CM_LIST;
--
----입고처리
--create table PMM_PM_RP(
--receiving_no varchar2(12)PRIMARY key,--입고번호
--receiving_date date,  --입고일자
--buyer varchar2(50) not null,--거래처
--deadline varchar2(7) not null,--마감
--note varchar2(1000) not null,--비고
--deadline_no varchar2(12) unique, --마감번호
--deadline_date date unique,--마감일자
--constraint fk_PMMPMRP_buyer foreign key (buyer) references SM_BIM_Gen_Cus_Reg(General_Customer_Name)on delete cascade
--);
--
--EXECUTE P_RESET_SEQ('seq_PMM_PM_RP_no');
--EXECUTE P_RESET_SEQ('seq_PMM_PM_RP_DEAD_no');
--SELECT seq_PMM_PM_RP_no.NEXTVAL FROM DUAL ;
--SELECT seq_PMM_PM_RP_DEAD_no.NEXTVAL FROM DUAL ;
--
--INSERT INTO PMM_PM_RP
--VALUES(F_GET_CURR_SEQ('PMM_PM_RP'),'20210902','(주)삼도전자','마감','이상없음',F_GET_CURR_SEQ('PMM_PM_RP_DEAD'),'20210902');
--INSERT INTO PMM_PM_RP
--VALUES(F_GET_NEXT_SEQ('PMM_PM_RP'),'20210306','(주)삼화INC','마감','이상없음',F_GET_NEXT_SEQ('PMM_PM_RP_DEAD'),'20210306');
--INSERT INTO PMM_PM_RP
--VALUES(F_GET_NEXT_SEQ('PMM_PM_RP'),'20211102','(주)디비컴퓨터','마감','이상없음',F_GET_NEXT_SEQ('PMM_PM_RP_DEAD'),'20211102');
--INSERT INTO PMM_PM_RP
--VALUES(F_GET_NEXT_SEQ('PMM_PM_RP'),'20210901','더지글로직스','마감','이상없음',F_GET_NEXT_SEQ('PMM_PM_RP_DEAD'),'20210901');
--INSERT INTO PMM_PM_RP
--VALUES(F_GET_NEXT_SEQ('PMM_PM_RP'),'20210202','(주)삼도전자','마감','이상없음',F_GET_NEXT_SEQ('PMM_PM_RP_DEAD'),'20210202');
--
--SELECT * FROM PMM_PM_RP;
--
----입고처리(리스트)
--create table PMM_PM_RP_LIST(
--sequence number(5),--순서
--Item_Code varchar2(12) not null, --품번   
--Item_Name varchar2(50) not null,   --품명   
--Standard varchar2(20),--규격
--order_Quantity number(5),--발주수량
--Inventory_Unit varchar2(5)not null,--단위
--product_price Number(15),--단가
--Due_date date,--납기일
--receiving_date date,--입고예정일
--inspection varchar2(10) not null,--검사
--deadline_qty number(5),--마감수량
--constraint fk_PMMPMRPLIST_Item_Code foreign key (Item_Code) references SM_BIM_Ite_Reg(Item_Code) on delete cascade
--);
--
--EXECUTE P_RESET_SEQ('SEQ_seq');
--SELECT SEQ_seq.NEXTVAL FROM DUAL ;
--
--INSERT INTO PMM_PM_RP_LIST
--VALUES(F_GET_CURR_SEQ('SEQ'),'CPU05','AMD 라이젠3 Pro',NULL,10,'EA',1000000.00,'20211102','20211102','검사',10);
--INSERT INTO PMM_PM_RP_LIST
--VALUES(F_GET_NEXT_SEQ('SEQ'),'RAM03','삼성 DDR4-3200',NULL,30,'EA',800000.00,'20210901','20210901','검사',30);
--INSERT INTO PMM_PM_RP_LIST
--VALUES(F_GET_NEXT_SEQ('SEQ'),'POWER01','시소닉 A12 STD',NULL,50,'EA',300000.00,'20210902','20210902','검사',50);
--INSERT INTO PMM_PM_RP_LIST
--VALUES(F_GET_NEXT_SEQ('SEQ'),'SSD01','삼성전자 980 PRO',NULL,80,'EA',400000.00,'20210202','20210202','검사',80);
--
--
--
----입고의뢰등록
--create table PMM_PM_RRR(
--request_no varchar2(12) primary key,--의뢰번호
--request_date date unique,--의뢰일자
--buyer varchar2(50)not null,--회사명
--request_house varchar2(15)not null,--의뢰창고
--note varchar2(1000) not null,--비고
--check_no varchar2(12) unique,--검사번호
--check_date date unique,--검사일자
--receiving_house varchar2(15) not null,--입고창고
--constraint fk_PMMPMRRR_buyer foreign key (buyer) references SM_BIM_Gen_Cus_Reg(General_Customer_Name) on delete cascade,
--constraint fk_PMMPMRRR_request_house foreign key (request_house) references SM_BIM_Hou_Reg(House_Name) on delete cascade,
--constraint fk_PMMPMRRR_receiving_house foreign key (receiving_house) references SM_BIM_Hou_Reg(House_Name) on delete cascade
--);
--
--EXECUTE P_RESET_SEQ('seq_PMM_PM_RRR_no');
--EXECUTE P_RESET_SEQ('seq_PMM_PM_RRR_CHECK_no');
--SELECT seq_PMM_PM_RRR_no.NEXTVAL FROM DUAL ;
--SELECT seq_PMM_PM_RRR_CHECK_no.NEXTVAL FROM DUAL ;

--INSERT INTO PMM_PM_RRR
--VALUES(F_GET_CURR_SEQ('PMM_PM_RRR'),'20210306','(주)삼화INC','제품창고','이상없음',F_GET_CURR_SEQ('PMM_PM_RRR_CHECK'),'20210306','부품창고');
--INSERT INTO PMM_PM_RRR
--VALUES(F_GET_NEXT_SEQ('PMM_PM_RRR'),'20211102','(주)디비컴퓨터','제품창고','이상없음',F_GET_NEXT_SEQ('PMM_PM_RRR_CHECK'),'20211102','부품창고');
--INSERT INTO PMM_PM_RRR
--VALUES(F_GET_NEXT_SEQ('PMM_PM_RRR'),'20210901','더지글로직스','제품창고','이상없음',F_GET_NEXT_SEQ('PMM_PM_RRR_CHECK'),'20210901','부품창고');
--INSERT INTO PMM_PM_RRR
--VALUES(F_GET_NEXT_SEQ('PMM_PM_RRR'),'20210902','(주)삼도전자','제품창고','이상없음',F_GET_NEXT_SEQ('PMM_PM_RRR_CHECK'),'20210902','부품창고');
----INSERT INTO PMM_PM_RRR
----VALUES(F_GET_NEXT_SEQ('PMM_PM_RRR'),'20200202','(주)삼도전자','제품창고','이상없음',F_GET_NEXT_SEQ('PMM_PM_RRR_CHECK')),'20200202','부품창고');
--
--SELECT * FROM PMM_PM_RRR;





----------------------------------------------------------------------------------------------------------------------------------------------------
--생산관리 테이블


--생산관리공통- 기초정보관리
--BOM등록 --필요수량 삭제 필요수량 = 정미수량 * LOSS  -- 표준원가 삭제
------------------------정우준 수정 start, 외주작업장 등록에 공정코드 추가 ------------------------------
create table CPM_BIM_BOM_Reg(
    --순번(PK)
    NO number(4) PRIMARY KEY,
    --모품목 품번(FK)
    Parent_Item_Code varchar2(12) NOT NULL,
    --품번(FK)
    Item_Code varchar2(12) NOT NULL, 
    --품명(FK)
    Item_Name varchar2(50) NOT NULL,
    --규격
    Standard varchar2(20), 
    --재고단위
    Inventory_Unit varchar2(5) DEFAULT 'EA',
    --정미수량
    precisionQuantity number(5) not null,
    --LOSS
    LOSS number(5) not null,

    --완제품/반제품 구분 컬럼
    division varchar2(100),
  
    CONSTRAINT CPMBIMBOMREG_ParentItemCode_FK FOREIGN KEY(Parent_Item_Code) REFERENCES SM_BIM_Ite_Reg(Item_Code)on delete cascade,
    CONSTRAINT CPMBIMBOMREG_ItenCode_FK FOREIGN KEY(Item_Code) REFERENCES SM_BIM_Ite_Reg(Item_Code)on delete cascade
);
create table CPM_BIM_OUT_PRI(
    Outsourcing_Code varchar(12),
    Outcustomer varchar2(12) not null,--외주거래처 코드
    Item_Code varchar2(12) not null, 
    --외주단가
    outsourcingUnitPrice number(15),
    --시작일자
    startDate date default sysdate,
    --종료일자
    endDate date default sysdate
);

insert into CPM_BIM_OUT_PRI
values('P100','P101','PCSET01',409000,'20180101','20201231');
--생산관리공통- 기초정보관리 데이터

SELECT * FROM CPM_BIM_BOM_Reg;
EXECUTE P_RESET_SEQ('SEQ_CPM_BIM_BOM_Reg_NO');
select SEQ_CPM_BIM_BOM_Reg_NO.NEXTVAL from dual;
--BOM등록 데이터
--pc 완제품
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_CURR_SEQ('CPM_BIM_BOM_Reg'),'PCSET01','MT01','27inch모니터',NULL,'EA' ,300,0,'제품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'PCSET01','DT01','피카소VEGA8',NULL,'EA',300,0,'제품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'PCSET02','MT02','32inch모니터',NULL,'EA',300,0,'제품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'PCSET02','DT02','프리플로우ELITE',NULL,'EA' ,300,0,'제품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'PCSET03','MT03','43inch모니터',NULL,'EA',300,0,'제품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'PCSET03','DT03','게이밍본체PC',NULL,'EA',300,0,'제품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'PCSET04','MT03','43inch모니터',NULL,'EA',300,0,'제품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'PCSET04','DT04','EXKOREA',NULL,'EA',300,0,'제품');

--본체 반제품
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT01','CASE01','슬림형본체',NULL,'EA',300,0,'반제품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT01','SSD01' , '삼성전자 980 PRO',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT01','GPU01' , '지포스 RTX 3060',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT01', 'CPU01' , 'AMD 라이젠5',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT01','RAM01' , 'ADATA XPG DDR4-3200',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT01','BOARD01' , '박격포 MAG B560M',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT01','POWER01' , '시소닉 A12 STD',NULL,'EA',300,0,'부품');

INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT02','CASE01','슬림형본체',NULL,'EA',300,0,'반제품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT02','SSD02' , '삼성전자 970 EVO',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT02','GPU02' , '지포스 RTX 3070',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT02','CPU02' , 'core I5-10세대',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT02','RAM02' , 'KLEVV DDR4-3200',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT02','BOARD02' , 'ASRock B550M',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT02','POWER01' , '시소닉 A12 STD' ,NULL,'EA',300,0,'부품');

INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT03','CASE03' , 'ABKO NCORE',NULL,'EA',300,0,'반제품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT03','HDD01' , 'WD BLUE 7200' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT03','GPU03' , '지포스 RTX 2060' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT03','CPU03' , 'core I5-11세대' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT03','RAM02' , 'KLEVV DDR4-3200' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT03','BOARD03' , 'GIGABYTE A320M',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT03','POWER02' , 'ASUS POG Thor 850P' ,NULL,'EA',300,0,'부품');

INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT04','CASE03' , 'ABKO NCORE',NULL,'EA',300,0,'반제품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT04','HDD02' , 'Seagate BarraCuda 7200' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT04','GPU04' , '지포스 GTX1050 Ti',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT04','CPU04' , 'core I7-11세대',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT04','RAM03' , '삼성 DDR4-3200' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT04','BOARD03' , 'GIGABYTE A320M',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT04','POWER03' , '마이크로닉 Classic 2' ,NULL,'EA',300,0,'부품');

--모니터 반제품
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT01','ADBOARD01' , '정면소켓형 AD 보드'  ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT01','INVERTER01' , 'FIF1742-01A' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT01','SMPS01' , 'IDF060CV-S24V1',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT01','LIPSBOARD01' , 'LI01' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT01','BL01' , '32MB25VQ' ,NULL,'EA',300,0,'부품');

INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT02','ADBOARD01' , '정면소켓형 AD 보드'  ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT02','ADBOARD02' , '초소형 AD 보드' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT02','INVERTER02' , 'TWT-122K' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT02','SMPS02' , 'IDF100CV-S24V1' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT02','LIPSBOARD02' , 'LI10' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT02','BL02' , '32LF550B'  ,NULL,'EA',300,0,'부품');

INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT03','ADBOARD03' , '2232GW AD 보드' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT03','INVERTER03' , 'DS-1307WK' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT03','SMPS03' , 'IDF600CV-S24V2' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT03','LIPSBOARD03' , 'LL01'  ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT03','ADBOARD03' , '2232GW AD 보드' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT03','BL03' , 'L32LX530H' ,NULL,'EA',300,0,'부품');


select * from CPM_BIM_BOM_Reg;

--불량유형등록
create table CPM_BIM_Def_Typ_Reg(
    --불량코드(PK)
    DefectCode varchar2(12) PRIMARY KEY,
    --불량유형명
    DefectiveTypeName varchar2(50) not null,
    --불량군코드
    DefectiveItemGroupCode varchar2(20),
    --불량군
    DefectiveItemGroup varchar2(20),
    --사용여부
    UsageStatus varchar2(20) not null,
     --불량설명
    DefectiveDescription varchar2(1000)  
    
);

create table CPM_BIM_DEF_GROUP(
    DefectiveTypeName varchar2(50) not null,
    DefectiveItemGroupCode varchar2(20)
);

insert into CPM_BIM_DEF_GROUP
values('100','조립불량');
insert into CPM_BIM_DEF_GROUP
values('200','부품불량');
--불량유형등록 데이터
INSERT INTO CPM_BIM_Def_Typ_Reg
VALUES ('A01','램 불량','100','조립불량', '사용',null);
INSERT INTO CPM_BIM_Def_Typ_Reg
VALUES ('A02','CPU 불량','200','부품불량', '사용',null);
INSERT INTO CPM_BIM_Def_Typ_Reg
VALUES ('A03','메인보드 불량','100','조립불량', '사용',null);
INSERT INTO CPM_BIM_Def_Typ_Reg
VALUES ('A04','파워 불량','200','부품불량', '사용',null);
INSERT INTO CPM_BIM_Def_Typ_Reg
VALUES ('A05','SSD 불량','100','조립불량', '사용',null);

------------------------정우준 수정 end---------------------------
-------------------------------------------------------------------------------------

--생산계획등록
create table CPM_PM_Pro_Pla_Reg(
    --생산계획번호(PK)
    ProductionPlanCode varchar2(12) PRIMARY KEY,
    --품번(FK)
    Item_Code varchar2(12) NOT NULL, 
    --품명(FK)
    Item_Name varchar2(50) NOT NULL,
    --규격
    Standard varchar2(20), 
    --재고단위
    Inventory_Unit varchar2(5) DEFAULT 'EA',
    --일 생산량
    dailyProduction number(5) not null,
    --순서
    sequence number(5),
    --작업예정일
    scheduledDateOfOperation date,
    --수량
    Quantity number(5),
    --비고
    note varchar2(1000),
    --생산/작업/외주 구분
    productionDivision varchar2(10) DEFAULT '생산',
    CONSTRAINT CPMPMPROPLAREG_Item_Code_FK FOREIGN KEY(Item_Code) REFERENCES SM_BIM_Ite_Reg(Item_Code)on delete cascade
);

--생산/작업/외주 구분해서 작업지시/외주발주 등록 후 생산계획 등록을 변경하려고 하면 실행 안되게 막는 트리거
create or replace trigger trg_operation_nodml1
after update of dailyProduction,scheduledDateOfOperation,Quantity or delete 
on CPM_PM_Pro_Pla_Reg
for each row
begin
    if(:new.productionDivision = '작업' or :new.productionDivision = '외주') then
    raise_application_error(-20001,'작업지시등록/외주발주등록된 데이터는 변경불가.');
    end if;
end;
/

EXECUTE P_RESET_SEQ('SEQ_CPM_PM_Pro_Pla_Reg_NO');
EXECUTE P_RESET_SEQ('SEQ_seq');
SELECT seq_CPM_PM_Pro_Pla_Reg_no.currVAL FROM DUAL ;
SELECT seq_CPM_PM_Pro_Pla_Reg_no.NEXTVAL FROM DUAL ;
SELECT SEQ_seq.NEXTVAL FROM DUAL ;

--생산계획등록 데이터(생산품목)
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_CURR_SEQ('CPM_PM_Pro_Pla_Reg'),'DT01','피카소VEGA8',NULL,'EA',100,F_GET_CURR_SEQ('SEQ'),sysdate,100,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'DT01','피카소VEGA8',NULL,'EA',100,F_GET_NEXT_SEQ('SEQ'),sysdate+1,110,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'DT01','피카소VEGA8',NULL,'EA',100,F_GET_NEXT_SEQ('SEQ'),sysdate+2,80,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'DT01','피카소VEGA8',NULL,'EA',100,F_GET_NEXT_SEQ('SEQ'),sysdate+3,80,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');


INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'DT02','프리플로우ELITE',NULL,'EA',200,F_GET_NEXT_SEQ('SEQ'),sysdate,200,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'DT02','프리플로우ELITE',NULL,'EA',200,F_GET_NEXT_SEQ('SEQ'),sysdate+1,210,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'DT02','프리플로우ELITE',NULL,'EA',200,F_GET_NEXT_SEQ('SEQ'),sysdate+2,280,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'DT02','프리플로우ELITE',NULL,'EA',200,F_GET_NEXT_SEQ('SEQ'),sysdate+2,280,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'DT03','게이밍본체PC',NULL,'EA',300,F_GET_NEXT_SEQ('SEQ'),sysdate,300,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'DT03','게이밍본체PC',NULL,'EA',300,F_GET_NEXT_SEQ('SEQ'),sysdate+1,310,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'DT03','게이밍본체PC',NULL,'EA',300,F_GET_NEXT_SEQ('SEQ'),sysdate+2,280,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'DT03','게이밍본체PC',NULL,'EA',300,F_GET_NEXT_SEQ('SEQ'),sysdate+2,280,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'DT04','EXKOREA',NULL,'EA',400,F_GET_NEXT_SEQ('SEQ'),sysdate,400,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'DT04','EXKOREA',NULL,'EA',400,F_GET_NEXT_SEQ('SEQ'),sysdate+1,410,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'DT04','EXKOREA',NULL,'EA',400,F_GET_NEXT_SEQ('SEQ'),sysdate+2,450,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'DT04','EXKOREA',NULL,'EA',400,F_GET_NEXT_SEQ('SEQ'),sysdate+2,450,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'MT01','27inch모니터',NULL,'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'MT01','27inch모니터',NULL,'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate+1,510,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'MT01','27inch모니터',NULL,'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate+2,480,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'MT01','27inch모니터',NULL,'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate+2,480,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'MT02','32inch모니터',NULL,'EA',600,F_GET_NEXT_SEQ('SEQ'),sysdate,600,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'MT02','32inch모니터',NULL,'EA',600,F_GET_NEXT_SEQ('SEQ'),sysdate+1,610,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'MT02','32inch모니터',NULL,'EA',600,F_GET_NEXT_SEQ('SEQ'),sysdate+2,580,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'MT02','32inch모니터',NULL,'EA',600,F_GET_NEXT_SEQ('SEQ'),sysdate+2,580,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'MT03','43inch모니터',NULL,'EA',700,F_GET_NEXT_SEQ('SEQ'),sysdate,700,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'MT03','43inch모니터',NULL,'EA',700,F_GET_NEXT_SEQ('SEQ'),sysdate+1,710,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'MT03','43inch모니터',NULL,'EA',700,F_GET_NEXT_SEQ('SEQ'),sysdate+2,650,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'MT03','43inch모니터',NULL,'EA',700,F_GET_NEXT_SEQ('SEQ'),sysdate+2,650,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'PCSET01','사무용컴퓨터',NULL,'EA',800,F_GET_NEXT_SEQ('SEQ'),sysdate,800,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'PCSET01','사무용컴퓨터',NULL,'EA',800,F_GET_NEXT_SEQ('SEQ'),sysdate+1,810,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'PCSET01','사무용컴퓨터',NULL,'EA',800,F_GET_NEXT_SEQ('SEQ'),sysdate+2,780,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'PCSET01','사무용컴퓨터',NULL,'EA',800,F_GET_NEXT_SEQ('SEQ'),sysdate+2,780,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'PCSET02','게이밍컴퓨터',NULL,'EA',900,F_GET_NEXT_SEQ('SEQ'),sysdate,900,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'PCSET02','게이밍컴퓨터',NULL,'EA',900,F_GET_NEXT_SEQ('SEQ'),sysdate+1,910,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'PCSET02','게이밍컴퓨터',NULL,'EA',900,F_GET_NEXT_SEQ('SEQ'),sysdate+2,880,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'PCSET02','게이밍컴퓨터',NULL,'EA',900,F_GET_NEXT_SEQ('SEQ'),sysdate+2,880,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'PCSET03','저사양컴퓨터',NULL,'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'PCSET03','저사양컴퓨터',NULL,'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate+1,1010,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'PCSET03','저사양컴퓨터',NULL,'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate+2,980,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'PCSET03','저사양컴퓨터',NULL,'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate+2,980,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'PCSET04','최고급컴퓨터',NULL,'EA',1100,F_GET_NEXT_SEQ('SEQ'),sysdate,1100,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'PCSET04','최고급컴퓨터',NULL,'EA',1100,F_GET_NEXT_SEQ('SEQ'),sysdate+1,1110,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'PCSET04','최고급컴퓨터',NULL,'EA',1100,F_GET_NEXT_SEQ('SEQ'),sysdate+2,1080,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'PCSET04','최고급컴퓨터',NULL,'EA',1100,F_GET_NEXT_SEQ('SEQ'),sysdate+2,1080,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');


INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CASE01','슬림형본체',NULL,'EA',300,F_GET_NEXT_SEQ('SEQ'),sysdate,300,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CASE01','슬림형본체',NULL,'EA',300,F_GET_NEXT_SEQ('SEQ'),sysdate+1,310,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CASE01','슬림형본체',NULL,'EA',300,F_GET_NEXT_SEQ('SEQ'),sysdate+2,280,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CASE01','슬림형본체',NULL,'EA',300,F_GET_NEXT_SEQ('SEQ'),sysdate+2,280,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CASE03' , 'ABKO NCORE' , NULL , 'EA',100,F_GET_NEXT_SEQ('SEQ'),sysdate,100,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CASE03' , 'ABKO NCORE' , NULL , 'EA',100,F_GET_NEXT_SEQ('SEQ'),sysdate,100,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CASE03' , 'ABKO NCORE' , NULL , 'EA',100,F_GET_NEXT_SEQ('SEQ'),sysdate,100,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CASE03' , 'ABKO NCORE' , NULL , 'EA',100,F_GET_NEXT_SEQ('SEQ'),sysdate,100,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'HDD01' , 'WD BLUE 7200' , NULL , 'EA',1100,F_GET_NEXT_SEQ('SEQ'),sysdate,1100,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'HDD01' , 'WD BLUE 7200' , NULL , 'EA',1100,F_GET_NEXT_SEQ('SEQ'),sysdate,1100,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'HDD01' , 'WD BLUE 7200' , NULL , 'EA',1100,F_GET_NEXT_SEQ('SEQ'),sysdate,1100,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'HDD01' , 'WD BLUE 7200' , NULL , 'EA',1100,F_GET_NEXT_SEQ('SEQ'),sysdate,1100,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'HDD02' , 'Seagate BarraCuda 7200' , NULL , 'EA',700,F_GET_NEXT_SEQ('SEQ'),sysdate,700,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'HDD02' , 'Seagate BarraCuda 7200' , NULL , 'EA',700,F_GET_NEXT_SEQ('SEQ'),sysdate,700,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'HDD02' , 'Seagate BarraCuda 7200' , NULL , 'EA',700,F_GET_NEXT_SEQ('SEQ'),sysdate,700,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'HDD02' , 'Seagate BarraCuda 7200' , NULL , 'EA',700,F_GET_NEXT_SEQ('SEQ'),sysdate,700,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'SSD01' , '삼성전자 980 PRO'  , NULL , 'EA',200,F_GET_NEXT_SEQ('SEQ'),sysdate,200,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'SSD01' , '삼성전자 980 PRO'  , NULL , 'EA',200,F_GET_NEXT_SEQ('SEQ'),sysdate,200,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'SSD01' , '삼성전자 980 PRO'  , NULL , 'EA',200,F_GET_NEXT_SEQ('SEQ'),sysdate,200,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'SSD01' , '삼성전자 980 PRO'  , NULL , 'EA',200,F_GET_NEXT_SEQ('SEQ'),sysdate,200,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'), 'SSD02' , '삼성전자 970 EVO' , NULL , 'EA',400,F_GET_NEXT_SEQ('SEQ'),sysdate,400,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'), 'SSD02' , '삼성전자 970 EVO' , NULL , 'EA',400,F_GET_NEXT_SEQ('SEQ'),sysdate,400,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'), 'SSD02' , '삼성전자 970 EVO' , NULL , 'EA',400,F_GET_NEXT_SEQ('SEQ'),sysdate,400,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'), 'SSD02' , '삼성전자 970 EVO' , NULL , 'EA',400,F_GET_NEXT_SEQ('SEQ'),sysdate,400,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'SSD03' , '삼성전자 870 EVO' , NULL , 'EA',800,F_GET_NEXT_SEQ('SEQ'),sysdate,800,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'SSD03' , '삼성전자 870 EVO' , NULL , 'EA',800,F_GET_NEXT_SEQ('SEQ'),sysdate,800,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'SSD03' , '삼성전자 870 EVO' , NULL , 'EA',800,F_GET_NEXT_SEQ('SEQ'),sysdate,800,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'SSD03' , '삼성전자 870 EVO' , NULL , 'EA',800,F_GET_NEXT_SEQ('SEQ'),sysdate,800,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU01' , '지포스 RTX 3060' , NULL , 'EA',900,F_GET_NEXT_SEQ('SEQ'),sysdate,900,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU01' , '지포스 RTX 3060' , NULL , 'EA',900,F_GET_NEXT_SEQ('SEQ'),sysdate,900,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU01' , '지포스 RTX 3060' , NULL , 'EA',900,F_GET_NEXT_SEQ('SEQ'),sysdate,900,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU01' , '지포스 RTX 3060' , NULL , 'EA',900,F_GET_NEXT_SEQ('SEQ'),sysdate,900,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU02' , '지포스 RTX 3070' , NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU02' , '지포스 RTX 3070' , NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU02' , '지포스 RTX 3070' , NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU02' , '지포스 RTX 3070' , NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU03' , '지포스 RTX 2060' , NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1100,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU03' , '지포스 RTX 2060' , NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1100,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU03' , '지포스 RTX 2060' , NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1100,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU03' , '지포스 RTX 2060' , NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1100,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU04' , '지포스 GTX1050 Ti' , NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU04' , '지포스 GTX1050 Ti' , NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU04' , '지포스 GTX1050 Ti' , NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU04' , '지포스 GTX1050 Ti' , NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU05' , '갤럭시 GT1030' , NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,900,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU05' , '갤럭시 GT1030' , NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,900,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU05' , '갤럭시 GT1030' , NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,900,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU05' , '갤럭시 GT1030' , NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,900,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CPU01' , 'AMD 라이젠5', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CPU01' , 'AMD 라이젠5', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CPU01' , 'AMD 라이젠5', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CPU01' , 'AMD 라이젠5', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CPU02' , 'core I5-10세대', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,800,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CPU02' , 'core I5-10세대', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,800,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CPU02' , 'core I5-10세대', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,800,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CPU02' , 'core I5-10세대', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,800,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CPU03' , 'core I5-11세대', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,900,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CPU03' , 'core I5-11세대', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,900,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CPU03' , 'core I5-11세대', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,900,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CPU03' , 'core I5-11세대', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,900,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CPU04' , 'core I7-11세대', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,600,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CPU04' , 'core I7-11세대', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,600,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CPU04' , 'core I7-11세대', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,600,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CPU04' , 'core I7-11세대', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,600,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CPU05' , 'AMD 라이젠3 Pro', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,400,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CPU05' , 'AMD 라이젠3 Pro', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,400,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CPU05' , 'AMD 라이젠3 Pro', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,400,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'CPU05' , 'AMD 라이젠3 Pro', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,400,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'RAM01' , 'ADATA XPG DDR4-3200', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'RAM01' , 'ADATA XPG DDR4-3200', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'RAM01' , 'ADATA XPG DDR4-3200', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'RAM01' , 'ADATA XPG DDR4-3200', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'RAM02' , 'KLEVV DDR4-3200', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'RAM02' , 'KLEVV DDR4-3200', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'RAM02' , 'KLEVV DDR4-3200', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'RAM02' , 'KLEVV DDR4-3200', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'RAM03' , '삼성 DDR4-3200', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'RAM03' , '삼성 DDR4-3200', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'RAM03' , '삼성 DDR4-3200', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'RAM03' , '삼성 DDR4-3200', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'BOARD01' , '박격포 MAG B560M', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1100,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'BOARD01' , '박격포 MAG B560M', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1100,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'BOARD01' , '박격포 MAG B560M', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1100,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'BOARD01' , '박격포 MAG B560M', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1100,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'BOARD02' , 'ASRock B550M', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'BOARD02' , 'ASRock B550M', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'BOARD02' , 'ASRock B550M', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'BOARD02' , 'ASRock B550M', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'BOARD03' , 'GIGABYTE A320M', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'BOARD03' , 'GIGABYTE A320M', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'BOARD03' , 'GIGABYTE A320M', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'BOARD03' , 'GIGABYTE A320M', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'POWER01' , '시소닉 A12 STD', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'POWER01' , '시소닉 A12 STD', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'POWER01' , '시소닉 A12 STD', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'POWER01' , '시소닉 A12 STD', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'POWER02' , 'ASUS POG Thor 850P', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'POWER02' , 'ASUS POG Thor 850P', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'POWER02' , 'ASUS POG Thor 850P', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'POWER02' , 'ASUS POG Thor 850P', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'POWER03' , '마이크로닉 Classic 2', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'POWER03' , '마이크로닉 Classic 2', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'POWER03' , '마이크로닉 Classic 2', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'POWER03' , '마이크로닉 Classic 2', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');


-------------------------------------------------------------------------------------------------------
--외주품목
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'ADBOARD01' , '정면소켓형 AD 보드' , NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'ADBOARD01' , '정면소켓형 AD 보드' , NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'ADBOARD01' , '정면소켓형 AD 보드' , NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'ADBOARD01' , '정면소켓형 AD 보드' , NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'ADBOARD02' , '초소형 AD 보드' , NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'ADBOARD02' , '초소형 AD 보드' , NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'ADBOARD02' , '초소형 AD 보드' , NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'ADBOARD02' , '초소형 AD 보드' , NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'ADBOARD03' , '2232GW AD 보드', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'ADBOARD03' , '2232GW AD 보드', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'ADBOARD03' , '2232GW AD 보드', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'ADBOARD03' , '2232GW AD 보드', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'INVERTER01' , 'FIF1742-01A', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'INVERTER01' , 'FIF1742-01A', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'INVERTER01' , 'FIF1742-01A', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'INVERTER01' , 'FIF1742-01A', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'INVERTER02' , 'TWT-122K', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'INVERTER02' , 'TWT-122K', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'INVERTER02' , 'TWT-122K', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'INVERTER02' , 'TWT-122K', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'INVERTER03' , 'DS-1307WK', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'INVERTER03' , 'DS-1307WK', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'INVERTER03' , 'DS-1307WK', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'INVERTER03' , 'DS-1307WK', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'), 'SMPS01' , 'IDF060CV-S24V1', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'), 'SMPS01' , 'IDF060CV-S24V1', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'), 'SMPS01' , 'IDF060CV-S24V1', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'), 'SMPS01' , 'IDF060CV-S24V1', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'SMPS02' , 'IDF100CV-S24V1', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'SMPS02' , 'IDF100CV-S24V1', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'SMPS02' , 'IDF100CV-S24V1', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'SMPS02' , 'IDF100CV-S24V1', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'SMPS03' , 'IDF600CV-S24V2', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'SMPS03' , 'IDF600CV-S24V2', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'SMPS03' , 'IDF600CV-S24V2', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'SMPS03' , 'IDF600CV-S24V2', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'LIPSBOARD01' , 'LI01', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'LIPSBOARD01' , 'LI01', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'LIPSBOARD01' , 'LI01', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'LIPSBOARD01' , 'LI01', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'LIPSBOARD02' , 'LI10', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'LIPSBOARD02' , 'LI10', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'LIPSBOARD02' , 'LI10', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'LIPSBOARD02' , 'LI10', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'LIPSBOARD03' , 'LL01', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'LIPSBOARD03' , 'LL01', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'LIPSBOARD03' , 'LL01', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'LIPSBOARD03' , 'LL01', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU03' , '지포스 RTX 2060' , NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU03' , '지포스 RTX 2060' , NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU03' , '지포스 RTX 2060' , NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU03' , '지포스 RTX 2060' , NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU03' , '지포스 RTX 2060' , NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU03' , '지포스 RTX 2060' , NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU03' , '지포스 RTX 2060' , NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'GPU03' , '지포스 RTX 2060' , NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'), 'BL01' , '32MB25VQ', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'), 'BL01' , '32MB25VQ', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'), 'BL01' , '32MB25VQ', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'), 'BL01' , '32MB25VQ', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'BL02' , '32LF550B', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'BL02' , '32LF550B', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'BL02' , '32LF550B', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'BL02' , '32LF550B', NULL , 'EA',1000,F_GET_NEXT_SEQ('SEQ'),sysdate,1000,null,'생산');
EXECUTE P_RESET_SEQ('SEQ_seq');

INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'BL03' , 'L32LX530H', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'BL03' , 'L32LX530H', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'BL03' , 'L32LX530H', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
INSERT INTO CPM_PM_Pro_Pla_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'BL03' , 'L32LX530H', NULL , 'EA',500,F_GET_NEXT_SEQ('SEQ'),sysdate,500,null,'생산');
--EXECUTE P_RESET_SEQ('SEQ_seq');

SELECT * FROM CPM_PM_Pro_Pla_Reg;



--작업실적등록
create table CPM_PM_Ope_Per_Reg(
    --작업지시번호(PK)
    workOrderNumber varchar2(12) PRIMARY KEY,
    --자재출고상태
    MaterialForwardingStatus varchar2(20) not null,
    --작업장(FK)
    Workplace_Code varchar2(12) not null,
    --지시일
    instructionDate date not null,
    --납기일
    dueDate date not null,
    --품번(FK)
    Item_Code varchar2(12) NOT NULL, 
    --품명(FK)
    Item_Name varchar2(50) NOT NULL,
    --규격
    Standard varchar2(20), 
    --재고단위
    Inventory_Unit varchar2(5) DEFAULT 'EA',
    --지시수량
    indicatedQuantity number(5) not null,
    --상태
    status varchar2(10) not null,
    --작업구분
    workSortation varchar2(20),
    --검사
    inspection varchar2(20) not null,
    --비고
    note varchar2(1000),
    --생산계획번호
    ProductionPlanCode VARCHAR(12) NOT NULL,
    --생산설비
    productionFacility varchar2(50),
    --작업팀
    taskTeam varchar2(50),
    CONSTRAINT CPMPMOPEPERREG_placeCode_FK FOREIGN KEY(Workplace_Code) REFERENCES SM_BIM_Pro_Wor_Reg(Workplace_Code)on delete cascade,
    CONSTRAINT CPMPMOPEPERREG_Item_Code_FK FOREIGN KEY(Item_Code) REFERENCES SM_BIM_Ite_Reg(Item_Code)on delete cascade,
    CONSTRAINT CPMPMOPEPERREG_PlanCode_FK FOREIGN KEY(ProductionPlanCode) REFERENCES CPM_PM_Pro_Pla_Reg(ProductionPlanCode)on delete cascade
);

--EXECUTE P_RESET_SEQ('seq_CPM_PM_Pro_Pla_Reg_no');
EXECUTE P_RESET_SEQ('seq_CPM_PM_Ope_Per_Reg_no');
--SELECT seq_CPM_PM_Pro_Pla_Reg_no.NEXTVAL FROM DUAL ;
SELECT seq_CPM_PM_Ope_Per_Reg_no.NEXTVAL FROM DUAL ;


--작업실적등록 데이터
INSERT INTO CPM_PM_Ope_Per_Reg
VALUES (F_GET_CURR_SEQ('CPM_PM_Ope_Per_Reg'),'출고완료','L101',SYSDATE,SYSDATE+90,'DT01','피카소VEGA8',NULL,'EA',300,'계획','작업지시','검사',null,'PP2107000001','본체라인1호', '생산1반');
INSERT INTO CPM_PM_Ope_Per_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg'),'출고대기','L101',SYSDATE,SYSDATE+90,'DT01','피카소VEGA8',NULL,'EA',1000,'계획','작업지시','검사',null,'PP2107000002','본체라인1호', '생산1반');
INSERT INTO CPM_PM_Ope_Per_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg'),'출고대기','L101',SYSDATE,SYSDATE+90,'DT01','피카소VEGA8',NULL,'EA',100,'계획','작업지시','검사',null,'PP2107000003','본체라인1호', '생산1반');
INSERT INTO CPM_PM_Ope_Per_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg'),'출고완료','L101',SYSDATE,SYSDATE+90,'DT02','프리플로우ELITE',NULL,'EA',1100,'계획','작업지시','검사',null,'PP2107000004','본체라인2호', '생산2반');
INSERT INTO CPM_PM_Ope_Per_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg'),'출고완료','L201',SYSDATE,SYSDATE+90,'DT02','프리플로우ELITE',NULL,'EA',700,'계획','작업지시','검사',null,'PP2107000005','본체라인2호', '생산2반');
INSERT INTO CPM_PM_Ope_Per_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg'),'출고완료','L201',SYSDATE,SYSDATE+90,'DT02','프리플로우ELITE',NULL,'EA',200,'계획','작업지시','검사',null,'PP2107000006','본체라인2호', '생산2반');
INSERT INTO CPM_PM_Ope_Per_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg'),'출고대기','L201',SYSDATE,SYSDATE+90,'DT03','게이밍본체PC',NULL,'EA',400,'계획','작업지시','검사',null,'PP2107000007','본체라인3호', '생산3반');
INSERT INTO CPM_PM_Ope_Per_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg'),'출고대기','L201',SYSDATE,SYSDATE+90,'DT03','게이밍본체PC',NULL,'EA',800,'계획','작업지시','검사',null,'PP2107000008','본체라인3호', '생산3반');
INSERT INTO CPM_PM_Ope_Per_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg'),'출고완료','L201',SYSDATE,SYSDATE+90,'DT03','게이밍본체PC',NULL,'EA',900,'계획','작업지시','검사',null,'PP2107000009','본체라인3호', '생산3반');
INSERT INTO CPM_PM_Ope_Per_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg'),'출고완료','L201',SYSDATE,SYSDATE+90,'DT03','게이밍본체PC',NULL,'EA',1000,'계획','작업지시','검사',null,'PP2107000010','본체라인3호', '생산3반');
INSERT INTO CPM_PM_Ope_Per_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg'),'출고완료','L201',SYSDATE,SYSDATE+90,'DT04','EXKOREA',NULL,'EA',1000,'계획','작업지시','검사',null,'PP2107000011','본체라인4호', '생산4반');
INSERT INTO CPM_PM_Ope_Per_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg'),'출고완료','L201',SYSDATE,SYSDATE+90,'DT04','EXKOREA',NULL,'EA',1000,'계획','작업지시','검사',null,'PP2107000012','본체라인4호', '생산4반');
INSERT INTO CPM_PM_Ope_Per_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg'),'출고완료','L201',SYSDATE,SYSDATE+90,'DT04','EXKOREA' ,NULL,'EA',1000,'계획','작업지시','검사',null,'PP2107000013','본체라인4호', '생산4반');
INSERT INTO CPM_PM_Ope_Per_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg'),'출고완료','L201',SYSDATE,SYSDATE+90,'DT04','EXKOREA' ,NULL,'EA',1000,'계획','작업지시','검사',null,'PP2107000014','본체라인4호', '생산4반');

SELECT * FROM CPM_PM_Ope_Per_Reg;

--생산자재출고 세부사항
create table CPM_PM_Pro_Mat_For_Det(
--    --순번(PK)
--    NO number(5) NOT NULL,
    --출고번호(PK)
    forwardingNumber varchar(12) primary key, 
    --청구일
    billingDate date not null,
    --품번(FK)
    Item_Code varchar2(12) NOT NULL, 
    --품명(FK)
    Item_Name varchar2(50) NOT NULL,
    --규격
    Standard varchar2(20), 
    --재고단위
    Inventory_Unit varchar2(5) DEFAULT 'EA',
    --정미수량
    precisionQuantity number(5) not null,
    --LOSS
    LOSS number(5),
    --출고수량
    forwardingQuantity number(5),
    --비고
    note varchar2(1000),

    --작업지시번호(PK)
    workOrderNumber varchar2(12) NOT NULL,
    
    CONSTRAINT CPMPMPROMATFORDET_INUMBER_FK  FOREIGN KEY(Item_Code) REFERENCES SM_BIM_Ite_Reg(Item_Code)on delete cascade,
    CONSTRAINT CPMPMPROMATFORDET_wNumber_FK FOREIGN KEY(workOrderNumber) REFERENCES CPM_PM_Ope_Per_Reg(workOrderNumber)on delete cascade
);
--EXECUTE P_RESET_SEQ('SEQ_CPM_PM_Pro_Mat_For_Det_NO');
EXECUTE P_RESET_SEQ('seq_PM_SM_Sto_Mov_Main_no');
--SELECT SEQ_CPM_PM_Pro_Mat_For_Det_NO.NEXTVAL FROM DUAL;

SELECT seq_PM_SM_Sto_Mov_Main_no.NEXTVAL FROM DUAL ;

--생산자재출고 세부사항 데이터
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_CURR_SEQ('PM_SM_Sto_Mov_Main'),sysdate,'CASE01','슬림형본체',NULL,'EA',300,0,300,null,'W02107000001');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate+1, 'CASE03' , 'ABKO NCORE' ,NULL,'EA',1000,0,1000,null,'W02107000007');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate, 'HDD01' , 'WD BLUE 7200',NULL,'EA',100,20,120,null, 'W02107000007');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate+1, 'HDD02' , 'Seagate BarraCuda 7200' ,NULL,'EA',1100,10,1210,null,'W02107000011');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate,  'SSD01' , '삼성전자 980 PRO' ,NULL,'EA',700,0,700,null,'W02107000001');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate+1,  'SSD02' , '삼성전자 970 EVO' ,NULL,'EA',200,0,200,null,'W02107000004');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate+2,  'SSD02' , '삼성전자 970 EVO' ,NULL,'EA',200,0,200,null,'W02107000004');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate+2, 'SSD03' , '삼성전자 870 EVO' ,NULL,'EA',400,20,480,null,'W02107000001');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate,  'GPU01' , '지포스 RTX 3060' ,NULL,'EA',800,0,800,null, 'W02107000001');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate+1, 'GPU02' , '지포스 RTX 3070' ,NULL,'EA',900,0,900,null,'W02107000004');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate+2, 'GPU03' , '지포스 RTX 2060' ,NULL,'EA',900,0,900,null,'W02107000007');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate,  'GPU04' , '지포스 GTX1050 Ti' ,NULL,'EA',800,0,800,null,'W02107000011');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate+1,  'GPU04' , '지포스 GTX1050 Ti' ,NULL,'EA',800,0,800,null,'W02107000011');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate+1,'GPU05' , '갤럭시 GT1030' ,NULL,'EA',900,0,900,null,'W02107000001');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate+2, 'CPU01' , 'AMD 라이젠5' ,NULL,'EA',900,0,900,null,'W02107000001');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate,  'CPU02' , 'core I5-10세대' ,NULL,'EA',800,0,800,null,'W02107000004');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate+1, 'CPU03' , 'core I5-11세대' ,NULL,'EA',900,0,900,null,'W02107000007');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate+2, 'CPU04' , 'core I7-11세대' ,NULL,'EA',900,0,900,null,'W02107000011');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate, 'CPU04' , 'core I7-11세대' ,NULL,'EA',900,0,900,null,'W02107000011');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate,  'CPU05' , 'AMD 라이젠3 Pro' ,NULL,'EA',800,0,800,null,'W02107000001');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate+1, 'RAM01' , 'ADATA XPG DDR4-3200' ,NULL,'EA',900,0,900,null,'W02107000001');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate+2, 'RAM02' , 'KLEVV DDR4-3200' ,NULL,'EA',900,0,900,null,'W02107000004');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate, 'RAM03' , '삼성 DDR4-3200',NULL,'EA',800,0,800,null,'W02107000011');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate+1,'BOARD01' , '박격포 MAG B560M',NULL,'EA',900,0,900,null,'W02107000001');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate+2,'BOARD02' , 'ASRock B550M',NULL,'EA',900,0,900,null,'W02107000004');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate,  'BOARD03' , 'GIGABYTE A320M',NULL,'EA',800,0,800,null,'W02107000007');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate+1,'POWER01' , '시소닉 A12 STD',NULL,'EA',900,0,900,null, 'W02107000001');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate+2,'POWER02' , 'ASUS POG Thor 850P',NULL,'EA',900,0,900,null, 'W02107000004');
INSERT INTO CPM_PM_Pro_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),sysdate,'POWER03' , '마이크로닉 Classic 2',NULL,'EA',800,0,800,null,'W02107000007');

SELECT * FROM CPM_PM_Pro_Mat_For_Det;

--생산자재출고
create table CPM_PM_Pro_Mat_For(
    --출고번호(PK)
    forwardingNumber varchar(12) PRIMARY KEY,
    --출고일자(UK)
    forwardingDate date,
    --출고창고(FK)
    House_Code varchar2(12) not null,
    --출고장소(FK)
    Location_Code varchar2(12) not null,
    --공정(FK)
    Process_Code varchar2(12) not null,
    --작업장(FK)
    Workplace_Code varchar2(12) not null,
    --비고
    note varchar2(1000),
    
    CONSTRAINT CPMPMPROMATFORDET_forNum_FK FOREIGN KEY(forwardingNumber) REFERENCES CPM_PM_Pro_Mat_For_det(forwardingNumber)on delete cascade,

   
    CONSTRAINT CPMPMPROMATFOR_houseCode_FK FOREIGN KEY(House_Code) REFERENCES SM_BIM_Hou_Reg(House_Code)on delete cascade,
    CONSTRAINT CPMPMPROMATFOR_LocCode_FK FOREIGN KEY(Location_Code) REFERENCES SM_BIM_Wor_Reg(Location_Code)on delete cascade,
    CONSTRAINT CPMPMPROMATFOR_wphouseCode_FK FOREIGN KEY(Process_Code) REFERENCES SM_BIM_Pro_Reg(Process_Code)on delete cascade,
    CONSTRAINT CPMPMPROMATFOR_wpCode_FK FOREIGN KEY(Workplace_Code) REFERENCES SM_BIM_Pro_Wor_Reg(Workplace_Code)on delete cascade
  
);
CREATE OR REPLACE PROCEDURE P_RESET_SEQ1(SEQ_NAME IN VARCHAR2)
IS
    v_cnt NUMBER:=1;
    V_ROWCOUNT NUMBER;
    
BEGIN
    SELECT COUNT(1) INTO V_CNT
    FROM CPM_PM_Pro_Mat_For;
    V_ROWCOUNT := SQL%ROWCOUNT;
    DBMS_OUTPUT.PUT_LINE(v_cnt);
    EXECUTE IMMEDIATE 'ALTER SEQUENCE ' || SEQ_NAME || ' INCREMENT BY -' || V_CNT ;

    EXECUTE IMMEDIATE 'SELECT ' || SEQ_NAME || '.NEXTVAL FROM DUAL '
    INTO V_CNT;
      
    EXECUTE IMMEDIATE 'ALTER SEQUENCE ' || SEQ_NAME || ' INCREMENT BY 1';
END;
/

EXECUTE P_RESET_SEQ('seq_PM_SM_Sto_Mov_Main_no');
SELECT seq_PM_SM_Sto_Mov_Main_no.NEXTVAL FROM DUAL ;

--생산자재출고 데이터
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_CURR_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE,'M100','M101','L100','L101',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+1,'M100','M102','L100','L101',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+4,'M200','M201','L100','L101',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+6,'M200','M202','L100','L101',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+9,'M100','M101','L200','L201',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+10,'M100','M101','L100','L101',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+11,'M100','M102','L100','L101',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+14,'M200','M201','L100','L101',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+16,'M200','M202','L100','L101',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+19,'M100','M101','L200','L201',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+19,'M100','M101','L200','L201',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+20,'M100','M101','L200','L201',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+20,'M100','M101','L200','L201',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+20,'M100','M101','L200','L201',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+21,'M100','M101','L200','L201',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+21,'M100','M101','L200','L201',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+21,'M100','M101','L200','L201',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+22,'M100','M101','L200','L201',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+22,'M100','M101','L200','L201',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+22,'M100','M101','L200','L201',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+24,'M100','M101','L200','L201',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+24,'M100','M101','L200','L201',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+24,'M100','M101','L200','L201',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+2,'M100','M101','L200','L201',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+2,'M100','M101','L200','L201',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+2,'M100','M101','L200','L201',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+1,'M100','M101','L200','L201',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE,'M200','M101','L200','L201',null);
INSERT INTO CPM_PM_Pro_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE,'M200','M101','L200','L201',null);

SELECT * FROM CPM_PM_Pro_Mat_For;



            
--작업실적등록 세부사항
create table CPM_PM_Ope_Per_Reg_Det(
    --작업실적번호(PK)
    OPNumber varchar2(12) PRIMARY KEY,
    --자재사용유무
    MaterialUseStatus varchar2(10) default '무' not null ,
    --실적일
    performanceDate date not null,
    --공정(FK)
    Process_Code  varchar2(12) not null,
    --작업장(FK)
    Workplace_Code varchar2(12) not null,
    --구분
    sortation varchar2(10) not null,
    --실적수량
    performanceQuantity number(5),
    --검사
    inspection varchar2(20),
    --입고창고 컬럼(FK)
    House_Code varchar2(12),
    --비고
    note varchar2(1000),
    --작업지시번호(FK)
    workOrderNumber varchar2(12) NOT NULL,
    CONSTRAINT CPMPMDET_wPhouseCode_FK FOREIGN KEY(Process_Code) REFERENCES SM_BIM_Pro_Reg(Process_Code)on delete cascade,
    CONSTRAINT CPMPMDET_wpCode_FK FOREIGN KEY(Workplace_Code) REFERENCES SM_BIM_Pro_Wor_Reg(Workplace_Code)on delete cascade,
    CONSTRAINT CPMPMDET_hoCode_FK FOREIGN KEY(House_Code) REFERENCES SM_BIM_Hou_Reg(House_Code)on delete cascade,
    CONSTRAINT CPMPMDET_workNumber_FK FOREIGN KEY(workOrderNumber) REFERENCES CPM_PM_Ope_Per_Reg(workOrderNumber)on delete cascade
);

EXECUTE P_RESET_SEQ('seq_CPM_PM_Ope_Per_Reg_Det_no');
--EXECUTE P_RESET_SEQ('seq_CPM_PM_Ope_Per_Reg_no');
SELECT seq_CPM_PM_Ope_Per_Reg_Det_no.NEXTVAL FROM DUAL ;
--SELECT seq_CPM_PM_Ope_Per_Reg_no.NEXTVAL FROM DUAL ;

--작업실적등록 세부사항 데이터
INSERT INTO CPM_PM_Ope_Per_Reg_Det
VALUES (F_GET_CURR_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE,'L100','L101','입고', 150,'검사','M100',null,'W02107000001');
INSERT INTO CPM_PM_Ope_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE,'L100','L101','입고', 150,'검사','M100',null,'W02107000001');
INSERT INTO CPM_PM_Ope_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE,'L100','L101','입고', 10,'검사','M100',null,'W02107000002');
INSERT INTO CPM_PM_Ope_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+1,'L100','L101','입고', 300,'검사','M100',null,'W02107000002');
INSERT INTO CPM_PM_Ope_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+1,'L100','L101','입고', 250,'검사','M100',null,'W02107000003');
INSERT INTO CPM_PM_Ope_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+4,'L100','L101','입고', 800,'검사','M100',null,'W02107000003');
INSERT INTO CPM_PM_Ope_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+4,'L100','L101','입고', 200,'검사','M100',null,'W02107000004');
INSERT INTO CPM_PM_Ope_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+6,'L100','L101','입고', 60,'검사','M100',null,'W02107000004');
INSERT INTO CPM_PM_Ope_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+6,'L100','L101','입고', 60,'검사','M100',null,'W02107000005');
INSERT INTO CPM_PM_Ope_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+9,'L200','L201','입고', 500,'검사','M200',null,'W02107000005');
INSERT INTO CPM_PM_Ope_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+9,'L200','L201','입고', 710,'검사','M200',null,'W02107000006');
INSERT INTO CPM_PM_Ope_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+10,'L100','L101','입고', 300,'검사','M200',null,'W02107000006');
INSERT INTO CPM_PM_Ope_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+10,'L100','L101','입고', 400,'검사','M200',null,'W02107000006');
INSERT INTO CPM_PM_Ope_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+11,'L100','L101','입고', 100,'검사','M200',null,'W02107000007');
INSERT INTO CPM_PM_Ope_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+11,'L100','L101','입고', 100,'검사','M200',null,'W02107000007');
INSERT INTO CPM_PM_Ope_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+14,'L100','L101','입고', 80,'검사','M200',null,'W02107000007');
INSERT INTO CPM_PM_Ope_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+14,'L100','L101','입고', 400,'검사','M200',null,'W02107000008');
INSERT INTO CPM_PM_Ope_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+16,'L100','L101','입고', 100,'검사','M200',null,'W02107000008');
INSERT INTO CPM_PM_Ope_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+16,'L100','L101','입고', 700,'검사','M200',null,'W02107000009');
INSERT INTO CPM_PM_Ope_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+19,'L200','L201','입고', 500,'검사','M200',null,'W02107000009');
INSERT INTO CPM_PM_Ope_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+19,'L200','L201','입고', 400,'검사','M200',null,'W02107000010');

select * from CPM_PM_Ope_Per_Reg_Det;

update CPM_PM_Pro_Pla_Reg PL
set productionDivision = '작업'
WHERE productionDivision = '생산' AND productionplancode IN ( SELECT pl.productionplancode 
FROM CPM_PM_Pro_Pla_Reg PL, CPM_PM_Ope_Per_Reg OP
WHERE PL.productionplancode = OP.productionplancode);


--create or replace trigger trg_operation_nodml
--after update of status or delete 
--on CPM_PM_Ope_Per_Reg
--for each row
--begin
--   if(:old.status = '마감') then
--    raise_application_error(-20000,'마감상태에서는 변경불가.');
--    end if;
--end;
--/

-------------------------------------------------------------------------------------------------------------------------
--외주관리 테이블

--외주실적등록 -- 금액, 실적수량(외주실적등록 세부사항 데이터 SUM()), 실적잔량 뺌.
create table CPM_OM_Out_Per_Reg(
    --작업지시번호(PK)
    workOrderNumber varchar2(12) PRIMARY KEY,
    --자재출고상태
    MaterialForwardingStatus varchar2(20) not null,
    --외주처(FK)
    Workplace_Code varchar2(12) not null,
    --지시일
    instructionDate date not null,
    --완료일
    dueDate date not null,
  --품번(FK)
    Item_Code varchar2(12) NOT NULL, 
    --품명(FK)
    Item_Name varchar2(50) NOT NULL,
    --규격
    Standard varchar2(20), 
    --재고단위
    Inventory_Unit varchar2(5) DEFAULT 'EA',
    --지시수량
    indicatedQuantity number(5) not null,
    --단가
    unitPrice number(15) not null,
    --상태
    status varchar2(10) not null,
    --작업구분
    workSortation varchar2(20),
    --검사
    inspection varchar2(20) not null,
    --비고
    note varchar2(1000),
     --생산계획번호
    ProductionPlanCode VARCHAR(12) NOT NULL,
    CONSTRAINT CPMOMOUTPERREG_wpCode_FK FOREIGN KEY(Workplace_Code) REFERENCES SM_BIM_Out_Wor_Reg(Workplace_Code)on delete cascade,
    CONSTRAINT CPMOMOUTPERREG_INUMBER_FK FOREIGN KEY(Item_Code) REFERENCES SM_BIM_Ite_Reg(Item_Code)on delete cascade,
    CONSTRAINT CPMOMOUTPERREG_PPlanCode_FK FOREIGN KEY(ProductionPlanCode) REFERENCES CPM_PM_Pro_Pla_Reg(ProductionPlanCode)
);

--SELECT * FROM CPM_PM_Ope_Per_Reg;


--EXECUTE P_RESET_SEQ('seq_CPM_PM_Ope_Per_Reg_no');
--EXECUTE P_RESET_SEQ('seq_CPM_PM_Pro_Pla_Reg_no');
--
select seq_CPM_PM_Ope_Per_Reg_no.NEXTVAL from dual;
--select seq_CPM_PM_Pro_Pla_Reg_no.NEXTVAL from dual;

--외주실적등록 데이터
INSERT INTO CPM_OM_Out_Per_Reg
VALUES (F_GET_CURR_SEQ('CPM_PM_Ope_Per_Reg'),'출고중','P101',SYSDATE+17,SYSDATE+17,'MT01','27inch모니터',  NULL , 'EA',500,23000,'계획','외주발주','검사',null,'PP2107000015');
INSERT INTO CPM_OM_Out_Per_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg'),'출고중','P101',SYSDATE+18,SYSDATE+18,'MT01','27inch모니터', NULL , 'EA',1000,15000,'확정','외주발주','검사',null,'PP2107000016');
INSERT INTO CPM_OM_Out_Per_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg'),'출고완료','P102',SYSDATE+19,SYSDATE+19,'MT01','27inch모니터', NULL , 'EA',500,19000,'마감','외주발주','검사',null,'PP2107000017');
INSERT INTO CPM_OM_Out_Per_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg'),'출고완료','P102',SYSDATE+21,SYSDATE+21,'MT01','27inch모니터', NULL , 'EA',1000,6500,'계획','외주발주','검사',null,'PP2107000018');
INSERT INTO CPM_OM_Out_Per_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg'),'출고완료','P103',SYSDATE+22,SYSDATE+22,'MT01','27inch모니터', NULL , 'EA',500,7000,'확정','외주발주','검사',null,'PP2107000019');
INSERT INTO CPM_OM_Out_Per_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg'),'출고완료','P103',SYSDATE+23,SYSDATE+23,'MT02','32inch모니터', NULL , 'EA',1000,8500,'마감','외주발주','검사',null,'PP2107000020');
INSERT INTO CPM_OM_Out_Per_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg'),'출고완료','P104',SYSDATE+25,SYSDATE+25, 'MT02','32inch모니터', NULL , 'EA',500,7000,'계획','외주발주','검사',null,'PP2107000021');
INSERT INTO CPM_OM_Out_Per_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg'),'출고완료','P104',SYSDATE+26,SYSDATE+26, 'MT02','32inch모니터' , NULL , 'EA',1000,10000,'확정','외주발주','검사',null,'PP2107000022');
INSERT INTO CPM_OM_Out_Per_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg'),'출고중','P105',SYSDATE+27,SYSDATE+27,'MT02','32inch모니터' , NULL , 'EA',500,15000,'마감','외주발주','검사',null,'PP2107000023');
INSERT INTO CPM_OM_Out_Per_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg'),'출고중','P105',SYSDATE+29,SYSDATE+29,'MT02','32inch모니터' , NULL , 'EA',1000,10000,'계획','외주발주','검사',null,'PP2107000024');
INSERT INTO CPM_OM_Out_Per_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg'),'출고중','P105',SYSDATE+29,SYSDATE+29,'MT03','43inch모니터', NULL , 'EA',500,17000,'확정','외주발주','검사',null,'PP2107000025');
INSERT INTO CPM_OM_Out_Per_Reg
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg'),'출고중','P105',SYSDATE+29,SYSDATE+29,'MT03','43inch모니터', NULL , 'EA',1000,12000,'마감','외주발주','검사',null,'PP2107000026');
--INSERT INTO CPM_OM_Out_Per_Reg
--VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg'),'출고중','P105',SYSDATE+29,SYSDATE+29,'BL01' , '32MB25VQ' , NULL , 'EA',500,24000,'마감','외주발주','검사',null,'PP2107000027');
--INSERT INTO CPM_OM_Out_Per_Reg
--VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg'),'출고중','P105',SYSDATE+29,SYSDATE+29,'BL02' , '32LF550B' , NULL , 'EA',1000,22000,'마감','외주발주','검사',null,'PP2107000028');
--INSERT INTO CPM_OM_Out_Per_Reg
--VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg'),'출고중','P105',SYSDATE+29,SYSDATE+29,'BL03' , 'L32LX530H' , NULL , 'EA',500,23000,'마감','외주발주','검사',null,'PP2107000029');

CREATE OR REPLACE PROCEDURE P_RESET_SEQ2(SEQ_NAME IN VARCHAR2)
IS
    v_cnt NUMBER:=1;
    V_ROWCOUNT NUMBER;
    
BEGIN
    SELECT COUNT(1) INTO V_CNT
    FROM CPM_OM_Out_Per_Reg;
    V_ROWCOUNT := SQL%ROWCOUNT;
    DBMS_OUTPUT.PUT_LINE(v_cnt);
--    DBMS_OUTPUT.PUT_LINE(V_ROWCOUNT);

--    EXECUTE IMMEDIATE 'SELECT ' || SEQ_NAME || '.CURRVAL FROM DUAL ' 
--    INTO V_CNT;

    EXECUTE IMMEDIATE 'ALTER SEQUENCE ' || SEQ_NAME || ' INCREMENT BY -' || V_CNT ;

    EXECUTE IMMEDIATE 'SELECT ' || SEQ_NAME || '.NEXTVAL FROM DUAL '
    INTO V_CNT;
      
    EXECUTE IMMEDIATE 'ALTER SEQUENCE ' || SEQ_NAME || ' INCREMENT BY 1';
END;
/

select * from CPM_OM_Out_Per_Reg;

--외주자재출고 세부사항
create table CPM_OM_Out_Mat_For_Det(
     --출고번호(PK)
    forwardingNumber varchar(12) primary key, 
   --청구일
    billingDate date not null,
    --품번(FK)
    Item_Code varchar2(12) NOT NULL, 
    --품명(FK)
    Item_Name varchar2(50) NOT NULL,
    --규격
    Standard varchar2(20), 
    --재고단위
    Inventory_Unit varchar2(5) DEFAULT 'EA',
   --정미수량
    precisionQuantity number(5) not null,
    --LOSS
    LOSS number(5),
    --출고수량
    forwardingQuantity number(5),
    --비고
    note varchar2(1000),
    --작업지시번호(FK)
    workOrderNumber varchar2(12) NOT NULL,
    CONSTRAINT CPMOMOUTMATFORDET_INUMBER_FK FOREIGN KEY(Item_Code) REFERENCES SM_BIM_Ite_Reg(Item_Code)on delete cascade,
--    CONSTRAINT CPMOMOUTMATFORDET_Item_Name_FK FOREIGN KEY(Item_Name) REFERENCES SM_BIM_Ite_Reg(Item_Name)
    --CONSTRAINT CPMOMOUTMATFORDET_STANDARD_FK FOREIGN KEY(standard) REFERENCES SM_BIM_Ite_Reg(Standard),
    --CONSTRAINT CPMOMOUTMATFORDET_UNIT_FK FOREIGN KEY(unit) REFERENCES SM_BIM_Ite_Reg(Inventory_Unit)
    CONSTRAINT CPMOMOUTMATFORDET_wNumber_FK FOREIGN KEY(workOrderNumber) REFERENCES CPM_OM_Out_Per_Reg(workOrderNumber)on delete cascade
);

--EXECUTE P_RESET_SEQ('SEQ_CPM_PM_Pro_Mat_For_Det_NO');
--EXECUTE P_RESET_SEQ2('seq_PM_SM_Sto_Mov_Main_no');
--select SEQ_CPM_PM_Pro_Mat_For_Det_NO.NEXTVAL from dual;
select seq_PM_SM_Sto_Mov_Main_no.NEXTVAL from dual;
SELECT * FROM CPM_PM_PRO_Mat_For_Det;

--외주자재출고 세부사항 데이터
INSERT INTO CPM_OM_Out_Mat_For_Det
VALUES (F_GET_CURR_SEQ('PM_SM_Sto_Mov_Main'), sysdate, 'ADBOARD01' , '정면소켓형 AD 보드' , 'NULL' , 'EA',100,10,110,null,'W02107000015');
INSERT INTO CPM_OM_Out_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),  sysdate+1,'ADBOARD02' , '초소형 AD 보드' , 'NULL' , 'EA' ,200,20,240,null,'W02107000020');
INSERT INTO CPM_OM_Out_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),  sysdate+2,'ADBOARD03' , '2232GW AD 보드' , 'NULL' , 'EA' ,300,0,300,null,'W02107000025');
INSERT INTO CPM_OM_Out_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'), sysdate,'INVERTER01' , 'FIF1742-01A' , 'NULL' , 'EA',800,10,880,null,'W02107000015');
INSERT INTO CPM_OM_Out_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'), sysdate+1,'INVERTER02' , 'TWT-122K' , 'NULL' , 'EA' ,700,0,700,null,'W02107000020');
INSERT INTO CPM_OM_Out_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'), sysdate+2,'INVERTER03' , 'DS-1307WK' , 'NULL' , 'EA' ,600,20,720,null,'W02107000025');
INSERT INTO CPM_OM_Out_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),  sysdate,'SMPS01' , 'IDF060CV-S24V1' , 'NULL' , 'EA',500,0,500,null,'W02107000015');
INSERT INTO CPM_OM_Out_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'), sysdate+1,'SMPS02' , 'IDF100CV-S24V1' , 'NULL' , 'EA' ,400,0,400,null,'W02107000020');
INSERT INTO CPM_OM_Out_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'), sysdate+2,'SMPS03' , 'IDF600CV-S24V2' , 'NULL' , 'EA' ,900,0,900,null,'W02107000025');
INSERT INTO CPM_OM_Out_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'), sysdate,'LIPSBOARD01' , 'LI01' , 'NULL' , 'EA' ,1000,0,1000,null,'W02107000015');
INSERT INTO CPM_OM_Out_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'), sysdate+1,'LIPSBOARD02' , 'LI10' , 'NULL' , 'EA' ,1000,0,1000,null,'W02107000020');
INSERT INTO CPM_OM_Out_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'), sysdate+2,'LIPSBOARD03' , 'LL01' , 'NULL' , 'EA'  ,1000,0,1000,null,'W02107000025');
INSERT INTO CPM_OM_Out_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),  sysdate,'BL01' , '32MB25VQ', 'NULL' , 'EA' ,1000,0,1000,null,'W02107000015');
INSERT INTO CPM_OM_Out_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),  sysdate+1,'BL02' , '32LF550B' , 'NULL' , 'EA' ,1000,0,1000,null,'W02107000020');
INSERT INTO CPM_OM_Out_Mat_For_Det
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'), sysdate+2,'BL03' , 'L32LX530H', 'NULL' , 'EA' ,1000,0,1000,null,'W02107000025');

SELECT * FROM CPM_OM_Out_Mat_For_Det;



SELECT * FROM CPM_PM_Ope_Per_Reg;
SELECT * FROM CPM_OM_Out_Per_Reg;
--EXECUTE P_RESET_SEQ2('seq_CPM_PM_Ope_Per_Reg_no');

--외주자재출고
create table CPM_OM_Out_Mat_For(
    --출고번호(PK)
    forwardingNumber varchar(12) PRIMARY KEY,
    --출고일자
    forwardingDate date not null,
    --출고창고(FK)
    House_Code varchar2(12) not null,
    --출고장소(FK)
    Location_Code varchar2(12) not null,
    --공정(FK)
    Outsourcing_Code varchar2(12) not null,
    --작업장(FK)
    Workplace_Code varchar2(12) not null,
    --비고
    note varchar2(1000),
    CONSTRAINT CPMOMOUTMATFOR_houseCode_FK FOREIGN KEY(House_Code) REFERENCES SM_BIM_Hou_Reg(House_Code)on delete cascade,
    CONSTRAINT CPMOMOUTMATFOR_LocCode_FK FOREIGN KEY(Location_Code) REFERENCES SM_BIM_Wor_Reg(Location_Code)on delete cascade,
    CONSTRAINT CPMOMOUTMATFOR_wPhouseCode_FK FOREIGN KEY(Outsourcing_Code) REFERENCES SM_BIM_Out_Reg(Outsourcing_Code)on delete cascade,
    CONSTRAINT CPMOMOUTMATFOR_wpCode_FK FOREIGN KEY(Workplace_Code) REFERENCES SM_BIM_Out_Wor_Reg(Workplace_Code)on delete cascade
);
--CREATE OR REPLACE PROCEDURE P_RESET_SEQ1(SEQ_NAME IN VARCHAR2)
--IS
--    v_cnt NUMBER:=1;
--    V_ROWCOUNT NUMBER;
--    
--BEGIN
--    SELECT COUNT(1) INTO V_CNT
--    FROM CPM_OM_Out_Mat_For;
--    V_ROWCOUNT := SQL%ROWCOUNT;
--    DBMS_OUTPUT.PUT_LINE(v_cnt);
--    EXECUTE IMMEDIATE 'ALTER SEQUENCE ' || SEQ_NAME || ' INCREMENT BY -' || V_CNT ;
--
--    EXECUTE IMMEDIATE 'SELECT ' || SEQ_NAME || '.NEXTVAL FROM DUAL '
--    INTO V_CNT;
--      
--    EXECUTE IMMEDIATE 'ALTER SEQUENCE ' || SEQ_NAME || ' INCREMENT BY 1';
--END;
--/

EXECUTE P_RESET_SEQ2('seq_PM_SM_Sto_Mov_Main_no');
select seq_PM_SM_Sto_Mov_Main_no.NEXTVAL from dual;

--외주관리 데이터
--외주자재출고 데이터
INSERT INTO CPM_OM_Out_Mat_For
VALUES (F_GET_CURR_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+17,'M100','M101','P100','P101',null);
INSERT INTO CPM_OM_Out_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+18,'M100','M101','P100','P101',null);
INSERT INTO CPM_OM_Out_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+19,'M100','M101','P100','P102',null);
INSERT INTO CPM_OM_Out_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+21,'M100','M101','P100','P102',null);
INSERT INTO CPM_OM_Out_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+22,'M100','M101','P100','P103',null);
INSERT INTO CPM_OM_Out_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+23,'M200','M201','P100','P103',null);
INSERT INTO CPM_OM_Out_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+25,'M200','M201','P100','P104',null);
INSERT INTO CPM_OM_Out_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+26,'M200','M201','P100','P104',null);
INSERT INTO CPM_OM_Out_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+27,'M200','M201','P100','P105',null);
INSERT INTO CPM_OM_Out_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+29,'M200','M201','P100','P105',null);
INSERT INTO CPM_OM_Out_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+23,'M200','M201','P100','P103',null);
INSERT INTO CPM_OM_Out_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+25,'M200','M201','P100','P104',null);
INSERT INTO CPM_OM_Out_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+26,'M200','M201','P100','P104',null);
INSERT INTO CPM_OM_Out_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+27,'M200','M201','P100','P105',null);
INSERT INTO CPM_OM_Out_Mat_For
VALUES (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'),SYSDATE+29,'M200','M201','P100','P105',null);
SELECT * FROM CPM_OM_Out_Mat_For;


--외주실적등록 세부사항
create table CPM_OM_Out_Per_Reg_Det(
    --작업실적번호(PK)
    operationPerformanceNumber varchar2(12) PRIMARY KEY,
    --자재사용유무
    MaterialUseStatus varchar2(10) not null,
    --실적일
    performanceDate date not null,
    --공정(FK)
    Outsourcing_Code  varchar2(12) not null,
    --작업장(FK)
    Workplace_Code varchar2(12) not null,
    --구분
    sortation varchar2(10) not null,
    --실적수량
    performanceQuantity number(5),
    --검사
    inspection varchar2(20) ,
    --비고
    note varchar2(1000),
    --입고창고 컬럼
    House_Code varchar2(12),
    --작업지시번호(FK)
    workOrderNumber varchar2(12),
    CONSTRAINT CPMOMOUTPERREGDET_outCode_FK FOREIGN KEY(Outsourcing_Code) REFERENCES SM_BIM_Out_Reg(Outsourcing_Code)on delete cascade,
    CONSTRAINT CPMOMOUTPERREGDET_wpCode_FK FOREIGN KEY(Workplace_Code) REFERENCES SM_BIM_Out_Wor_Reg(Workplace_Code)on delete cascade,
    CONSTRAINT CPMOMOUTPERREGDET_hoCode_FK FOREIGN KEY(House_Code) REFERENCES SM_BIM_Hou_Reg(House_Code)on delete cascade,
    CONSTRAINT CPMOMOUTPERREGDET_wNumber_FK FOREIGN KEY(workOrderNumber) REFERENCES CPM_OM_Out_Per_Reg(workOrderNumber)on delete cascade
);

--EXECUTE P_RESET_SEQ('seq_CPM_PM_Ope_Per_Reg_no');
--EXECUTE P_RESET_SEQ('seq_CPM_PM_Ope_Per_Reg_Det_no');
--
select seq_CPM_PM_Ope_Per_Reg_Det_no.NEXTVAL from dual;
--select seq_CPM_PM_Ope_Per_Reg_no.NEXTVAL from dual;
--
--SELECT * FROM CPM_OM_Out_Per_Reg;

--외주실적등록 세부사항 데이터
INSERT INTO CPM_OM_Out_Per_Reg_Det
VALUES (F_GET_CURR_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+17,'P100','P101','입고', 250,'검사',null,'M100','W02107000015');
INSERT INTO CPM_OM_Out_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+17,'P100','P101','입고', 250,'검사',null,'M100','W02107000015');
INSERT INTO CPM_OM_Out_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+18,'P100','P101','입고', 500,'검사',null,'M100','W02107000016');
INSERT INTO CPM_OM_Out_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+18,'P100','P101','입고', 500,'검사',null,'M100','W02107000016');
INSERT INTO CPM_OM_Out_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+19,'P100','P102','입고', 200,'검사',null,'M100','W02107000017');
INSERT INTO CPM_OM_Out_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+19,'P100','P102','입고', 200,'검사',null,'M100','W02107000017');
INSERT INTO CPM_OM_Out_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+21,'P100','P102','입고', 500,'검사',null,'M100','W02107000018');
INSERT INTO CPM_OM_Out_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+21,'P100','P102','입고', 300,'검사',null,'M100','W02107000018');
INSERT INTO CPM_OM_Out_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+22,'P100','P103','입고', 300,'검사',null,'M100','W02107000019');
INSERT INTO CPM_OM_Out_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+22,'P100','P103','입고', 400,'검사',null,'M100','W02107000019');
INSERT INTO CPM_OM_Out_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+23,'P100','P103','입고', 300,'검사',null,'M100','W02107000020');
INSERT INTO CPM_OM_Out_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+23,'P100','P103','입고', 300,'검사',null,'M100','W02107000020');
INSERT INTO CPM_OM_Out_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+25,'P100','P104','입고', 100,'검사',null,'M100','W02107000021');
INSERT INTO CPM_OM_Out_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+25,'P100','P104','입고', 400,'검사',null,'M100','W02107000021');
INSERT INTO CPM_OM_Out_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+26,'P100','P104','입고', 200,'검사',null,'M100','W02107000022');
INSERT INTO CPM_OM_Out_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+26,'P100','P104','입고', 200,'검사',null,'M100','W02107000022');
INSERT INTO CPM_OM_Out_Per_Reg_Det
VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+27,'P100','P105','입고', 400,'검사',null,'M100','W02107000023');
--INSERT INTO CPM_OM_Out_Per_Reg_Det
--VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+27,'P100','P105','입고', 500,'검사',null,'M100','W02107000023');
--INSERT INTO CPM_OM_Out_Per_Reg_Det
--VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+29,'P100','P105','입고', 600,'검사',null,'M100','W02107000024');
--INSERT INTO CPM_OM_Out_Per_Reg_Det
--VALUES (F_GET_NEXT_SEQ('CPM_PM_Ope_Per_Reg_Det'),'무',SYSDATE+29,'P100','P105','입고', 400,'검사',null,'M100','W02107000024');
SELECT * FROM CPM_OM_Out_Per_Reg_Det;
SELECT * FROM CPM_PM_OPE_PER_REG_Det;


update CPM_PM_Pro_Pla_Reg PL
set productionDivision = '외주'
WHERE productionDivision = '생산' AND productionplancode IN ( SELECT pl.productionplancode 
FROM CPM_PM_Pro_Pla_Reg PL, CPM_OM_Out_Per_Reg OP
WHERE PL.productionplancode = OP.productionplancode);

--create or replace trigger trg_outsourcing_nodml
--after update of status or delete 
--on cpm_om_out_per_reg 
--for each row
--begin
--   if(:new.status = '마감') then
--    raise_application_error(-20000,'마감상태에서는 변경불가.');
--    end if;
--end;
--/


create or replace trigger trg_ope_out_nodml
after update of dailyProduction,scheduledDateOfOperation,Quantity or delete 
on CPM_PM_Pro_Pla_Reg
for each row
begin
    if(:new.productionDivision = '작업' or :new.productionDivision = '외주') then
    raise_application_error(-20001,'작업지시등록/외주발주등록된 데이터는 변경불가.');
    end if;
end;
/



--외주마감
create table CPM_OM_Out_Fin(
    --외주비마감번호(PK)
    OutsourcingCostClosingNumber varchar2(12) PRIMARY KEY,
    --마감일
    DeadlineDate date not null,
    --외주공정(FK)
    Outsourcing_Code  varchar2(12) not null,
    --외주처(FK)
    Workplace_Code varchar2(12) not null,
    --비고
    note varchar2(1000),    
    CONSTRAINT CPMOMOUTFIN_wphouseCode_FK FOREIGN KEY(Outsourcing_Code) REFERENCES SM_BIM_Out_Reg(Outsourcing_Code)on delete cascade,
    CONSTRAINT CPMOMOUTFIN_wpCode_FK FOREIGN KEY(Workplace_Code) REFERENCES SM_BIM_Out_Wor_Reg(Workplace_Code)on delete cascade
);

select seq_CPM_OM_Out_Fin_no.NEXTVAL from dual;

--외주마감 데이터
INSERT INTO CPM_OM_Out_Fin
VALUES (F_GET_CURR_SEQ('CPM_OM_Out_Fin'),SYSDATE+17,'P100','P101',null);
INSERT INTO CPM_OM_Out_Fin
VALUES (F_GET_NEXT_SEQ('CPM_OM_Out_Fin'),SYSDATE+18,'P100','P101',null);
INSERT INTO CPM_OM_Out_Fin
VALUES (F_GET_NEXT_SEQ('CPM_OM_Out_Fin'),SYSDATE+19,'P100','P102',null);
INSERT INTO CPM_OM_Out_Fin
VALUES (F_GET_NEXT_SEQ('CPM_OM_Out_Fin'),SYSDATE+21,'P100','P102',null);
INSERT INTO CPM_OM_Out_Fin
VALUES (F_GET_NEXT_SEQ('CPM_OM_Out_Fin'),SYSDATE+22,'P100','P103',null);
INSERT INTO CPM_OM_Out_Fin
VALUES (F_GET_NEXT_SEQ('CPM_OM_Out_Fin'),SYSDATE+23,'P100','P103',null);
INSERT INTO CPM_OM_Out_Fin
VALUES (F_GET_NEXT_SEQ('CPM_OM_Out_Fin'),SYSDATE+25,'P100','P104',null);
INSERT INTO CPM_OM_Out_Fin
VALUES (F_GET_NEXT_SEQ('CPM_OM_Out_Fin'),SYSDATE+26,'P100','P104',null);
INSERT INTO CPM_OM_Out_Fin
VALUES (F_GET_NEXT_SEQ('CPM_OM_Out_Fin'),SYSDATE+27,'P100','P105',null);
INSERT INTO CPM_OM_Out_Fin
VALUES (F_GET_NEXT_SEQ('CPM_OM_Out_Fin'),SYSDATE+29,'P100','P105',null);


--외주마감 세부사항
create table CPM_OM_Out_Fin_Det(
    --순번(PK)
    NO number(4) PRIMARY KEY,
   --품번(FK)
    Item_Code varchar2(12) NOT NULL, 
    --품명(FK)
    Item_Name varchar2(50) NOT NULL,
    --규격
    Standard varchar2(20), 
    --재고단위
    Inventory_Unit varchar2(5) DEFAULT 'EA',
    --수량(FK)
    quantity number(5) not null,
     --단가(FK)
    unitPrice number(15) not null,
    --비고
    note varchar2(1000),
    --외주비마감번호(FK)
    OutsourcingCostClosingNumber varchar2(12) NOT NULL,
    CONSTRAINT CPMOMOUTFINDET_INUMBER_FK FOREIGN KEY(Item_Code) REFERENCES SM_BIM_Ite_Reg(Item_Code)on delete cascade,
    CONSTRAINT CPMOMOUTFINDET_quantity_FK FOREIGN KEY(OutsourcingCostClosingNumber) REFERENCES CPM_OM_Out_Fin(OutsourcingCostClosingNumber)
);
EXECUTE P_RESET_SEQ('SEQ_CPM_OM_Out_FinNo_NO');
EXECUTE P_RESET_SEQ('seq_CPM_OM_Out_Fin_no');
select SEQ_CPM_OM_Out_FinNo_NO.NEXTVAL from dual;
select seq_CPM_OM_Out_Fin_no.NEXTVAL from dual;

--외주마감 세부사항 데이터
INSERT INTO CPM_OM_Out_Fin_Det
VALUES (F_GET_CURR_SEQ('CPM_OM_Out_FinNo'),'ADBOARD01' , '정면소켓형 AD 보드'  , NULL , 'EA',500,23000,null,F_GET_CURR_SEQ('CPM_OM_Out_Fin'));
INSERT INTO CPM_OM_Out_Fin_Det
VALUES (F_GET_NEXT_SEQ('CPM_OM_Out_FinNo'),'ADBOARD02' , '초소형 AD 보드' , NULL , 'EA',1000,15000,null,F_GET_NEXT_SEQ('CPM_OM_Out_Fin'));
INSERT INTO CPM_OM_Out_Fin_Det
VALUES (F_GET_NEXT_SEQ('CPM_OM_Out_FinNo'), 'ADBOARD03' , '2232GW AD 보드' , NULL , 'EA',500,19000,null,F_GET_NEXT_SEQ('CPM_OM_Out_Fin'));
INSERT INTO CPM_OM_Out_Fin_Det
VALUES (F_GET_NEXT_SEQ('CPM_OM_Out_FinNo'),'INVERTER01' , 'FIF1742-01A' , NULL , 'EA',1000,6500,null,F_GET_NEXT_SEQ('CPM_OM_Out_Fin'));
INSERT INTO CPM_OM_Out_Fin_Det
VALUES (F_GET_NEXT_SEQ('CPM_OM_Out_FinNo'),'INVERTER02' , 'TWT-122K' , NULL , 'EA',500,7000,null,F_GET_NEXT_SEQ('CPM_OM_Out_Fin'));
INSERT INTO CPM_OM_Out_Fin_Det
VALUES (F_GET_NEXT_SEQ('CPM_OM_Out_FinNo'), 'INVERTER03' , 'DS-1307WK' , NULL , 'EA',1000,8500,null,F_GET_NEXT_SEQ('CPM_OM_Out_Fin'));
INSERT INTO CPM_OM_Out_Fin_Det
VALUES (F_GET_NEXT_SEQ('CPM_OM_Out_FinNo'),'SMPS01' , 'IDF060CV-S24V1' , NULL , 'EA',500,7000,null,F_GET_NEXT_SEQ('CPM_OM_Out_Fin'));
INSERT INTO CPM_OM_Out_Fin_Det
VALUES (F_GET_NEXT_SEQ('CPM_OM_Out_FinNo'),'SMPS02' , 'IDF100CV-S24V1' , NULL , 'EA',1000,15000,null,F_GET_NEXT_SEQ('CPM_OM_Out_Fin'));
INSERT INTO CPM_OM_Out_Fin_Det
VALUES (F_GET_NEXT_SEQ('CPM_OM_Out_FinNo'), 'SMPS03' , 'IDF600CV-S24V2' , NULL , 'EA',500,10000,null,F_GET_CURR_SEQ('CPM_OM_Out_Fin'));
INSERT INTO CPM_OM_Out_Fin_Det
VALUES (F_GET_NEXT_SEQ('CPM_OM_Out_FinNo'),'LIPSBOARD01' , 'LI01' , NULL , 'EA',1000,17000,null,F_GET_NEXT_SEQ('CPM_OM_Out_Fin'));
INSERT INTO CPM_OM_Out_Fin_Det
VALUES (F_GET_NEXT_SEQ('CPM_OM_Out_FinNo'),'LIPSBOARD02' , 'LI10'  , NULL , 'EA',500,17000,null,F_GET_NEXT_SEQ('CPM_OM_Out_Fin'));
INSERT INTO CPM_OM_Out_Fin_Det
VALUES (F_GET_NEXT_SEQ('CPM_OM_Out_FinNo'),'LIPSBOARD03' , 'LL01' , NULL , 'EA',1000,12000,null,F_GET_CURR_SEQ('CPM_OM_Out_Fin'));
INSERT INTO CPM_OM_Out_Fin_Det
VALUES (F_GET_NEXT_SEQ('CPM_OM_Out_FinNo'),'BL01' , '32MB25VQ' , NULL , 'EA',500,24000,null,F_GET_CURR_SEQ('CPM_OM_Out_Fin'));
INSERT INTO CPM_OM_Out_Fin_Det
VALUES (F_GET_NEXT_SEQ('CPM_OM_Out_FinNo'),'BL02' , '32LF550B' , NULL , 'EA',1000,22000,null,F_GET_CURR_SEQ('CPM_OM_Out_Fin'));
INSERT INTO CPM_OM_Out_Fin_Det
VALUES (F_GET_NEXT_SEQ('CPM_OM_Out_FinNo'),'BL03' , 'L32LX530H' , NULL , 'EA',500,23000,null,F_GET_CURR_SEQ('CPM_OM_Out_Fin'));

SELECT * FROM CPM_OM_Out_Fin_Det;



---------------------------------------------------------------------------------------------------------------------
--생산시 필요한 재고창고
create table PM_SM_Pro_Stock(
no number(5) primary key, -- 순번
Item_Code varchar2(12) UNIQUE NOT NULL, --품목코드
Item_Name varchar2(50) UNIQUE NOT NULL, --품목명
Standard varchar2(20), --규격
Inventory_Unit varchar2(5) DEFAULT 'EA', --재고단위
Quantity number(5), --재고 수량
CONSTRAINT FK_prostock_Item_Code FOREIGN KEY (Item_Code) 
REFERENCES SM_BIM_Ite_Reg(Item_Code) ON DELETE CASCADE
);

EXECUTE P_RESET_SEQ('SEQ_PM_SM_Pro_Stock_NO');
select SEQ_PM_SM_Pro_Stock_NO.NEXTVAL from dual;

--재고창고 데이터
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_CURR_SEQ('PM_SM_Pro_Stock'),'MT01','27inch모니터',NULL,'EA' ,12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'DT01','피카소VEGA8',NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'MT02','32inch모니터',NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'DT02','프리플로우ELITE',NULL,'EA' ,12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'MT03','43inch모니터',NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'DT03','게이밍본체PC',NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'DT04','EXKOREA',NULL,'EA',12000);

--본체 반제품
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'CASE01','슬림형본체',NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'SSD01' , '삼성전자 980 PRO',NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'GPU01' , '지포스 RTX 3060',NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'), 'CPU01' , 'AMD 라이젠5',NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'RAM01' , 'ADATA XPG DDR4-3200',NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'BOARD01' , '박격포 MAG B560M',NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'POWER01' , '시소닉 A12 STD',NULL,'EA',12000);

INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'SSD02' , '삼성전자 970 EVO',NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'GPU02' , '지포스 RTX 3070',NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'CPU02' , 'core I5-10세대',NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'RAM02' , 'KLEVV DDR4-3200',NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'BOARD02' , 'ASRock B550M',NULL,'EA',12000);


INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'CASE03' , 'ABKO NCORE',NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'HDD01' , 'WD BLUE 7200' ,NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'GPU03' , '지포스 RTX 2060' ,NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'CPU03' , 'core I5-11세대' ,NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'BOARD03' , 'GIGABYTE A320M',NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'POWER02' , 'ASUS POG Thor 850P' ,NULL,'EA',12000);

INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'HDD02' , 'Seagate BarraCuda 7200' ,NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'GPU04' , '지포스 GTX1050 Ti',NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'CPU04' , 'core I7-11세대',NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'RAM03' , '삼성 DDR4-3200' ,NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'POWER03' , '마이크로닉 Classic 2' ,NULL,'EA',12000);

--모니터 반제품
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'ADBOARD01' , '정면소켓형 AD 보드'  ,NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'INVERTER01' , 'FIF1742-01A' ,NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'SMPS01' , 'IDF060CV-S24V1',NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'LIPSBOARD01' , 'LI01' ,NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'BL01' , '32MB25VQ' ,NULL,'EA',12000);

INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'ADBOARD02' , '초소형 AD 보드' ,NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'INVERTER02' , 'TWT-122K' ,NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'SMPS02' , 'IDF100CV-S24V1' ,NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'LIPSBOARD02' , 'LI10' ,NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'BL02' , '32LF550B'  ,NULL,'EA',12000);

INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'ADBOARD03' , '2232GW AD 보드' ,NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'INVERTER03' , 'DS-1307WK' ,NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'SMPS03' , 'IDF600CV-S24V2' ,NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'LIPSBOARD03' , 'LL01'  ,NULL,'EA',12000);
INSERT INTO PM_SM_Pro_Stock
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_Stock'),'BL03' , 'L32LX530H' ,NULL,'EA',12000);


CREATE OR REPLACE TRIGGER Quantity_Upd_TRG
AFTER UPDATE ON PMM_PM_ORDER
FOR EACH ROW
BEGIN
UPDATE PM_SM_Pro_Stock
SET Quantity = Quantity + (-:old.Order_quantity+:new.Order_quantity)
WHERE item_Code = :new.item_Code;
END;
/

create table PM_SM_Pro_FinishedProduct(
no number(5) primary key, -- 순번
Item_Code varchar2(12) UNIQUE NOT NULL, --품목코드
Item_Name varchar2(50) UNIQUE NOT NULL, --품목명
Standard varchar2(20), --규격
Inventory_Unit varchar2(5) DEFAULT 'EA', --재고단위
Quantity number(5), --재고 수량
CONSTRAINT FK_product_Item_Code FOREIGN KEY (Item_Code) 
REFERENCES SM_BIM_Ite_Reg(Item_Code) ON DELETE CASCADE
);



INSERT INTO PM_SM_Pro_FinishedProduct
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_FProduct'),'PCSET01' , '사무용컴퓨터' ,NULL,'EA',100);
INSERT INTO PM_SM_Pro_FinishedProduct
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_FProduct'),'PCSET02' , '게이밍컴퓨터' ,NULL,'EA',150);
INSERT INTO PM_SM_Pro_FinishedProduct
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_FProduct'),'PCSET03' , '저사양컴퓨터' ,NULL,'EA',180);
INSERT INTO PM_SM_Pro_FinishedProduct
VALUES (F_GET_NEXT_SEQ('PM_SM_Pro_FProduct'),'PCSET04' , '최고급컴퓨터'  ,NULL,'EA',200);
















-----------------------------------------------------------------------------------------------------
----재고관리
--
--create table PM_SM_Sto_Mov_Main( --재고이동 등록 메인
--Move_Num varchar2(12) primary key, --이동번호
--Move_Date date NOT NULL, --이동일자
--Output_Business varchar2(12) NOT NULL, --출고사업장
--Output_Warehouse varchar2(12) NOT NULL, --출고창고
--Output_Place varchar2(12) NOT NULL, --출고장소
--Input_Business varchar2(12) NOT NULL, --입고사업장
--Input_Warehouse varchar2(12) NOT NULL, --입고창고
--Input_Place varchar2(12) NOT NULL, --입고장소
--Note varchar2(200), --비고
--constraint fk_code_mov_bus_out FOREIGN KEY(Output_Business)
--REFERENCES SM_CRI_Wor_Reg(Workplace_Code) on delete cascade,
--constraint fk_code_mov_war_out FOREIGN KEY(Output_Warehouse)
--REFERENCES SM_BIM_Hou_Reg(House_Code) on delete cascade,
--constraint fk_code_mov_pla_out FOREIGN KEY(Output_Place)
--REFERENCES SM_BIM_Wor_Reg(Location_Code) on delete cascade,
--constraint fk_code_mov_bus_in FOREIGN KEY(Input_Business)
--REFERENCES SM_CRI_Wor_Reg(Workplace_Code) on delete cascade,
--constraint fk_code_mov_war_in FOREIGN KEY(Input_Warehouse)
--REFERENCES SM_BIM_Hou_Reg(House_Code) on delete cascade,
--constraint fk_code_mov_pla_in FOREIGN KEY(Input_Place)
--REFERENCES SM_BIM_Wor_Reg(Location_Code) on delete cascade
--);
--
----담당자삭제
--
----EXECUTE P_RESET_SEQ3('seq_PM_SM_Sto_Mov_Main_no');
--
--insert into PM_SM_Sto_Mov_Main(
--Move_Num, --이동번호
--Move_Date, --이동일자
--Output_Business, --출고사업장
--Output_Warehouse, --출고창고
--Output_Place, --출고장소
--Input_Business, --입고사업장
--Input_Warehouse, --입고창고
--Input_Place, --입고장소
--Note) --비고
--values (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'), '2021-05-20', '1000' , 'M200', 'M201', '2000' , 'M200','M201', '비고');
--insert into PM_SM_Sto_Mov_Main 
--values (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'), '2021-05-21', '2000' , 'M100', 'M202', '1000' , 'M200','M201', '비고');
--insert into PM_SM_Sto_Mov_Main 
--values (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'), '2021-05-21', '1000' , 'M200', 'M202', '2000' , 'M200','M201', '비고');
--insert into PM_SM_Sto_Mov_Main 
--values (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'), '2021-05-21', '2000' , 'M100', 'M202', '1000' , 'M200','M201', '비고');
--insert into PM_SM_Sto_Mov_Main 
--values (F_GET_NEXT_SEQ('PM_SM_Sto_Mov_Main'), '2021-05-21', '1000' , 'M200', 'M201', '1000' , 'M200','M201', '비고');
--
--create table PM_SM_Sto_Mov_Sub( --재고이동 등록 서브
--NO varchar2(12) primary key,
--Move_Num varchar2(12) NOT NULL, --이동번호
--Item_Code varchar2(12) NOT NULL, --품번
--Item_Name varchar2(50) NOT NULL, --품명
--Standard varchar2(20), --규격
--Inventory_Unit varchar2(5), --단위
--Move_Quantity number(5) NOT NULL, --이동수량
--Move_Price number(10) NOT NULL, --이동단가
--
--constraint fk_code_mov_pro_num FOREIGN KEY(Move_Num)
--REFERENCES PM_SM_Sto_Mov_Main(Move_Num)on delete cascade
--);
--
--select seq_PM_SM_Sto_Mov_Main_no.NEXTVAL from dual;
--
--
--CREATE OR REPLACE PROCEDURE P_RESET_SEQ3(SEQ_NAME IN VARCHAR2)
--IS
--    v_cnt NUMBER:=1;
--    V_ROWCOUNT NUMBER;
--    
--BEGIN
--    SELECT COUNT(1) INTO V_CNT
--    FROM PM_SM_Sto_Mov_Main;
--    V_ROWCOUNT := SQL%ROWCOUNT;
--    DBMS_OUTPUT.PUT_LINE(v_cnt);
----    DBMS_OUTPUT.PUT_LINE(V_ROWCOUNT);
--
----    EXECUTE IMMEDIATE 'SELECT ' || SEQ_NAME || '.CURRVAL FROM DUAL ' 
----    INTO V_CNT;
--
--    EXECUTE IMMEDIATE 'ALTER SEQUENCE ' || SEQ_NAME || ' INCREMENT BY -' || V_CNT ;
--
--    EXECUTE IMMEDIATE 'SELECT ' || SEQ_NAME || '.NEXTVAL FROM DUAL '
--    INTO V_CNT;
--      
--    EXECUTE IMMEDIATE 'ALTER SEQUENCE ' || SEQ_NAME || ' INCREMENT BY 1';
--END;
--/
--
----LOT 삭제
--EXECUTE P_RESET_SEQ('NO_seq');
--EXECUTE P_RESET_SEQ3('seq_PM_SM_Sto_Mov_Main_no');
--select NO_SEQ.NEXTVAL from dual;
--
--
--insert into PM_SM_Sto_Mov_Sub(
--NO,
--Move_Num, --이동번호
--Item_Code, --품번
--Item_Name, --품명
--Standard, --규격
--Inventory_Unit, --단위
--Move_Quantity, --이동수량
--Move_Price --이동단가
--) 
--values (F_GET_CURR_SEQ('NO'), 'MV2106000042', 'CASE01', '슬림형본체' , '규격' , 'EA', 20 , 1000);
--insert into PM_SM_Sto_Mov_Sub
--values (F_GET_NEXT_SEQ('NO'), 'MV2106000043', 'HDD01 ', 'WD BLUE 7200' , '규격' , 'EA', 50 , 250);
--insert into PM_SM_Sto_Mov_Sub
--values (F_GET_NEXT_SEQ('NO'), 'MV2106000044', 'SSD03', '삼성전자 870 EVO' , '규격' , 'EA', 100 , 200);
--insert into PM_SM_Sto_Mov_Sub
--values (F_GET_NEXT_SEQ('NO'), 'MV2106000045', 'GPU03', '지포스 RTX 2060' , '규격' , 'EA', 10 , 1000);
--insert into PM_SM_Sto_Mov_Sub
--values (F_GET_NEXT_SEQ('NO'), 'MV2106000046', 'RAM01', 'ADATA XPG DDR4-3200' , '규격' , 'EA', 300 , 3000);
--
--SELECT * FROM PM_SM_Sto_Mov_Sub;
--SELECT * FROM PM_SM_Sto_Mov_Main;
--
--create table PM_SM_Sto_Adj_Main( --기초재고/재고조정등록 메인
--Mod_Num varchar2(12) primary key, --조정번호
--Mod_Date date NOT NULL, --조정일자
--Warehouse varchar2(12) NOT NULL, --창고
--Place varchar2(12) NOT NULL, --장소
--Customer varchar2(50), --거래처
--Kind varchar2(30) NOT NULL, --조정종류(기초,입고,출고)
--Note varchar2(200), --비고
--
--constraint fk_code_war FOREIGN KEY(Warehouse)
--REFERENCES SM_BIM_Hou_Reg(House_Code)on delete cascade,
--constraint fk_code_pla FOREIGN KEY(Place)
--REFERENCES SM_BIM_Wor_Reg(Location_Code)on delete cascade,
--constraint fk_code_cus FOREIGN KEY(Customer)
--REFERENCES SM_BIM_Gen_Cus_Reg(General_Customer_Code)on delete cascade
--);
----담당자 삭제
--
--EXECUTE P_RESET_SEQ('seq_SM_BIM_Gen_Cus_Reg_no');
--EXECUTE P_RESET_SEQ('seq_PM_SM_Sto_Adj_Main_no');
--select seq_PM_SM_Sto_Adj_Main_no.NEXTVAL from dual;
--select seq_SM_BIM_Gen_Cus_Reg_no.NEXTVAL from dual;
--
--insert into PM_SM_Sto_Adj_Main(
--Mod_Num, --조정번호
--Mod_Date, --조정일자
--Warehouse, --창고
--Place, --장소
--Customer, --거래처
--Kind, --조정종류
--Note) --비고
--values(F_GET_CURR_SEQ('PM_SM_Sto_Adj_Main'), '2021-04-21' , 'M100', 'M201' , F_GET_CURR_SEQ('SM_BIM_Gen_Cus_Reg') , '입고', '비고');
--insert into PM_SM_Sto_Adj_Main
--values(F_GET_NEXT_SEQ('PM_SM_Sto_Adj_Main'), '2021-04-27' , 'M200', 'M202' , F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg') , '출고', '비고');
--insert into PM_SM_Sto_Adj_Main
--values(F_GET_NEXT_SEQ('PM_SM_Sto_Adj_Main'), '2021-05-01' , 'M100', 'M202' , F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg') , '출고', '비고');
--insert into PM_SM_Sto_Adj_Main
--values(F_GET_NEXT_SEQ('PM_SM_Sto_Adj_Main'), '2021-05-11' , 'M200', 'M202' , F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg') , '출고', '비고');
--insert into PM_SM_Sto_Adj_Main
--values(F_GET_NEXT_SEQ('PM_SM_Sto_Adj_Main'), '2021-05-13' , 'M100', 'M201' ,F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg') , '기초', '비고');
--
--create table PM_SM_Sto_Adj_Sub( --기초재고/재고조정등록 서브
--No varchar2(12) primary key,
--Mod_Num varchar2(12) , --조정번호
--Item_Code varchar2(12) NOT NULL, --품번
--Item_Name varchar2(50) NOT NULL, --품명
--Standard varchar2(20), --규격
--Inventory_Unit varchar2(5), --단위
--Mod_Quantity number(5) NOT NULL, --조정수량
--Price number(10) NOT NULL, --단가
--
--constraint fk_code_mod_num FOREIGN KEY(Mod_Num)
--REFERENCES PM_SM_Sto_Adj_Main(Mod_Num)on delete cascade,
--constraint fk_code_pro_num FOREIGN KEY(Item_Code)
--REFERENCES SM_BIM_Ite_Reg(Item_Code)on delete cascade
--);
--
----LOT 삭제
--
--EXECUTE P_RESET_SEQ('NO_seq');
--EXECUTE P_RESET_SEQ2('seq_PM_SM_Sto_Adj_Main_no');
--select NO_SEQ.NEXTVAL from dual;
--select seq_PM_SM_Sto_Adj_Main_no.NEXTVAL from dual;
--
--
--SELECT * FROM PM_SM_Sto_Adj_Sub;
--SELECT * FROM PM_SM_Sto_Adj_Main;
--
--insert into PM_SM_Sto_Adj_Sub(
--No,
--Mod_Num, --조정번호
--Item_Code, --품번
--Item_Name, --품명
--Standard, --규격
--Inventory_Unit, --단위
--Mod_Quantity, --조정수량
--Price --단가
--) 
--values(F_GET_CURR_SEQ('NO'),F_GET_CURR_SEQ('PM_SM_Sto_Adj_Main'),'CASE01', '슬림형본체' , '규격', 'EA', 10, 5000);
--insert into PM_SM_Sto_Adj_Sub
--values(F_GET_NEXT_SEQ('NO'),F_GET_NEXT_SEQ('PM_SM_Sto_Adj_Main'),'RAM01', 'ADATA XPG DDR4-3200' , '규격', 'EA', 100, 45000);
--insert into PM_SM_Sto_Adj_Sub
--values(F_GET_NEXT_SEQ('NO'),F_GET_NEXT_SEQ('PM_SM_Sto_Adj_Main'),'BOARD03', 'GIGABYTE A320M' , '규격', 'EA', 5, 5000);
--insert into PM_SM_Sto_Adj_Sub
--values(F_GET_NEXT_SEQ('NO'),F_GET_NEXT_SEQ('PM_SM_Sto_Adj_Main'),'POWER03', '마이크로닉 Classic 2' , '규격', 'EA', 50, 3000);
--insert into PM_SM_Sto_Adj_Sub
--values(F_GET_NEXT_SEQ('NO'),F_GET_NEXT_SEQ('PM_SM_Sto_Adj_Main'),'GPU02', '지포스 RTX 3070' , '규격', 'EA', 200, 1000);
--
--select * from PM_SM_Sto_Adj_Main;
--select * from PM_SM_Sto_Adj_sub;
--
--create table PM_SM_Set_Man_Main( --SET품 수불조정등록 모품목
--Mod_Num varchar2(12) primary key, --조정번호
--Mod_Date date, --조정일자
--Set_Item_Code varchar2(12), --SET모품목 품번
--Item_Name varchar2(50), --품명
--Standard varchar2(20), --규격
--Inventory_Unit varchar2(5), --단위
--Input_Quantity number(5), --입고조정수량
--Price number(10), --단가
--
--
--constraint fk_code_set_pro_num FOREIGN KEY(Set_Item_Code)
--REFERENCES SM_BIM_SET_Reg (SET_Code)
--);
--EXECUTE P_RESET_SEQ('seq_PM_SM_Set_Man_Main_no');
--select seq_PM_SM_Set_Man_Main_no.NEXTVAL from dual;
--
--insert into PM_SM_Set_Man_Main
--values(F_GET_CURR_SEQ('PM_SM_Set_Man_Main'), '2021-05-12', 'PC10', '데스크탑PC', '규격', 'SET', 300 , 15000);
--
--SELECT * FROM PM_SM_Set_Man_Main;
--
--
--create table PM_SM_Set_Man_Sub( --SET품 수불조정등록 자품목
--Mod_Num varchar2(12), --조정번호
--No varchar2(12) primary key,
--Component_Num varchar2(12), --SET자품목 품번
--Item_Name varchar2(50), --품명
--Standard varchar2(20), --규격
--Inventory_Unit varchar2(5), --단위
--Output_Quantity number(5), --출고조정수량
--
--constraint fk_code_set_mod_num FOREIGN KEY(Mod_Num)
--REFERENCES PM_SM_Set_Man_Main(Mod_Num),
--constraint fk_code_set_com_num FOREIGN KEY(Component_Num)
--REFERENCES SM_BIM_Com_Reg(Components_Code)
--);  
--
----LOT 삭제
--
--EXECUTE P_RESET_SEQ('seq_PM_SM_Set_Man_Main_no');
--select seq_PM_SM_Set_Man_Main_no.NEXTVAL from dual;
--
--insert into PM_SM_Set_Man_Sub
--values(F_GET_CURR_SEQ('PM_SM_Set_Man_Main'), '3' ,'SSD01' , '삼성전자 980 PRO' , '규격', 'EA', 600);
--insert into PM_SM_Set_Man_Sub
--values(F_GET_CURR_SEQ('PM_SM_Set_Man_Main'), '4' , 'GPU01' , '지포스 RTX 3060' , '규격', 'EA', 300);
--
--SELECT * FROM PM_SM_Set_Man_Sub;
--
create table PM_SM_Ite_Pri(  -- 품목단가등록
No              varchar2(12) primary key, 
Item_Code       varchar2(12), --품번
Item_Name       varchar2(50), --품명
Standard        varchar2(20), --규격
Inventory_Unit  varchar2(5), --단위
Purchase_Price  number(10), --구매 단가
Sales_Price     number(10), --판매 단가 

constraint PMSMItePri_ItemCode_FK FOREIGN KEY(Item_Code)
REFERENCES SM_BIM_Ite_Reg(Item_Code));

insert into PM_SM_Ite_Pri(
No,
Item_Code, --품번
Item_Name, --품명
Standard, --규격
Inventory_Unit, --단위
Purchase_Price, --구매 단가
Sales_Price) --판매 단가
values('1','GPU04', '지포스 GTX1050 Ti', '규격' , 'EA', 19200 , null);
insert into PM_SM_Ite_Pri
values('2','CPU03', 'core I5-11세대', '규격' , 'EA', 27200 , 38000);

---------------------------------------------------------------------
-----창고코드 함수
create or replace function func_hou_reg(
    IN_House_Code IN SM_BIM_HOU_REG.House_Code%TYPE
)
return varchar2
is
    OUT_House_Name SM_BIM_Hou_Reg.House_Name%TYPE;
begin
SELECT House_Name into OUT_House_Name
        FROM SM_BIM_HOU_REG
        WHERE House_Code = IN_House_Code;
return OUT_House_Name; 
end func_hou_reg;
/

--select func_hou_reg('M100') from dual;
select func_hou_reg(House_Code) from SM_BIM_HOU_REG;
---------------------------------------------------------------------
-----장소코드 함수
create or replace function func_Wor_Reg(
    IN_Location_Code  IN SM_BIM_Wor_Reg.Location_Code%TYPE
)
return varchar2
is
    OUT_Location_Name SM_BIM_Wor_Reg.Location_Name%TYPE;
begin
SELECT Location_Name into OUT_Location_Name
        FROM SM_BIM_Wor_Reg
        WHERE Location_Code  = IN_Location_Code ;
return OUT_Location_Name; 
end func_Wor_Reg;
/

--select func_Wor_Reg('M100') from dual;
select func_Wor_Reg(Location_Code) from SM_BIM_Wor_Reg;

---------------------------------------------------------------------
-----생산공정코드 함수
create or replace function func_pro_reg(
    IN_Process_Code  IN SM_BIM_Pro_Reg.Process_Code%TYPE
)
return varchar2
is
    OUT_Process_Name SM_BIM_Pro_Reg.Process_Name%TYPE;
begin
SELECT Process_Name into OUT_Process_Name
        FROM SM_BIM_Pro_Reg
        WHERE Process_Code = IN_Process_Code;
return OUT_Process_Name; 
end func_pro_reg;
/

--select func_pro_reg('L100') from dual;
select func_pro_reg(Process_Code ) from SM_BIM_Pro_Reg;
---------------------------------------------------------------------
-----생산작업장코드 함수
create or replace function func_Pro_Wor_Reg(
    IN_Workplace_Code   IN SM_BIM_Pro_Wor_Reg.Workplace_Code %TYPE
)
return varchar2
is
    OUT_Workplace_Name SM_BIM_Pro_Wor_Reg.Workplace_Name %TYPE;
begin
SELECT Workplace_Name  into OUT_Workplace_Name 
        FROM SM_BIM_Pro_Wor_Reg
        WHERE Workplace_Code  = IN_Workplace_Code ;
return OUT_Workplace_Name ; 
end func_Pro_Wor_Reg;
/

--select func_Pro_Wor_Reg('L101') from dual;
select func_Pro_Wor_Reg(Workplace_Code) from SM_BIM_Pro_Wor_Reg;

---------------------------------------------------------------------
-----외주공정코드 함수
create or replace function func_Out_Reg(
    IN_Outsourcing_Code   IN SM_BIM_Out_Reg.Outsourcing_Code%TYPE
)
return varchar2
is
    OUT_Outsourcing_Name SM_BIM_Out_Reg.Outsourcing_Name%TYPE;
begin
SELECT Outsourcing_Name  into OUT_Outsourcing_Name 
        FROM SM_BIM_Out_Reg 
        WHERE Outsourcing_Code = IN_Outsourcing_Code;
return OUT_Outsourcing_Name; 
end func_Out_Reg;
/

--select func_Out_Reg('P100') from dual;
select func_Out_Reg(Outsourcing_Code) from SM_BIM_Out_Reg;
---------------------------------------------------------------------
-----외주작업장코드 함수
create or replace function func_Out_Wor_Reg(
    IN_Workplace_Code IN SM_BIM_Out_Wor_Reg.Workplace_Code %TYPE
)
return varchar2
is
    OUT_Workplace_Name SM_BIM_Out_Wor_Reg.Workplace_Name %TYPE;
begin
SELECT Workplace_Name   into OUT_Workplace_Name 
        FROM SM_BIM_Out_Wor_Reg 
        WHERE Workplace_Code  = IN_Workplace_Code;
return OUT_Workplace_Name; 
end func_Out_Wor_Reg;
/

--select func_Out_Wor_Reg('P101') from dual;
select func_Out_Wor_Reg(Workplace_Code) from SM_BIM_Out_Wor_Reg;

-----품목코드 함수
--CREATE OR REPLACE TYPE ITEM_TYPE AS OBJECT (
--Item_Code varchar2(12),
--Item_Name varchar2(50), 
--Standard varchar2(20),
--Inventory_Unit varchar2(5)
--);

--CREATE OR REPLACE TYPE ITEM_TABLE AS TABLE OF ITEM_TYPE;
--
--create or replace function func_Ite_Reg
----(
----    IN_Item_Code IN SM_BIM_Ite_Reg.Item_Code %TYPE
----)
--return ITEM_TABLE
--is
--    v_list ITEM_TABLE;
--begin
--
--SELECT ITEM_TYPE(I.Item_Code,I.Item_Name,I.Standard,I.Inventory_Unit)
--BULK COLLECT INTO v_list
--        FROM SM_BIM_Ite_Reg I;
----        where I.item_code = in_item_code;
--return v_list; 
--end func_Ite_Reg;
--/
--
--SELECT * FROM TABLE(func_Ite_Reg('CASE01'));
--SELECT * FROM TABLE(func_Ite_Reg(30));
--SELECT * FROM TABLE(func_Ite_Reg);
--select func_Ite_Reg('P101') from dual;
------------------------------------------------------------------------------------------------------------------
--테이블 결과 출력
SELECT * FROM CPM_BIM_DEF_GROUP;
SELECT * FROM CPM_BIM_OUT_PRI;
SELECT * FROM PM_SM_ITE_PRI;
SELECT * FROM PM_SM_Pro_FinishedProduct;
SELECT * FROM PM_SM_Pro_Stock;
SELECT * FROM CPM_PM_Pro_Mat_For;
SELECT * FROM CPM_PM_Pro_Mat_For_Det;
SELECT * FROM CPM_PM_Ope_Per_Reg_Det;
SELECT * FROM CPM_PM_Ope_Per_Reg;
SELECT * FROM CPM_OM_Out_Fin_Det;
SELECT * FROM CPM_OM_Out_Fin;
SELECT * FROM CPM_OM_Out_Mat_For_Det;
SELECT * FROM CPM_OM_Out_Mat_For;
SELECT * FROM CPM_OM_Out_Per_Reg_Det;
SELECT * FROM CPM_OM_Out_Per_Reg;
SELECT * FROM CPM_BIM_BOM_Reg;
SELECT * FROM CPM_BIM_Def_Typ_Reg;
SELECT * FROM CPM_PM_Pro_Pla_Reg;
SELECT * FROM PMM_PM_MRP;
SELECT * FROM PMM_PM_ORDER;
SELECT * FROM PMM_PM_MPS_OS;
SELECT * FROM PMM_PM_MPS;
SELECT * FROM CSM_SM_COR_Reg;
SELECT * FROM CSM_SM_Rel_Pro;
--SELECT * FROM CSM_SM_Req_Reg;
SELECT * FROM CSM_SM_Ord_Reg;
--SELECT * FROM CSM_SM_Est_Reg;
SELECT * FROM SM_CRI_Emp_Reg;
SELECT * FROM SM_CRI_Com_Reg;
SELECT * FROM SM_CRI_Dep_Reg;
SELECT * FROM SM_BIM_Pro_Line_Reg;
SELECT * FROM SM_BIM_Gen_Cus_Reg;
SELECT * FROM SM_BIM_Ins_Typ;
SELECT * FROM SM_BIM_Log_Man;
SELECT * FROM SM_BIM_Out_Item_Cus_IN;
SELECT * FROM SM_BIM_Out_Item_Cus;
SELECT * FROM SM_BIM_Out_Wor_Reg;
SELECT * FROM SM_BIM_Com_Reg;
SELECT * FROM SM_BIM_SET_Reg;
SELECT * FROM SM_BIM_Ite_Reg;
SELECT * FROM SM_BIM_Ite_gro_Reg;
SELECT * FROM SM_BIM_Sal_Pla_Reg;
SELECT * FROM SM_CRI_Sec_Reg;
SELECT * FROM SM_CRI_Sys_Env_set;
SELECT * FROM SM_CRI_Wor_Reg;
SELECT * FROM SM_CRI_Zip;
SELECT * FROM SM_BIM_Hou_Reg;
SELECT * FROM SM_BIM_Pro_Reg;
SELECT * FROM SM_BIM_Out_Reg;
SELECT * FROM SM_BIM_Wor_Reg;
SELECT * FROM SM_BIM_Pro_Wor_Reg;
SELECT * FROM SM_BIM_Out_Wor_Reg;

-------------------------------------------------------------------------------------
--뷰 생성

--생산자재 디테일부(자재출고)
CREATE OR REPLACE VIEW RELEASEDETAILVIEW AS 
select distinct(bom.item_code) as item_Code, bom.item_name, bom.standard, bom.inventory_unit as inventory_unit, reg.IndicatedQuantity, bom.loss, reg.workordernumber
            from CPM_PM_OPE_PER_REG reg, CPM_PM_Pro_Mat_For_Det det,cpm_bim_bom_reg bom
            where reg.item_code = bom.parent_item_code 
                order by reg.workordernumber;

SELECT * FROM releasedetailview;

--작업실적등록 상단부

CREATE OR REPLACE VIEW RegistOperationPerformanceVIEW AS
select opr.workordernumber,opr.materialforwardingstatus,func_pro_wor_reg(opr.workplace_code) as workplaceCode,opr.instructiondate ,opr.duedate,
opr.item_code,opr.item_name,opr.standard,opr.inventory_unit,opr.indicatedquantity, sum(oprd.performancequantity) as sumPerformancequantity,
(opr.indicatedquantity-sum(oprd.performancequantity)) as remainingPerformance,opr.status,opr.worksortation,opr.inspection,opr.productionfacility,opr.taskteam,opr.note
from CPM_PM_Ope_Per_Reg opr left join CPM_PM_Ope_Per_Reg_det oprd 
on opr.workordernumber = oprd.workordernumber
where (status = '확정' or status = '마감')
group by  opr.workordernumber,opr.materialforwardingstatus,opr.workplace_code,opr.instructiondate,opr.duedate,
opr.item_code,opr.item_name,opr.standard,opr.inventory_unit,opr.indicatedquantity,opr.status,opr.worksortation,opr.inspection,opr.productionfacility,opr.taskteam,opr.note
order by opr.workordernumber;

SELECT * FROM RegistOperationPerformanceVIEW;

--작업실적등록 세부사항
CREATE OR REPLACE VIEW RegOpePerformanceDetailVIEW AS
SELECT opNumber, materialUseStatus, performanceDate, func_pro_reg(process_code) as processCode, func_pro_wor_reg(workplace_code) as workplaceCode, sortation, performanceQuantity, inspection,house_code,note, workOrderNumber 
		FROM CPM_PM_Ope_Per_Reg_Det;

SELECT * FROM RegOpePerformanceDetailVIEW 
where workordernumber = 'W02107000001';

--작업지시마감처리 세부사항
CREATE OR REPLACE VIEW OperationInsClosingDetailVIEW AS
select oprd.OPNumber,opr.instructiondate ,opr.duedate,func_pro_reg(oprd.process_code) as processCode,func_pro_wor_reg(oprd.workplace_code) as workplaceCode,opr.indicatedquantity, sum(oprd.performancequantity) as sumPerformancequantity,
(opr.indicatedquantity-sum(oprd.performancequantity)) as remainingPerformance, ir.cost as unitPrice,(opr.indicatedquantity*ir.cost) as price,opr.inspection,opr.note,opr.workordernumber
from CPM_PM_Ope_Per_Reg opr,CPM_PM_Ope_Per_Reg_det oprd,SM_BIM_Ite_Reg ir
where opr.workordernumber= oprd.workordernumber and ir.item_code = opr.item_code 
group by  oprd.OPNumber,opr.instructiondate,opr.duedate,oprd.process_code,oprd.workplace_code,opr.indicatedquantity, oprd.performancequantity,ir.cost,(opr.indicatedquantity*ir.cost),opr.inspection,opr.note,opr.workordernumber
order by oprd.OPNumber;

SELECT * FROM OperationInsClosingDetailVIEW
WHERE workordernumber = 'W02107000001';


--BOM - 외주단가등록 
CREATE OR REPLACE VIEW outPriceView AS
select out.outsourcing_code,out.outcustomer,out.startdate,out.enddate,out.item_code,out.outsourcingunitprice, ite.item_name,ite.STANDARD,ite.INVENTORY_UNIT,ite.COST
from cpm_bim_out_pri out, sm_bim_ite_reg ite
where out.item_code = ite.item_code 
order by out.outsourcing_code;

SELECT * FROM outPriceView
where outsourcing_code = 'P100';

--주계획서작성(주문)
CREATE OR REPLACE VIEW MainPlanListView AS
 select cc.Item_Code, cc.Item_Name, cc.standard, cc.Inventory_Unit,
   cc.dueDate, cc.expectedDate,
   mp.plandate, mp.plan_Quantity, mp.general_Customer_Name
   from CSM_SM_COR_Reg cc, PMM_PM_MPS mp
   where cc.dueDate = mp.plandate;
   
select * from MainPlanListView;

--주계획서작성(주문계획)
CREATE OR REPLACE VIEW MpsosListView AS
 select co.ordersNum, co.ordersdate, co.General_Customer_Code, co.Note,
   cc.Item_Code, cc.Item_Name, cc.standard, cc.Inventory_Unit,
   cc.expectedDate,cc.ordersQuantity
   from CSM_SM_Ord_Reg co, CSM_SM_COR_Reg cc
    where cc.EXPECTEDDATE=co.ORDERSDATE;

SELECT *FROM MpsosListView;

--소요량전개
CREATE OR REPLACE VIEW MrpListView AS
select bom.item_code, bom.item_name, bom.standard, bom.precisionQuantity, bom.inventory_unit,
         pm.dueDate, pm.sequence , mr.expectedDate
          from CPM_BIM_BOM_REG bom, pmm_pm_mps pm, pmm_pm_mrp mr
            where pm.item_code = bom.item_code 
            and  bom.item_code = mr.item_code;

SELECT * FROM MrpListView;

--수주등록
CREATE OR REPLACE VIEW orderCorListView AS
select ord.ordersNum,ord.ordersDate,ord.general_customer_code,cor.item_code,cor.item_name,cor.standard,cor.inventory_unit,cor.ordersquantity,cor.productprice,(cor.ordersquantity*cor.productprice) as supplyPrice,
(cor.ordersquantity*cor.productprice)*0.1 as vatPrice, (cor.ordersquantity*cor.productprice)+(cor.ordersquantity*cor.productprice)*0.1 as sumPrice,cor.duedate,cor.expecteddate from CSM_SM_Ord_Reg ORD, CSM_SM_COR_Reg COR;
       where ORD.ordersNum = COR.code;
SELECT * FROM CSM_SM_Ord_Reg;
SELECT * FROM CSM_SM_COR_Reg;
SELECT * FROM orderCorListView;

create table Menu(
menu varchar2(50),
url varchar2(50)
);


insert into Menu
values('현재고현황(재고)', '/curinvenstat.do');
insert into Menu
values('현재고현황(완제품)', '/curfinishedinvenstat.do');
insert into Menu
values('회사등록', '/regcompany.do');
insert into Menu
values('사업장등록', '/regbusiness.do');
insert into Menu
values('부서등록', '/regdepartment.do');
insert into Menu
values('사원조회', '/inquiryemployees.do');
insert into Menu
values('일반거래처등록', '/regbasicacc.do');
insert into Menu
values('품목군등록', '/regitemgroup.do');
insert into Menu
values('품목등록', '/regitem.do');
insert into Menu
values('창고등록', '/outware.do');
insert into Menu
values('물류관리내역등록', '/logistics_manage.do');
insert into Menu
values('판매계획등록', '/regsalesplan.do');
insert into Menu
values('수주등록', '/regorder.do');
insert into Menu
values('출고처리', '/forwarding.do');
insert into Menu
values('판매계획현황', '/salesplanstat.do');
insert into Menu
values('수주현황', '/orderstat.do');
insert into Menu
values('출고현황', '/releasestat.do');
insert into Menu
values('주계획작성', '/mainplan.do');
insert into Menu
values('소요량전개', '/requiredamount.do');
insert into Menu
values('발주마감처리', '/orderclosing.do');
insert into Menu
values('생산계획등록', '/proplanreg.do');
insert into Menu
values('작업지시등록', '/regoperins.do');
insert into Menu
values('작업지시확정', '/comoperins.do');
insert into Menu
values('생산자재출고', '/prometfor.do');
insert into Menu
values('작업실적등록', '/regoperperf.do');
insert into Menu
values('작업지시마감처리', '/operinsclo.do');
insert into Menu
values('외주발주등록', '/regoutsourcing.do');
insert into Menu
values('외주발주확정', '/comoutsourcing.do');
insert into Menu
values('외주자재출고', '/outrelease.do');
insert into Menu
values('외주실적등록', '/regoutper.do');
insert into Menu
values('외주마감', '/outclosing.do');
insert into Menu
values('BOM등록', '/regbom.do');
insert into Menu
values('BOM정전개', '/rightbom.do');
insert into Menu
values('BOM역전개', '/reservebom.do');
insert into Menu
values('외주단가등록', '/outprice.do');
insert into Menu
values('불량유형등록', '/deftype.do');
select *
from Menu;

select url
		  from Menu
		  where menu = '현재고현황(재고)';
-----------------------------------------------------------------------------------------------------------
commit;

