--system/oracle에서 생성
create user erp_vietnam identified by erp_vietnam;
 grant create public database link to erp_admin;
 grant connect, resource to erp_vietnam;

create public database link dblk_erp
connect to erp_admin
identified by erp_admin
using 'ERP_DB';

--tnsnames.ora에 등록
--ERP_DB =
--  (DESCRIPTION =
--    (ADDRESS = (PROTOCOL = TCP)(HOST = localhost)(PORT = 1521))
--    (CONNECT_DATA =
--      (SERVER = DEDICATED)
--      (SERVICE_NAME = orcl)
--    )
--  )

----------------------------------------------------------------
--erp_vietnam/erp_vietnam에서 생성
SET SERVEROUTPUT ON;
DROP TABLE CPM_PM_Pro_Pla_Reg_vietnam;
DROP TABLE Pla_Reg_vietnam_erp_admin_IF;
drop table CPM_BIM_DEF_GROUP;
drop table CPM_BIM_OUT_PRI;
drop table CPM_BIM_BOM_Reg;
drop table CPM_BIM_Def_Typ_Reg;

DROP TABLE SM_CRI_Emp_Reg;
DROP TABLE SM_CRI_Com_Reg;
drop table SM_CRI_Dep_Reg;
drop table SM_BIM_Pro_Line_Reg;
drop table SM_BIM_Gen_Cus_Reg;
drop table SM_BIM_Ins_Typ;
drop table SM_BIM_Log_Man;
drop table SM_BIM_Out_Item_Cus_IN;
drop table SM_BIM_Out_Item_Cus;
DROP TABLE SM_BIM_Com_Reg;
drop table SM_BIM_SET_Reg;
drop table SM_BIM_Ite_Reg;
drop table SM_BIM_Ite_gro_Reg;
drop table SM_BIM_Sal_Pla_Reg;
drop table SM_CRI_Sec_Reg;
drop table SM_CRI_Sys_Env_set;
DROP TABLE SM_CRI_Wor_Reg;
drop table SM_CRI_Zip;

drop table SM_BIM_Hou_Reg;
drop table SM_BIM_Pro_Reg;
drop table SM_BIM_Out_Wor_Reg;
drop table SM_BIM_Out_Reg;
drop table SM_BIM_Wor_Reg;
drop table SM_BIM_Pro_Wor_Reg;


DROP SEQUENCE NO_seq;
DROP SEQUENCE SEQ_seq;
DROP SEQUENCE seq_SM_BIM_Gen_Cus_Reg_no;
DROP SEQUENCE seq_SM_BIM_Sal_Pla_Reg_no;
DROP SEQUENCE seq_PM_SM_Pro_Stock_no;
DROP SEQUENCE seq_PM_SM_Sto_Mov_Main_no;
DROP SEQUENCE seq_PM_SM_Sto_Adj_Main_no;
DROP SEQUENCE seq_PM_SM_Set_Man_Main_no;
DROP SEQUENCE seq_CPM_PM_Pro_Pla_Reg_no;
DROP SEQUENCE seq_CPM_PM_Pro_Mat_For_Det_no;
DROP SEQUENCE seq_CPM_PM_Ope_Per_Reg_no;
DROP SEQUENCE seq_CPM_PM_Ope_Per_Reg_Det_no;
DROP SEQUENCE seq_CPM_OM_Out_Fin_no;
DROP SEQUENCE seq_CPM_OM_Out_FinNo_no;  
DROP SEQUENCE seq_CPM_BIM_BOM_Reg_no;
DROP SEQUENCE seq_PM_SM_Pro_FProduct_no;

--DROP TRIGGER trg_operation_nodml;
--drop trigger trg_outsourcing_nodml;
drop trigger trg_ope_out_nodml;


DROP PROCEDURE P_RESET_SEQ;
DROP PROCEDURE P_RESET_SEQ1;
DROP PROCEDURE P_RESET_SEQ2;
--DROP PROCEDURE P_RESET_SEQ3;

drop function  F_GET_NEXT_SEQ;
drop function  F_GET_CURR_SEQ;
drop function  func_hou_reg;
drop function  func_Wor_Reg;
drop function  func_pro_reg;
drop function  func_Pro_Wor_Reg;
drop function  func_Out_Reg;
drop function  func_Out_Wor_Reg;
--drop function  func_Ite_Reg;

--NO 자동생성 시퀀스
CREATE SEQUENCE NO_seq START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
-- 예시 INSERT INTO tmp values(tmp_seq.NEXTVAL, 'tmptmp');
--순번 sequence 자동생성 시퀀스
CREATE SEQUENCE SEQ_seq START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_SM_BIM_Gen_Cus_Reg_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_SM_BIM_Sal_Pla_Reg_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
--CREATE SEQUENCE seq_CSM_SM_Est_Reg_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
--CREATE SEQUENCE seq_CSM_SM_Ord_Reg_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
--CREATE SEQUENCE seq_CSM_SM_Req_Reg_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
--CREATE SEQUENCE seq_CSM_SM_Rel_Pro_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
--CREATE SEQUENCE seq_PMM_PM_MPS_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
--CREATE SEQUENCE seq_PMM_PM_MPS_OS_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
--CREATE SEQUENCE seq_PMM_PM_ORDER_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
--CREATE SEQUENCE seq_PMM_PM_CM_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
--CREATE SEQUENCE seq_PMM_PM_RP_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
--CREATE SEQUENCE seq_PMM_PM_RP_DEAD_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
--CREATE SEQUENCE seq_PMM_PM_RRR_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
--CREATE SEQUENCE seq_PMM_PM_RRR_CHECK_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_PM_SM_Pro_Stock_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_PM_SM_Sto_Mov_Main_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_PM_SM_Sto_Adj_Main_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_PM_SM_Set_Man_Main_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_PM_SM_Pro_FProduct_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_CPM_PM_Pro_Pla_Reg_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_CPM_PM_Pro_Mat_For_Det_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;

CREATE SEQUENCE seq_CPM_PM_Ope_Per_Reg_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_CPM_PM_Ope_Per_Reg_Det_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_CPM_OM_Out_Fin_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_CPM_OM_Out_FinNo_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;
CREATE SEQUENCE seq_CPM_BIM_BOM_Reg_no START WITH 1 INCREMENT BY 1 MAXVALUE 9999 MINVALUE 1 CYCLE NOCACHE;


    CREATE OR REPLACE FUNCTION  F_GET_NEXT_SEQ (p_flag varchar2) 
    return varchar2
    IS
    v_next_no varchar2(200);
    BEGIN
        v_next_no := null;
        IF p_flag = 'NO' THEN
            SELECT
                    LPAD(NO_seq.NEXTVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'SEQ' THEN
            SELECT
                    LPAD(SEQ_seq.NEXTVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'SM_BIM_Gen_Cus_Reg' THEN
            SELECT
                    LPAD(seq_SM_BIM_Gen_Cus_Reg_no.NEXTVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'SM_BIM_Sal_Pla_Reg' THEN
             SELECT
                    'PL'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_SM_BIM_Sal_Pla_Reg_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CSM_SM_Est_Reg' THEN
             SELECT
                    'ES'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CSM_SM_Est_Reg_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CSM_SM_Ord_Reg' THEN
             SELECT
                    'SO'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CSM_SM_Ord_Reg_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CSM_SM_Req_Reg' THEN
             SELECT
                    'IR'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CSM_SM_Req_Reg_no .NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CSM_SM_Rel_Pro' THEN
             SELECT
                    'IS'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CSM_SM_Rel_Pro_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
     ELSIF p_flag = 'PMM_PM_MPS' THEN
             SELECT
                    'JS'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_MPS_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_MPS_OS' THEN
             SELECT
                    'OS'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_MPS_OS_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_ORDER' THEN
             SELECT
                    'P0'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_ORDER_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_CM' THEN
             SELECT
                    'PR'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_CM_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_RP' THEN
             SELECT
                    'RV'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_RP_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_RP_DEAD' THEN
             SELECT
                    'D0'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_RP_DEAD_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_RRR' THEN
             SELECT
                    'SR'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_RRR_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_RRR_CHECK' THEN
             SELECT
                    'C0'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_RRR_CHECK_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PM_SM_Pro_Stock' THEN
             SELECT
                    LPAD(SEQ_PM_SM_Pro_Stock_NO.NEXTVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PM_SM_Sto_Mov_Main' THEN
             SELECT
                    'MV'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PM_SM_Sto_Mov_Main_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PM_SM_Sto_Adj_Main' THEN
             SELECT
                    'IA'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PM_SM_Sto_Adj_Main_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PM_SM_Set_Man_Main' THEN
             SELECT
                    'SM'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PM_SM_Set_Man_Main_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PM_SM_Pro_FProduct' THEN
             SELECT
                    LPAD(SEQ_PM_SM_Pro_FProduct_NO.NEXTVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_PM_Pro_Pla_Reg' THEN
             SELECT
                    'PP'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CPM_PM_Pro_Pla_Reg_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_PM_Pro_Mat_For_Det' THEN
            SELECT
                    LPAD(SEQ_CPM_PM_Pro_Mat_For_Det_NO.NEXTVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_PM_Ope_Per_Reg' THEN
             SELECT
                    'W0'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CPM_PM_Ope_Per_Reg_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_PM_Ope_Per_Reg_Det' THEN
             SELECT
                    'WR'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CPM_PM_Ope_Per_Reg_Det_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_OM_Out_Fin' THEN
             SELECT
                    'OC'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CPM_OM_Out_Fin_no.NEXTVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_OM_Out_FinNo' THEN
             SELECT
                    LPAD(SEQ_CPM_OM_Out_FinNo_NO.NEXTVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_BIM_BOM_Reg' THEN
             SELECT
                    LPAD(seq_CPM_BIM_BOM_Reg_no.NEXTVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        END IF;
        RETURN v_next_no;
    END F_GET_NEXT_SEQ;
    /

 CREATE OR REPLACE FUNCTION  F_GET_CURR_SEQ (p_flag varchar2) 
    return varchar2
    IS
    v_next_no varchar2(200);
    BEGIN
        v_next_no := null;
        IF p_flag = 'NO' THEN
            SELECT
                    LPAD(NO_seq.CURRVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'SEQ' THEN
            SELECT
                    LPAD(SEQ_seq.CURRVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'SM_BIM_Gen_Cus_Reg' THEN
            SELECT
                    LPAD(seq_SM_BIM_Gen_Cus_Reg_no.CURRVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'SM_BIM_Sal_Pla_Reg' THEN
             SELECT
                    'PL'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_SM_BIM_Sal_Pla_Reg_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CSM_SM_Est_Reg' THEN
             SELECT
                    'ES'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CSM_SM_Est_Reg_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CSM_SM_Ord_Reg' THEN
             SELECT
                    'SO'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CSM_SM_Ord_Reg_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CSM_SM_Req_Reg' THEN
             SELECT
                    'IR'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CSM_SM_Req_Reg_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CSM_SM_Rel_Pro' THEN
             SELECT
                    'IS'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CSM_SM_Rel_Pro_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_MPS' THEN
             SELECT
                    'JS'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_MPS_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_MPS_OS' THEN
             SELECT
                    'OS'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_MPS_OS_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_ORDER' THEN
             SELECT
                    'P0'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_ORDER_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_CM' THEN
             SELECT
                    'PR'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_CM_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_RP' THEN
             SELECT
                    'RV'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_RP_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_RP_DEAD' THEN
             SELECT
                    'D0'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_RP_DEAD_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_RRR' THEN
             SELECT
                    'SR'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_RRR_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PMM_PM_RRR_CHECK' THEN
             SELECT
                    'C0'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PMM_PM_RRR_CHECK_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PM_SM_Pro_Stock' THEN
             SELECT
                    LPAD(SEQ_PM_SM_Pro_Stock_NO.CURRVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PM_SM_Sto_Mov_Main' THEN
             SELECT
                    'MV'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PM_SM_Sto_Mov_Main_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PM_SM_Sto_Adj_Main' THEN
             SELECT
                    'IA'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PM_SM_Sto_Adj_Main_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PM_SM_Set_Man_Main' THEN
             SELECT
                    'SM'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_PM_SM_Set_Man_Main_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'PM_SM_Pro_FProduct' THEN
            SELECT
                    LPAD(SEQ_PM_SM_Pro_FProduct_NO.CURRVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_PM_Pro_Pla_Reg' THEN
             SELECT
                    'PP'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CPM_PM_Pro_Pla_Reg_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_PM_Pro_Mat_For_Det' THEN
            SELECT
                    LPAD(SEQ_CPM_PM_Pro_Mat_For_Det_NO.CURRVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_PM_Ope_Per_Reg' THEN
             SELECT
                    'W0'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CPM_PM_Ope_Per_Reg_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_PM_Ope_Per_Reg_Det' THEN
             SELECT
                    'WR'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CPM_PM_Ope_Per_Reg_Det_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_OM_Out_Fin' THEN
             SELECT
                    'OC'||TO_CHAR(SYSDATE, 'YYMM') || LPAD(seq_CPM_OM_Out_Fin_no.CURRVAL,6,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_OM_Out_FinNo' THEN
             SELECT
                    LPAD(SEQ_CPM_OM_Out_FinNo_no.CURRVAL,5,0)
                    INTO v_next_no
                FROM DUAL;
        ELSIF p_flag = 'CPM_BIM_BOM_Reg' THEN
            SELECT
                    LPAD(SEQ_CPM_BIM_BOM_Reg_no.CURRVAL,5,0)
                    INTO v_next_no
                FROM DUAL;        
                
        END IF;
        RETURN v_next_no;
    END F_GET_CURR_SEQ;
    /

CREATE OR REPLACE PROCEDURE P_RESET_SEQ(SEQ_NAME IN VARCHAR2)
IS
    L_VAL NUMBER;
BEGIN
    EXECUTE IMMEDIATE 'SELECT ' || SEQ_NAME || '.NEXTVAL FROM DUAL ' 
    INTO L_VAL;
  
    EXECUTE IMMEDIATE 'ALTER SEQUENCE ' || SEQ_NAME || ' INCREMENT BY -' || L_VAL ;


    EXECUTE IMMEDIATE 'SELECT ' || SEQ_NAME || '.NEXTVAL FROM DUAL '
    INTO L_VAL;
      
    EXECUTE IMMEDIATE 'ALTER SEQUENCE ' || SEQ_NAME || ' INCREMENT BY 1';
    
END;
/



--EXECUTE P_RESET_SEQ('NO_seq');
--EXECUTE P_RESET_SEQ('SEQ_seq');
--EXECUTE P_RESET_SEQ('seq_SM_BIM_Gen_Cus_Reg_no');
--EXECUTE P_RESET_SEQ('seq_SM_BIM_Sal_Pla_Reg_no');
--EXECUTE P_RESET_SEQ('seq_CSM_SM_Est_Reg_no');
--EXECUTE P_RESET_SEQ('seq_CSM_SM_Ord_Reg_no');
--EXECUTE P_RESET_SEQ('seq_CSM_SM_Req_Reg_no');
--EXECUTE P_RESET_SEQ('seq_CSM_SM_Rel_Pro_no');
--EXECUTE P_RESET_SEQ('seq_PMM_PM_MPS_OS_no');
--EXECUTE P_RESET_SEQ('seq_PMM_PM_ORDER_no');
--EXECUTE P_RESET_SEQ('seq_PMM_PM_CM_no');
--EXECUTE P_RESET_SEQ('seq_PMM_PM_RP_no');
--EXECUTE P_RESET_SEQ('seq_PMM_PM_RP_DEAD_no');
--EXECUTE P_RESET_SEQ('seq_PMM_PM_RRR_no');
--EXECUTE P_RESET_SEQ('seq_PMM_PM_RRR_CHECK_no');
--EXECUTE P_RESET_SEQ('seq_PM_SM_Sto_Mov_Main_no');
--EXECUTE P_RESET_SEQ('seq_PM_SM_Sto_Adj_Main_no');
--EXECUTE P_RESET_SEQ('seq_PM_SM_Set_Man_Main_no');
--EXECUTE P_RESET_SEQ('seq_CPM_PM_Pro_Pla_Reg_no');
--EXECUTE P_RESET_SEQ('seq_CPM_PM_Ope_Per_Reg_no');
--EXECUTE P_RESET_SEQ('seq_CPM_PM_Ope_Per_Reg_Det_no');
--EXECUTE P_RESET_SEQ('seq_CPM_OM_Out_Fin_no');



--DECLARE
--    X NUMBER;
--BEGIN
--    SYS.DBMS_JOB.SUBMIT
--    (
--        job         => X
--        ,what       =>
--            'BEGIN
--                P_RESET_SEQ(''seq_SM_BIM_Gen_Cus_Reg_no'');
--                P_RESET_SEQ(''seq_SM_BIM_Sal_Pla_Reg_no'');
--                P_RESET_SEQ(''seq_CSM_SM_Est_Reg_no'');
--                P_RESET_SEQ(''seq_CSM_SM_Ord_Reg_no'');
--                P_RESET_SEQ(''seq_CSM_SM_Req_Reg_no'');
--                P_RESET_SEQ(''seq_CSM_SM_Rel_Pro_no'');
--                P_RESET_SEQ(''seq_PMM_PM_MPS_OS_no'');
--                P_RESET_SEQ(''seq_PMM_PM_ORDER_no'');
--                P_RESET_SEQ(''seq_PMM_PM_CM_no'');
--                P_RESET_SEQ(''seq_PMM_PM_RP_no'');
--                P_RESET_SEQ(''seq_PMM_PM_RP_DEAD_no'');
--                P_RESET_SEQ(''seq_PMM_PM_RRR_no'');
--                P_RESET_SEQ(''seq_PMM_PM_RRR_CHECK_no'');
--                P_RESET_SEQ(''seq_PM_SM_Sto_Mov_Main_no'');
--                P_RESET_SEQ(''seq_PM_SM_Sto_Adj_Main_no'');
--                P_RESET_SEQ(''seq_PM_SM_Set_Man_Main_no'');
--                P_RESET_SEQ(''seq_CPM_PM_Pro_Pla_Reg_no'');
--                P_RESET_SEQ(''seq_CPM_PM_Ope_Per_Reg_no'');
--                P_RESET_SEQ(''seq_CPM_PM_Ope_Per_Reg_Det_no'');
--                P_RESET_SEQ(''seq_CPM_OM_Out_Fin_no'');
--            END;'
--        ,next_date  => to_date('11-06-2021 12:40:00','mm/dd/yyyy hh24:mi:ss')
--        ,interval   => 'TRUNC(SYSDATE+1)'
--        ,no_parse   => FALSE
--    );
--    :JobNumber := to_char(X);
--END;
--/


 --확인 
--
-- SELECT no_SEQ.CURRVAL AS 번호시퀀스 FROM DUAL ; 
-- SELECT seq_SEQ.CURRVAL AS 일반거래처시퀀스 FROM DUAL ; 
-- SELECT seq_SM_BIM_Gen_Cus_Reg_no.NEXTVAL AS 일반거래처시퀀스 FROM DUAL ; 
-- SELECT seq_SM_BIM_Gen_Cus_Reg_no.CURRVAL AS 일반거래처시퀀스 FROM DUAL ; 
 
-- SELECT seq_SM_BIM_Sal_Pla_Reg_no.CURRVAL  AS 판매계획등록 FROM DUAL; 
-- SELECT seq_CSM_SM_Est_Reg_no.CURRVAL AS 견적등록 FROM DUAL ; 
-- SELECT seq_CSM_SM_Ord_Reg_no.CURRVAL AS 수주등록 FROM DUAL ; 
-- SELECT seq_CSM_SM_Req_Reg_no.CURRVAL AS 출고의뢰등록 FROM DUAL ; 
-- SELECT seq_CSM_SM_Rel_Pro_no.CURRVAL AS 출고처리 FROM DUAL ; 
-- SELECT seq_PMM_PM_MPS_OS_no.CURRVAL AS "주계획서작성(판매,주문계획)" FROM DUAL ; 
-- SELECT seq_PMM_PM_ORDER_no.CURRVAL AS "발주,발주마감처리" FROM DUAL ; 
-- SELECT seq_PMM_PM_CM_no.CURRVAL AS 청구등록 FROM DUAL ; 
-- SELECT seq_PMM_PM_RP_no.CURRVAL AS 입고처리 FROM DUAL ; 
-- SELECT seq_PMM_PM_RP_DEAD_no.CURRVAL AS 입고처리마감 FROM DUAL ; 
-- SELECT seq_PMM_PM_RRR_no.CURRVAL AS 입고의뢰등록 FROM DUAL ; 
-- SELECT seq_PMM_PM_RRR_CHECK_no.CURRVAL AS 입고의뢰등록검사 FROM DUAL ; 
-- SELECT seq_PM_SM_Sto_Mov_Main_no.CURRVAL AS "재고이동 등록 메인" FROM DUAL ; 
-- SELECT seq_PM_SM_Sto_Adj_Main_no.CURRVAL AS "기초재고/재고조정등록 메인" FROM DUAL ; 
-- SELECT seq_PM_SM_Set_Man_Main_no.CURRVAL AS "set품 수불조정등록 모품목" FROM DUAL ; 
-- SELECT seq_CPM_PM_Pro_Pla_Reg_no.CURRVAL AS 생산계획등록 FROM DUAL ; 
-- SELECT seq_CPM_PM_Ope_Per_Reg_no.CURRVAL AS 작업실적등록 FROM DUAL ; 
-- SELECT seq_CPM_PM_Ope_Per_Reg_Det_no.CURRVAL AS "작업실적등록 세부사항" FROM DUAL ; 
--  SELECT seq_CPM_OM_Out_Fin_no.CURRVAL AS 외주마감 FROM DUAL ; 
--  
--select * from user_sequences;



--우편번호
create table SM_CRI_Zip (
Zipcode varchar2(12) PRIMARY KEY, --우편번호
Road_Address varchar2(60) NOT NULL, 
Lot_Address varchar2(60) 
);

insert into SM_CRI_Zip (
Zipcode, Road_Address, Lot_Address)
values ( 
'07252' , '서울특별시 영등포구 영등포로53길 21', '서울특별시 영등포구 영등포동2가 208' );
INSERT INTO SM_CRI_Zip VALUES ( '21354' , '인청광역시 부평구 신트리로 8번길 15' , NULL);
INSERT INTO SM_CRI_Zip VALUES ( '04706' , '서울특별시 성동구 마장로23길 11-14(홍익동)' , NULL);
INSERT INTO SM_CRI_Zip VALUES ( '04705' , '서울특별시 성동구 마장로22길(홍익동)' , NULL);
INSERT INTO SM_CRI_Zip VALUES ( '21352' , '인천광역시 부평구' , NULL);
INSERT INTO SM_CRI_Zip VALUES ( '614012' , '부산광역시 부산진구 중앙동' , NULL);
INSERT INTO SM_CRI_Zip VALUES ( '689841' , '울산광역시 울주군' , NULL);
INSERT INTO SM_CRI_Zip VALUES ( '135802' , '서울특별시 강남구' , NULL);
INSERT INTO SM_CRI_Zip VALUES ( '157804' , '서울특별시 강서구' , NULL);
INSERT INTO SM_CRI_Zip VALUES ( '136857' , '서울특별시 강북구' , NULL);
INSERT INTO SM_CRI_Zip VALUES ( '120806' , '서울특별시 서대문구' , NULL);

--회사등록
Create table SM_CRI_Com_Reg ( 
Company_code varchar2(12) PRIMARY KEY,--회사코드,회사코드
Company_Name varchar2(50) NOT NULL,--회사명,회사명
Sortation varchar2(10) NOT NULL,--구분
Fiscal_Year_Number varchar2(3) NOT NULL,--회계연도_기수
Fiscal_Year_Dates date NOT NULL,--회계연도_시작
Fiscal_Year_Datee date NOT NULL,--회계연도_끝
Company_Registration_Number varchar2(13) NOT NULL UNIQUE,--사업자등록번호
Corporate_Registration_Number varchar2(15) UNIQUE,--법인등록번호
Representatives_Name varchar2(50) NOT NULL ,--대표자성명
Resident_Registration_Number varchar2(15) UNIQUE,--주민등록번호
Main_Store_Postal_Code varchar2(5) NOT NULL,--본점우편번호
Main_Store_Address varchar2(60) NOT NULL,--본점주소
Main_Branch_Number varchar2(60) NOT NULL,--본점번지
Main_Store_Tel varchar2(13),--본점전화번호
Upstate varchar2(20) NOT NULL,--업태
Industry varchar2(20) NOT NULL,--종목
Date_Of_Establishment date NOT NULL, --설립년월일
Whether_To_Use_Status varchar2(10),--사용여부
CONSTRAINT FK_Com_Reg FOREIGN KEY(Main_Store_Postal_Code)
REFERENCES SM_CRI_Zip(Zipcode) on delete cascade
);

--외국인여부 삭제,본점FAX번호 삭제
insert into SM_CRI_Com_Reg (
Company_code,--회사코드
Company_Name,--회사명
Sortation,--구분
Fiscal_Year_Number,--회계연도_기수
Fiscal_Year_Dates,--회계연도시작
Fiscal_Year_Datee,--회계연도끝
Company_Registration_Number,--사업자등록번호
Corporate_Registration_Number,--법인등록번호
Representatives_Name,--대표자성명
Resident_Registration_Number,--주민등록번호
Main_Store_Postal_Code,
Main_Store_Address,--본점주소
Main_Branch_Number,--본점번지
Main_Store_Tel,--본점전화번호
Upstate,--업태
Industry,--종목
Date_Of_Establishment, --설립년월일
Whether_To_Use_Status) --사용여부
VALUES (7000, '킹덤컴퓨터', '1', 9, '2021-01-01','2021-12-31', '107-86-12344' , '110111-0921513',
'서철민', '691028-1066939' , '07252' , '서울특별시 영등포구 영등포로53길 21','영등포동2가',
'055-335-7506', '제조, 도소매', '전자제품외', '2013-03-01', '1.사용' );


------------------------------------------------------------

--사업장 등록
create table SM_CRI_Wor_Reg ( 
Workplace_Code varchar2(12) PRIMARY KEY,--사업장코드 
Workplace_Name varchar2(50) NOT NULL UNIQUE,--사업장명
Company_Registration_Number varchar2(13) NOT NULL UNIQUE,--사업자등록번호 
Corporate_Registration_Number varchar2(15) UNIQUE ,--법인등록번호
Representatives_Name varchar2(50) NOT NULL,--대표자성명 
Workplace_Zipcode varchar2(5),--사업장우편번호 
Workplace_Address varchar2(60) NOT NULL,--사업장주소
Workplace_Number varchar2(60),--사업장번지
Workplace_Tel varchar2(13), --사업장전화번호
Upstate varchar2(20) NOT NULL, --업태 varchar2(20)으로 변경
Industry varchar2(20) NOT NULL, --종목 varchar2(20)으로 변경
Main_Store_Status varchar2(10), -- 본점여부 
CONSTRAINT FK_Wor_Reg FOREIGN KEY(Workplace_Zipcode)
REFERENCES SM_CRI_Zip(Zipcode) on delete cascade
);

--사업장 FAX번호, 관할세무서 삭제
INSERT INTO SM_CRI_Wor_Reg VALUES(
'2000' , '(주)킹덤컴퓨터 인천지사' , '121-85-35555' , '110111-0921513' , '서질풍' , '21354' ,'인천광역시 부평구 신트리로 8번길 15',
'(부평동)','051-153-5858','제조,도소매','전자제품외','2'
);

INSERT INTO SM_CRI_Wor_Reg VALUES (
'1000' , '(주)킹덤컴퓨터 본사' , '107-86-12344' , '110111-1234567' , '김철민' , '07252' , '서울특별시 영등포구 영등포로53길 21' ,
'(영등포동2가)' , '02-346-5126' , '제조,도소매' , '전자제품외' , '1'
); 

------------------------------------------------------------------
--부문등록
create table SM_CRI_Sec_Reg ( 
Sector_Code varchar2(12) PRIMARY KEY, --부문코드 
Sector_Name varchar2(50) NOT NULL  UNIQUE, --부문명
UseDate date NOT NULL--사용기간
);


insert into SM_CRI_Sec_Reg values ( '1000' , '관리부문(본사)' , '2021-01-01' );
insert into SM_CRI_Sec_Reg values ( '2000' , '영업부문(본사)' , '2021-01-01' );
insert into SM_CRI_Sec_Reg values ( '3000' , '자재부문(본사)' , '2021-01-01' );
insert into SM_CRI_Sec_Reg values ( '4000' , '생산부문(본사)' , '2021-01-01' );
insert into SM_CRI_Sec_Reg values ( '5000' , '자재부문(인천지사)' , '2021-01-01' );
insert into SM_CRI_Sec_Reg values ( '6000' , '생산부문(인천지사)' , '2021-01-01' );

---------------------------------------------------------------
--부서등록
CREATE table SM_CRI_Dep_Reg (
Department_Code varchar2(12) PRIMARY KEY, --부서코드
Department_Name varchar2(50) NOT NULL ,--부서명 
Workplace_Code varchar2(12) NOT NULL ,--사업장코드
Workplace_Name varchar2(50) NOT NULL , --사업장명
Sector_Code varchar2(12) NOT NULL, --부문코드 
Sector_Name varchar2(50) NOT NULL, --부문명
Usedate date NOT NULL,--사용기간
CONSTRAINT SMCRIDepReg_WorkplaceCode_FK FOREIGN KEY(Workplace_Code)
REFERENCES SM_CRI_Wor_Reg(Workplace_Code) on delete cascade,
CONSTRAINT SMCRIDepReg_SectorCode_FK FOREIGN KEY(Sector_Code)
REFERENCES SM_CRI_Sec_Reg(Sector_Code) on delete cascade
);

--부서등록
insert into SM_CRI_Dep_Reg 
VALUES ('1100' , '임원실' , '1000' , '(주)킹덤컴퓨터본사' , '1000' , '관리부문(본사)' , '2021-01-01' );
insert into SM_CRI_Dep_Reg 
VALUES ('1200' , '관리부' , '1000' , '(주)킹덤컴퓨터본사' , '1000' , '관리부문(본사)' , '2021-01-01' );
insert into SM_CRI_Dep_Reg 
VALUES ('2100' , '영업1부' , '1000' , '(주)킹덤컴퓨터본사' , '2000' , '영업부문(본사)' , '2021-01-01' );
insert into SM_CRI_Dep_Reg 
VALUES ('2200' , '영업2부' , '1000' , '(주)킹덤컴퓨터본사' , '2000' , '영업부문(본사)' , '2021-01-01' );
insert into SM_CRI_Dep_Reg 
VALUES ('2300' , '영업3부' , '1000' , '(주)킹덤컴퓨터본사' , '2000' , '영업부문(본사)' , '2021-01-01' );
insert into SM_CRI_Dep_Reg 
VALUES ('3100' , '자재부' , '1000' , '(주)킹덤컴퓨터본사' , '3000' , '자재부문(본사)' , '2021-01-01' );
insert into SM_CRI_Dep_Reg 
VALUES ('4100' , '생산부' , '1000' , '(주)킹덤컴퓨터본사' , '4000' , '관리부문(본사)' , '2021-01-01' );
insert into SM_CRI_Dep_Reg 
VALUES ('5100' , '자재부' , '1000' , '(주)킹덤컴퓨터본사' , '5000' , '자재부문(인천지사)' , '2021-01-01' );
insert into SM_CRI_Dep_Reg 
VALUES ('6100' , '관리부' , '1000' , '(주)킹덤컴퓨터본사' , '6000' , '생산부문(인천지사)' , '2021-01-01' );

-----------------------------------------------------------------
--사원등록
create table SM_CRI_Emp_Reg (
Employee_Code varchar2(12) PRIMARY KEY, --사원코드 
Employee_Name varchar2(50) NOT NULL, --사원명 
Department_Code varchar2(12) NOT NULL, --부서코드 
Department_Name varchar2(50) NOT NULL, --부서명 
JoinDate date NOT NULL, --입사일
ResignationDate date, --퇴사일
Emergency_Contact_Network varchar2(13) NOT NULL UNIQUE, --비상연락망
CONSTRAINT FK_DeP_Code FOREIGN KEY(Department_Code)
REFERENCES SM_CRI_Dep_Reg(Department_Code) on delete cascade
);
--사원명(영문) 삭제

insert into SM_CRI_Emp_Reg (
Employee_Code ,
Employee_Name,
Department_Code,
Department_Name,
JoinDate ,
ResignationDate,
Emergency_Contact_Network
) values ( '20130302' , '유원규', '1200','관리부', '2013-03-01', NULL , '010-1546-8761');

------------------------------------------------------------------
--시스템 환경설정
create table SM_CRI_Sys_Env_set (
Division varchar2(10), --구분
Code varchar2(12) PRIMARY KEY, --코드
Environment_Element_Name varchar2(50) NOT NULL, --환경요소명
Type_Classification varchar2(30) NOT NULL, --유형구분
Type_Settings varchar2(2) NOT NULL, --유형설정
Selection_Range varchar2(100) NOT NULL, --선택범위
Note varchar2(1000) --비고
);

insert into SM_CRI_Sys_Env_set
values ( '공통', '01', '본지점회계여부' , '여부' , '1' , '0.미사용 1.사용' , NULL );
insert into SM_CRI_Sys_Env_set
values ( '공통', '02', '수량소숫점자리수' , '자리수' , '2' , '선택범위:0~6' , NULL );
insert into SM_CRI_Sys_Env_set
values ( '공통', '05', '비율소숫점자리수' , '자리수' , '2' , '선택범위:0~6' , NULL );
insert into SM_CRI_Sys_Env_set
values ( '공통', '11', '비율%표시여부' , '여부' , '1' , '1.여 2.부' , NULL );

--------------------------------------------------------

--일반거래처등록
Create table SM_BIM_Gen_Cus_Reg (
General_Customer_Code varchar2(12) PRIMARY KEY, --거래처코드
General_Customer_Name varchar2(50) NOT NULL unique, --거래처명
General_Customer_Division varchar2(10) NOT NULL, --구분
Company_Registration_Number varchar2(13) NOT NULL UNIQUE, --사업자등록번호 
Resident_Registration_Number varchar2(15), --주민등록번호 
Representativs_Name varchar2(50) NOT NULL, --대표자성명 
Upstate varchar2(20) NOT NULL, --업태
Industry varchar2(20) NOT NULL, --종목
Zipcode varchar2(12) NOT NULL, --우편번호
Workplace_Address varchar2(60) NOT NULL, --사업장주소
GeneralCustomer_Tel varchar2(13) , --거래처전화번호
Wholesale_Retail_Business_Code varchar2(12), --주류코드
CONSTRAINT FK_Gen_Address FOREIGN KEY(Zipcode)
REFERENCES SM_CRI_Zip(Zipcode) on delete cascade
);

SELECT * FROM SM_BIM_Gen_Cus_Reg;

--SELECT F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg') FROM SM_BIM_Gen_Cus_Reg;

SELECT seq_SM_BIM_Gen_Cus_Reg_no.NEXTVAL AS 일반거래처시퀀스 FROM DUAL ; 
insert into SM_BIM_Gen_Cus_Reg 
values ( F_GET_CURR_SEQ('SM_BIM_Gen_Cus_Reg'), '(주)삼도전자', '일반' , '102-81-66312' , '670328-179321' , '서화풍',
'도, 소매', '전자제품 외', '04706' , '서울특별시 성동구 마장로23길 11-14(홍익동)' , '02-2293-9488' , NULL);
insert into SM_BIM_Gen_Cus_Reg 
values ( F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'), '(주)오라클전자', '일반' , '102-81-66313' , '670321-179322' , '김바보',
'도, 소매', '전자제품 외', '04705' , '서울특별시 성동구 마장로22길(홍익동)' , '02-2291-9486' , NULL);
insert into SM_BIM_Gen_Cus_Reg 
values ( F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'), '(주)디비컴퓨터', '일반' , '102-81-66314' , '670322-179323' , '미니언',
'도, 소매', '컴퓨터', '21352' , '인천광역시 부평구' , '02-2292-9485' , NULL);
insert into SM_BIM_Gen_Cus_Reg 
values ( F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'더지글로직스', '일반' , '102-81-66315' , '670323-179324' , '박수건',
'도, 소매', '전자제품 외', '614012' , '부산광역시 부산진구 중앙동' , '02-2294-9484' , NULL);
insert into SM_BIM_Gen_Cus_Reg 
values ( F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'),'(주)서울컴텍', '일반' , '102-81-66316' , '670324-179325' , '비전공',
'도, 소매', '전자제품 외', '689841' , '울산광역시 울주군' , '02-2295-9483' , NULL);
insert into SM_BIM_Gen_Cus_Reg 
values ( F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'), '(주)씨네스', '일반' , '102-81-66317' , '670325-179326' , '박주영',
'도, 소매', '전자제품 외', '135802' , '서울특별시 강남구' , '02-2296-9482' , NULL);
insert into SM_BIM_Gen_Cus_Reg 
values (F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'), '(주)삼화INC', '일반' , '102-81-66318' , '670326-179327' , '오라정',
'도, 소매', '전자제품 외', '157804' , '서울특별시 강서구' , '02-2297-9481' , NULL);
insert into SM_BIM_Gen_Cus_Reg 
values ( F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'), '(주)삼주전자', '일반' , '102-81-66319' , '670327-179328' , '공팔이',
'도, 소매', '전자제품 외', '136857' , '서울특별시 강북구' , '02-2298-9480' , NULL);
insert into SM_BIM_Gen_Cus_Reg 
values ( F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'), '(주)포스코전자', '일반' , '102-81-66320' , '670328-179321' , '이지훈',
'도, 소매', '전자제품 외', '120806' , '서울특별시 서대문구' , '02-2293-9487' , NULL);

--------------------------------------------------------------------
--품목군 등록
create table SM_BIM_Ite_gro_Reg (
Item_Group_Code varchar2(12) PRIMARY KEY, --품목군코드
Item_Group_Name varchar2(50) NOT NULL, --품목군명
Use_Status varchar2(10) DEFAULT '사용', -- 사용여부
Explanation varchar2(200) -- 품목군설명
);

insert into SM_BIM_Ite_gro_Reg values ( 'CA10' , '케이스', 1 , NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'BOARD' , '메인보드', 1 , NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'CPU' , 'CPU', 1 , NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'RAM' , 'RAM', 1 , NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'GPU' , 'GPU', 1 , NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'SSD' , 'SSD', 1 , NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'HDD' , 'HDD', 1 , NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'POWER' , 'POWER', 1 , NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'PC10' , '데스크탑PC', 1 , NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'AD01' , 'AD보드', 1 , NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'IVT' , '인버터' , 1 , NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'SMPS' , 'SMPS' , 1 , NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'IPBOARD' , 'IP보드' , 1 , NULL);
INSERT INTO SM_BIM_Ite_gro_Reg values ( 'BACKLIGHT' , '백라이트' , 1, NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'MONITER' , '모니터' , 1 , NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'DESKTOP' , '데스크탑' , 1 , NULL );
insert into SM_BIM_Ite_gro_Reg values ( 'KEYBOARD' , '키보드' , 1 ,NULL);
insert into SM_BIM_Ite_gro_Reg values ( 'MOUSE' , '마우스' , 1 , NULL);

------------------------------------------------------------------
--품목등록
create table SM_BIM_Ite_Reg (
Item_Code varchar2(12) PRIMARY KEY, --품목코드
Item_Name varchar2(50) UNIQUE NOT NULL, --품목명
Standard varchar2(20), --규격
Inventory_Unit varchar2(5) DEFAULT 'EA', --재고단위
Whether_LOT varchar2(10) DEFAULT '미사용', --LOT여부
SET_Item varchar2(10) DEFAULT '1.부', --SET품목
Inspection_Status varchar2(10) DEFAULT '1.부', --검사여부
Use_Status varchar2(30), -- 사용여부
LOT_Quantity number(5), --LOT수량 
Drawing_Number varchar2(5), --도면번호 
Hs_Code varchar2(12), --HSCODE
Width varchar2(100), --폭
Length varchar2(100), --길이
Height varchar2(100), --높이
Cost number(15), --원가
Item_Group_Code varchar2(12), -- 품목군등록
dailyProduction number(5),--일 생산량
Division varchar2(20) not null, --완제품/반제품/부품 구분
Notes varchar2(200),

constraint SMBIMIteReg_ItemGroupCode_FK foreign key (Item_Group_Code) references SM_BIM_Ite_gro_Reg(Item_Group_Code)
);
--제품
insert into SM_BIM_Ite_Reg VALUES
('PCSET01','사무용컴퓨터',NULL,'SET', 1 , 1 , 1 , 1 , '0' , NULL, NULL, NULL ,NULL , NULL , 409000 ,'PC10' , 100,'완제품' , NULL); 
insert into SM_BIM_Ite_Reg VALUES
('PCSET02','게이밍컴퓨터',NULL,'SET', 1 , 1 , 1 , 1 , '0' , NULL, NULL, NULL ,NULL , NULL , 3177600 ,'PC10' , 200,'완제품' , NULL); 
insert into SM_BIM_Ite_Reg VALUES
('PCSET03','저사양컴퓨터',NULL,'SET', 1 , 1 , 1 , 1 , '0' , NULL, NULL, NULL ,NULL , NULL , 229000 ,'PC10' , 300,'완제품' , NULL); 
insert into SM_BIM_Ite_Reg VALUES
('PCSET04','최고급컴퓨터',NULL,'SET', 1 , 1 , 1 , 1 , '0' , NULL, NULL, NULL ,NULL , NULL , 4159600 ,'PC10' , 400,'완제품' , NULL); 

--반제품
insert into SM_BIM_Ite_Reg VALUES
('MT01','27inch모니터',NULL,'EA', 1 , 1 , 1 , 1 , '0' , NULL, NULL, '611.70mm' ,'463mm' , '250.50mm' , 209000 ,'MONITER' , 500,'반제품' , NULL); 
insert into SM_BIM_Ite_Reg VALUES
('MT02','32inch모니터',NULL,'EA', 1 , 1 , 1 , 1 , '0' , NULL, NULL, '714.30mm' ,'512.30mm' , '208.80mm' , 398890 ,'MONITER' , 600,'반제품' , NULL);
insert into SM_BIM_Ite_Reg VALUES
('MT03','43inch모니터',NULL,'EA', 1 , 1 , 1 , 1 , '0' , NULL, NULL, '1080mm' ,'1100mm' , '250.50mm' , 649000 ,'MONITER' , 700,'반제품' , NULL);
insert into SM_BIM_Ite_Reg VALUES
('DT01','피카소VEGA8',NULL,'EA', 1 , 1 , 1 , 1 , '0' , NULL, NULL, 'NULL' ,'NULL' , 'NULL' , 449900 ,'DESKTOP' , 800,'반제품' , NULL);
insert into SM_BIM_Ite_Reg VALUES
('DT02','프리플로우ELITE',NULL,'EA', 1 , 1 , 1 , 1 , '0' , NULL, NULL, 'NULL' ,'NULL' , 'NULL' , 1189000 ,'DESKTOP' , 900,'반제품' , NULL);
insert into SM_BIM_Ite_Reg VALUES
('DT03','게이밍본체PC',NULL,'EA', 1 , 1 , 1 , 1 , '0' , NULL, NULL, 'NULL' ,'NULL' , 'NULL' , 1487000 ,'DESKTOP' , 1000,'반제품' , NULL);
insert into SM_BIM_Ite_Reg VALUES
('DT04','EXKOREA',NULL,'EA', 1 , 1 , 1 , 1 , '0' , NULL, NULL, 'NULL' ,'NULL' , 'NULL' , 339900 ,'DESKTOP' , 100,'반제품' , NULL);


--부품
insert into SM_BIM_Ite_Reg VALUES
('CASE01','슬림형본체',NULL,'EA', 1 , 1 , 1 , 1 , '0' , NULL, NULL, '210mm' ,'395mm' , '475mm' , 300000 ,'CA10' , 200,'부품' , NULL); 
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'CASE03' , 'ABKO NCORE' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '210mm' , '390mm' , '461mm' , 50000 ,'CA10', 300,'부품' , NULL);
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'HDD01' , 'WD BLUE 7200' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , NULL , NULL, NULL ,60000 ,'HDD',400,'부품', '1T/SATA3');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'HDD02' , 'Seagate BarraCuda 7200' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 80000 ,'HDD',500,'부품', '1T/SATA3');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'SSD01' , '삼성전자 980 PRO' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 700000 ,'SSD',600,'부품', NULL);
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'SSD02' , '삼성전자 970 EVO' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 600000 ,'SSD',700,'부품', NULL);
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'SSD03' , '삼성전자 870 EVO' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 500000 ,'SSD', 800,'부품',NULL);
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'GPU01' , '지포스 RTX 3060' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 1000000 ,'GPU',900,'부품', 'MSI/1837MHz/550W/276mm');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'GPU02' , '지포스 RTX 3070' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 1200000 ,'GPU',1000,'부품', 'MSI/1830MHz/650W/323mm');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'GPU03' , '지포스 RTX 2060' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 800000 ,'GPU', 100,'부품','GIGAByte/1755MHz/500W/226mm');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'GPU04' , '지포스 GTX1050 Ti' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 600000 ,'GPU',200,'부품', 'MSI/1341MHz/300W/177mm   ');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'GPU05' , '갤럭시 GT1030' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 600000 ,'GPU', 300,'부품','갤럭시/1227MHz/180mm');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'CPU01' , 'AMD 라이젠5' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 500000 ,'CPU',400,'부품', 'AMD/6코어/3.6GHZ');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'CPU02' , 'core I5-10세대' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 700000 ,'CPU', 500,'부품','인텔/6코어/4.1GHz');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'CPU03' , 'core I5-11세대' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 900000 ,'CPU', 600,'부품','인텔/6코어/2.6GHz');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'CPU04' , 'core I7-11세대' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 1200000 ,'CPU',700,'부품', '인텔/8코어/3.6GHz');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'CPU05' , 'AMD 라이젠3 Pro' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 700000 ,'CPU', 800,'부품','AMD/4코어/3.8GHz');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'RAM01' , 'ADATA XPG DDR4-3200' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 500000 ,'RAM', 900,'부품','DDR4/3200MHz/16G');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'RAM02' , 'KLEVV DDR4-3200' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 400000 ,'RAM',1000,'부품', 'DDR4/3200MHz/32G');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'RAM03' , '삼성 DDR4-3200' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 600000 ,'RAM', 100,'부품','DDR4/3200MHz/8G');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'BOARD01' , '박격포 MAG B560M' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 300000 ,'BOARD',200,'부품', '인텔/DDR4/24.4x24.4cm');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'BOARD02' , 'ASRock B550M' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 100000 ,'BOARD',300,'부품', 'AMD/DDR4/24.4x24.4cm');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'BOARD03' , 'GIGABYTE A320M' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , 0 , 0 , 1500000 , 'BOARD',400,'부품','AMD/DDR4/24.4x19.5cm');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'POWER01' , '시소닉 A12 STD' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , 0 , '140mm' , '150mm' , 200000 ,'POWER', 500,'부품','500W');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'POWER02' , 'ASUS POG Thor 850P' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '135mm' , '160mm' , 0 , 300000 ,'POWER',600,'부품', '852W');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'POWER03' , '마이크로닉 Classic 2' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '120mm', '140mm' , 0 , 400000 , 'POWER',700,'부품','750W');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'ADBOARD01' , '정면소켓형 AD 보드' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '105mm', '55mm' , 0 , 23000 , 'AD01',800,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'ADBOARD02' , '초소형 AD 보드' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '110mm', '27mm' , 0 , 15000 , 'AD01',900,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'ADBOARD03' , '2232GW AD 보드' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '117mm', '86mm' , 0 , 19000 , 'AD01',1000,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'INVERTER01' , 'FIF1742-01A' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '155mm', '40mm' , 0 , 6500 , 'IVT',100,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'INVERTER02' , 'TWT-122K' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '160mm', '45mm' , 0 , 7000 , 'IVT',200,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'INVERTER03' , 'DS-1307WK' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '160mm', '26mm' , 0 , 8500 , 'IVT',300,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'SMPS01' , 'IDF060CV-S24V1' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '150mm', '50mm' , 0 , 7000 , 'SMPS',400,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'SMPS02' , 'IDF100CV-S24V1' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '170mm', '70mm' , 0 , 10000 , 'SMPS',500,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'SMPS03' , 'IDF600CV-S24V2' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '160mm', '60mm' , 0 , 15000 , 'SMPS',600,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'LIPSBOARD01' , 'LI01' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '147mm', '116mm' , 0 , 10000 , 'IPBOARD',700,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'LIPSBOARD02' , 'LI10' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '148mm', '135mm' , 0 , 17000 , 'IPBOARD',800,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'LIPSBOARD03' , 'LL01' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '151mm', '120mm' , 0 , 12000 , 'IPBOARD',900,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'BL01' , '32MB25VQ' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '559mm', '11mm' , 0 , 24000 , 'BACKLIGHT',1000,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'BL02' , '32LF550B' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '559mm', '11mm' , 0 , 22000 , 'BACKLIGHT',100,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'BL03' , 'L32LX530H' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , '559mm', '11mm' , 0 , 23000 , 'BACKLIGHT',200,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'KB01' , 'COX-CK87' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , NULL , NULL , 0 , 49900 , 'KEYBOARD',300,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'KB02' , 'SPA-NKG2CUB' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , NULL , NULL , 0 , 72000 , 'KEYBOARD',400,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'KB03' , 'BUBBLE IR-K10' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , NULL , NULL , 0 , 14890 , 'KEYBOARD',500,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'MO01' , 'G102' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , NULL , NULL , 0 , 18150 , 'MOUSE',600,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'MO02' , 'G304' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , NULL , NULL , 0 , 37880 , 'MOUSE',700,'부품','NULL');
INSERT INTO SM_BIM_Ite_Reg VALUES 
( 'MO03' , 'BEETLE' , 'NULL' , 'EA' , 1 , 1 , 1 , 1 , '0' , NULL , NULL , NULL , NULL , 0 , 9000 , 'MOUSE',800,'부품','NULL');

--------------------------------------------------------------------
--창고등록

create table SM_BIM_Hou_Reg (
House_Code varchar2(12) PRIMARY KEY, --창고코드 등록 
House_Name varchar2(50) UNIQUE NOT NULL, --창고명
House_Location_IN varchar2(50), --입고기본위치 
House_Location_OUT varchar2(50), --출고기본위치 
House_Explanation varchar2(200), --창고 설명
House_Status varchar2(10) DEFAULT '1.부'  --창고 사용여부
);

insert into SM_BIM_Hou_Reg values ( 'M100' , '제품창고' , '제품양품장소' , '제품양품장소' , null , '사용' );
insert into SM_BIM_Hou_Reg values ( 'M200' , '부품창고' , null , null , null , '사용' );


create table SM_BIM_Pro_Reg (
Process_Code varchar2(12) PRIMARY KEY , --공정(생산)코드
Process_Name varchar2(50) NOT NULL, --공정(생산)명
Process_Location_IN varchar2(50), --입고기본위치
Process_Location_OUT varchar2(50), --출고기본위치
Process_Explanation varchar2(200), --공정설명
Process_Status varchar2(10) DEFAULT '1.부'
);

insert into SM_BIM_Pro_Reg values ( 'L100' , '작업공정' , null , null , null , '사용' );
insert into SM_BIM_Pro_Reg values ( 'L200' , '작업공정(조립)' , null , null , null , '사용' );

create table SM_BIM_Out_Reg (
Outsourcing_Code varchar2(12) PRIMARY KEY, --외주공정코드 
Outsourcing_Name varchar2(50) NOT NULL, --외주공정명
Outsourcing_Location_IN varchar2(50), --입고기본위치
Outsourcing_Location_OUT varchar2(50), --출고기본위치
Outsourcing_Explanation varchar2(200), --공정설명
Outsourcing_Status varchar2(10) DEFAULT '1.부'
);

insert into SM_BIM_Out_Reg values ('P100' , '외주공정' , null , null , null , '사용');

-------------------------------------------------------------------
--물류관리내역등록

create table SM_BIM_Log_Man (
Logistics_IN_Code varchar2(12) PRIMARY KEY, --관리내역코드
Logistics_IN_Name varchar2(50) NOT NULL, --관리항목명
Explanation varchar2(200), --품목군설명
Remarks varchar2(200) --비고200 새로만듬
);

insert into SM_BIM_Log_Man values ( 'AG','지역그룹구분', NULL, NULL);
insert into SM_BIM_Log_Man values ( 'AM','지역관리구분', NULL, NULL);
insert into SM_BIM_Log_Man values ( 'LA','재고조정구분', NULL, NULL);
insert into SM_BIM_Log_Man values ( 'LE','수입 제비용 구분', NULL, NULL);
insert into SM_BIM_Log_Man values ( 'LP','구매자재구분', NULL, NULL);
insert into SM_BIM_Log_Man values ( 'LQ','품질검사구분', NULL, NULL);
insert into SM_BIM_Log_Man values ( 'LS','영업관리구분', NULL, NULL);
--------------------------------------------------------------------

--검사유형등록
create table SM_BIM_Ins_Typ (
Inspection_Code varchar2(12) PRIMARY KEY, --검사유형코드 varchar2(12)
Inspection_Name varchar2(50) NOT NULL, --검사유형명 varchar2(30)
Inspection_Question varchar2(200), --검사유형질문
Remarks varchar2(200) --비고 새로생성 
);
insert into SM_BIM_Ins_Typ values ( '10-1' ,'외관검사', '긁힘이나 손상된곳은 없는가?' , null);
insert into SM_BIM_Ins_Typ values ( '10-2' ,'외관검사', '포장 상태는 양호한가' , null);
insert into SM_BIM_Ins_Typ values ( '10-3' ,'외관검사', '얼룩이나 번짐현상은 없는가?' , null);



-------------------------------------------------------------------
--SET품 등록

create table SM_BIM_SET_Reg(
SET_Code varchar2(12) primary key, --셋트품 코드
SET_Name varchar2(50) unique not null, --셋트품 명
SET_Standard varchar2(20), --규격
SET_Unit varchar2(5) default 'SET' --단위
);


insert into SM_BIM_SET_Reg values ( 'PC10' , '데스크탑PC' , NULL , null );

------------------------------------------------------------------
--SET품 구성품 등록
create table SM_BIM_Com_Reg (
SET_Code varchar2(12), --셋트품 코드
Components_Code varchar2(12) not null unique, --구성품 코드
Components_Name varchar2(30) not null unique, --구성품 명
Components_Standard varchar2(20),
Components_Unit varchar2(5) default 'EA',
Components_Stock number(5)default '0',
CONSTRAINT FK_SET_SETCode FOREIGN KEY(SET_Code)
REFERENCES SM_BIM_SET_Reg(SET_Code),
CONSTRAINT FK_SET_Item_Code FOREIGN KEY(Components_Code)
REFERENCES SM_BIM_Ite_Reg(Item_Code),
CONSTRAINT FK_SET_Item_Name FOREIGN KEY(Components_Name)
REFERENCES SM_BIM_Ite_Reg(Item_Name)
);

insert into SM_BIM_Com_Reg values ( 'PC10' , 'SSD01' , '삼성전자 980 PRO' , null , null , null);
insert into SM_BIM_Com_Reg values ( 'PC10' , 'GPU01' , '지포스 RTX 3060' , null , null , null);
insert into SM_BIM_Com_Reg values ( 'PC10' , 'CPU01' , 'AMD 라이젠5' , null , null , null);
insert into SM_BIM_Com_Reg values ( 'PC10' , 'POWER01' , '시소닉 A12 STD' , null , null , null);


--------------------------------------------------------------------
--고객별출력품목등록
create table SM_BIM_Out_Item_Cus (
Item_Code varchar2(12) PRIMARY KEY,  -- 품목품번
Item_Name varchar2(50) NOT NULL, -- 품명
Standard varchar2(20), --규격
CONSTRAINT FK_Cus_Item_CODE FOREIGN KEY(Item_Code)
REFERENCES SM_BIM_Ite_Reg(Item_Code)
);
insert into SM_BIM_Out_Item_Cus values ( 'CASE01', '슬림형본체'  , null );
insert into SM_BIM_Out_Item_Cus values ( 'GPU03' , '지포스 RTX 2060' , null );
insert into SM_BIM_Out_Item_Cus values ('CPU05' , 'AMD 라이젠3 Pro' , null);
insert into SM_BIM_Out_Item_Cus values ( 'RAM03', '삼성 DDR4-3200' , null);
insert into SM_BIM_Out_Item_Cus values ( 'BOARD01' , '박격포 MAG B560M' , null);
insert into SM_BIM_Out_Item_Cus values ('POWER03' , '마이크로닉 Classic 2' , null);

--------------------------------------------------------------------------------------
--고객별품목등록 정규화
create table SM_BIM_Out_Item_Cus_IN (
Customer_Code varchar2(12) PRIMARY KEY, --고객코드
Customer_Name varchar2(50) NOT NULL, --고객명
Item_Code varchar2(12) NOT NULL, --출력품번
Item_Name varchar2(50) NOT NULL, --출력품명
Standard varchar2(20) --출력규격
);

EXECUTE P_RESET_SEQ('seq_SM_BIM_Gen_Cus_Reg_no');
SELECT F_GET_CURR_SEQ('SM_BIM_Gen_Cus_Reg') FROM SM_BIM_Out_Item_Cus_IN;

SELECT seq_SM_BIM_Gen_Cus_Reg_no.NEXTVAL AS 일반거래처시퀀스 FROM DUAL ; 

insert into SM_BIM_Out_Item_Cus_IN values (F_GET_CURR_SEQ('SM_BIM_Gen_Cus_Reg'), '(주)삼도전자' , 'CASE01', '슬림형본체', NULL);
insert into SM_BIM_Out_Item_Cus_IN values (F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'), '(주)오라클전자' , 'GPU03', '지포스 RTX 2060', NULL);
insert into SM_BIM_Out_Item_Cus_IN values (F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'), '(주)디비컴퓨터' , 'CPU05',  'AMD 라이젠3 Pro', NULL);
insert into SM_BIM_Out_Item_Cus_IN values (F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'), '더지글로직스' ,'RAM03', '삼성 DDR4-3200' , NULL);
insert into SM_BIM_Out_Item_Cus_IN values (F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'), '(주)서울컴텍', 'BOARD01' , '박격포 MAG B560M' , NULL);
insert into SM_BIM_Out_Item_Cus_IN values (F_GET_NEXT_SEQ('SM_BIM_Gen_Cus_Reg'), '(주)씨네스',  'POWER03' , '마이크로닉 Classic 2', NULL);

SELECT * FROM SM_BIM_Out_Item_Cus_IN;
-------------------------------------------------------------------
--판매계획등록
create table SM_BIM_Sal_Pla_Reg (
Plan_Code varchar2(12) PRIMARY KEY,--판매등록코드
Plan_Date date not null, --판매계획등록일자
Item_Code varchar2(12) NOT NULL, --품번 
Item_Name varchar2(50) NOT NULL, --품명
Standard varchar2(20), --규격
Inventory_Unit varchar2(5) DEFAULT 'EA', --단위
Plan_Item_Quantity number(5) DEFAULT '0', --수량 
Plan_Unit_Price number(15) DEFAULT '0', --예상단가 
Newplan_Item_Quantity number(5), --수정후 수량
Newplan_Unit_Price number(15) DEFAULT '0' --수정후 예상단가
);

EXECUTE P_RESET_SEQ('seq_SM_BIM_Gen_Cus_Reg_no');
insert into SM_BIM_Sal_Pla_Reg values (F_GET_NEXT_SEQ('SM_BIM_Sal_Pla_Reg'),sysdate,'CPU05' , 'AMD 라이젠3 PRO' , null, 'EA' , 100 , 500000 ,120 , 500000 );
insert into SM_BIM_Sal_Pla_Reg values (F_GET_NEXT_SEQ('SM_BIM_Sal_Pla_Reg'),sysdate+1,'RAM03' , '삼성 DDR4-3200' , null, 'EA' , 100 , 100000 ,120 , 100000 );
insert into SM_BIM_Sal_Pla_Reg values (F_GET_NEXT_SEQ('SM_BIM_Sal_Pla_Reg'),sysdate+2 ,'POWER01' , '시소닉 A12 STD' , null, 'EA' , 100 , 400000 ,120 , 400000 );
insert into SM_BIM_Sal_Pla_Reg values (F_GET_NEXT_SEQ('SM_BIM_Sal_Pla_Reg'),sysdate+3,'SSD01' , '삼성전자 980 PRO' , null, 'EA' , 100 , 200000 ,120 , 300000 );
SELECT * FROM SM_BIM_Sal_Pla_Reg;
------------------------------------------------------------------
--장소등록
create table SM_BIM_Wor_Reg(
Location_Code varchar2(12) primary key, --위치 코드
Location_Name varchar2(50) not null, --위치명
Location_Explanation varchar2(200), --위치설명
Release_Code varchar2(12), --가출고 코드
Release_Customer varchar2(50), --가출고 거래처명
Suitability varchar2(10), --적합여부
Availability varchar2(10), --가용재고여부
Status varchar2(10) default '1.부'--사용여부
);

insert into SM_BIM_Wor_Reg values ('M101', '제품양품장소', NULL , NULL , NULL, '적합' , '1.여' , '사용' );
insert into SM_BIM_Wor_Reg values ('M102', '제품불양품장소', NULL , NULL , NULL, '적합' , '2.부' , '사용' );
insert into SM_BIM_Wor_Reg values ('M201', '부품양품장소', NULL , NULL , NULL, '적합' , '1.여' , '사용' );
insert into SM_BIM_Wor_Reg values ('M202', '부품불양품장소', NULL , NULL , NULL, '적합' , '2.부' , '사용' );


---------------------------------------------------------------------
--생산작업장 등록
create table SM_BIM_Pro_Wor_Reg(
Workplace_Code varchar2(12) primary key,--작업장코드
Workplace_Name varchar2(50) not null,--작업장명
Workplace_Explanation varchar2(200),--작업장설명
Suitability varchar2(10),--적합여부
Process_Explanation varchar2(200),
Status varchar2(10) default '1.부'--사용여부
);

insert into SM_BIM_Pro_Wor_Reg values ('L101', '제품작업장' , NULL, '적합',null , '사용');
insert into SM_BIM_Pro_Wor_Reg values ('L102', '반제품작업장' , NULL, '적합',null , '사용');
insert into SM_BIM_Pro_Wor_Reg values ('L201', '제품작업장(조립)' , NULL, '적합',null , '사용');

--------------------------------------------------------------------------------
--외주작업장 등록
create table SM_BIM_Out_Wor_Reg(
Outsourcing_Code varchar(12),
Workplace_Code varchar2(12) primary key, --작업장 코드
Outcustomer varchar2(12) not null,--외주거래처 코드
Workplace_Name varchar2(50), --작업장명
Outcustomer_Name varchar2(50), --외주거래처명
Workplace_Explanation varchar2(200), --작업장설명
Suitability varchar2(10), --적합여부
Status varchar2(10) default '1.부', --사용여부
CONSTRAINT FK_Outsourcing_Code FOREIGN KEY(Outsourcing_Code)
REFERENCES SM_BIM_Out_Reg(Outsourcing_Code)
);

EXECUTE P_RESET_SEQ('seq_SM_BIM_Gen_Cus_Reg_no');
insert into SM_BIM_Out_Wor_Reg values ('P100','P101',F_GET_NEXT_SEQ('SM_BIM_Sal_Pla_Reg'), '(주)삼도전자' , '(주)삼도전자' , NULL , '적합' , '사용' );
insert into SM_BIM_Out_Wor_Reg values ('P100','P102',F_GET_NEXT_SEQ('SM_BIM_Sal_Pla_Reg'), '(주)오라클전자' , '(주)오라클전자',  NULL , '적합' , '사용' );
insert into SM_BIM_Out_Wor_Reg values ('P100','P103',F_GET_NEXT_SEQ('SM_BIM_Sal_Pla_Reg'), '(주)디비컴퓨터', '(주)디비컴퓨터',  NULL , '적합' , '사용' );
insert into SM_BIM_Out_Wor_Reg values ('P100','P104',F_GET_NEXT_SEQ('SM_BIM_Sal_Pla_Reg'), '더지글로직스',  '더지글로직스',  NULL , '적합' , '사용' );
insert into SM_BIM_Out_Wor_Reg values ('P100','P105',F_GET_NEXT_SEQ('SM_BIM_Sal_Pla_Reg'), '(주)서울컴텍', '(주)서울컴텍',  NULL , '적합' , '사용' );

-------------------------------------------------------------------------------------------------
--생산 라인 등록
create table SM_BIM_Pro_Line_Reg(
    --생산설비
    productionFacility varchar2(50),
    --작업팀
    taskTeam varchar2(50)
);
insert into SM_BIM_Pro_Line_Reg values ('본체 라인 1호', '생산 1반');
insert into SM_BIM_Pro_Line_Reg values ('본체 라인 2호', '생산 2반');
insert into SM_BIM_Pro_Line_Reg values ('본체 라인 3호', '생산 3반');
insert into SM_BIM_Pro_Line_Reg values ('본체 라인 4호', '생산 4반');
insert into SM_BIM_Pro_Line_Reg values ('PC 라인 1호', '조립 1반');
insert into SM_BIM_Pro_Line_Reg values ('PC 라인 2호', '조립 2반');
insert into SM_BIM_Pro_Line_Reg values ('PC 라인 3호', '조립 3반');
insert into SM_BIM_Pro_Line_Reg values ('PC 라인 4호', '조립 4반');


create table CPM_BIM_BOM_Reg(
    --순번(PK)
    NO number(4) PRIMARY KEY,
    --모품목 품번(FK)
    Parent_Item_Code varchar2(12) NOT NULL,
    --품번(FK)
    Item_Code varchar2(12) NOT NULL, 
    --품명(FK)
    Item_Name varchar2(50) NOT NULL,
    --규격
    Standard varchar2(20), 
    --재고단위
    Inventory_Unit varchar2(5) DEFAULT 'EA',
    --정미수량
    precisionQuantity number(5) not null,
    --LOSS
    LOSS number(5) not null,

    --완제품/반제품 구분 컬럼
    division varchar2(100),
  
    CONSTRAINT CPMBIMBOMREG_ParentItemCode_FK FOREIGN KEY(Parent_Item_Code) REFERENCES SM_BIM_Ite_Reg(Item_Code)on delete cascade,
    CONSTRAINT CPMBIMBOMREG_ItenCode_FK FOREIGN KEY(Item_Code) REFERENCES SM_BIM_Ite_Reg(Item_Code)on delete cascade
);
create table CPM_BIM_OUT_PRI(
    Outsourcing_Code varchar(12),
    Outcustomer varchar2(12) not null,--외주거래처 코드
    Item_Code varchar2(12) not null, 
    --외주단가
    outsourcingUnitPrice number(15),
    --시작일자
    startDate date default sysdate,
    --종료일자
    endDate date default sysdate
);

insert into CPM_BIM_OUT_PRI
values('P100','P101','PCSET01',409000,'20180101','20201231');
--생산관리공통- 기초정보관리 데이터


EXECUTE P_RESET_SEQ('SEQ_CPM_BIM_BOM_Reg_NO');
select SEQ_CPM_BIM_BOM_Reg_NO.NEXTVAL from dual;
--BOM등록 데이터
--pc 완제품
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_CURR_SEQ('CPM_BIM_BOM_Reg'),'PCSET01','MT01','27inch모니터',NULL,'EA' ,300,0,'제품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'PCSET01','DT01','피카소VEGA8',NULL,'EA',300,0,'제품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'PCSET02','MT02','32inch모니터',NULL,'EA',300,0,'제품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'PCSET02','DT02','프리플로우ELITE',NULL,'EA' ,300,0,'제품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'PCSET03','MT03','43inch모니터',NULL,'EA',300,0,'제품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'PCSET03','DT03','게이밍본체PC',NULL,'EA',300,0,'제품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'PCSET04','MT03','43inch모니터',NULL,'EA',300,0,'제품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'PCSET04','DT04','EXKOREA',NULL,'EA',300,0,'제품');

--본체 반제품
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT01','CASE01','슬림형본체',NULL,'EA',300,0,'반제품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT01','SSD01' , '삼성전자 980 PRO',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT01','GPU01' , '지포스 RTX 3060',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT01', 'CPU01' , 'AMD 라이젠5',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT01','RAM01' , 'ADATA XPG DDR4-3200',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT01','BOARD01' , '박격포 MAG B560M',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT01','POWER01' , '시소닉 A12 STD',NULL,'EA',300,0,'부품');

INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT02','CASE01','슬림형본체',NULL,'EA',300,0,'반제품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT02','SSD02' , '삼성전자 970 EVO',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT02','GPU02' , '지포스 RTX 3070',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT02','CPU02' , 'core I5-10세대',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT02','RAM02' , 'KLEVV DDR4-3200',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT02','BOARD02' , 'ASRock B550M',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT02','POWER01' , '시소닉 A12 STD' ,NULL,'EA',300,0,'부품');

INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT03','CASE03' , 'ABKO NCORE',NULL,'EA',300,0,'반제품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT03','HDD01' , 'WD BLUE 7200' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT03','GPU03' , '지포스 RTX 2060' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT03','CPU03' , 'core I5-11세대' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT03','RAM02' , 'KLEVV DDR4-3200' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT03','BOARD03' , 'GIGABYTE A320M',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT03','POWER02' , 'ASUS POG Thor 850P' ,NULL,'EA',300,0,'부품');

INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT04','CASE03' , 'ABKO NCORE',NULL,'EA',300,0,'반제품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT04','HDD02' , 'Seagate BarraCuda 7200' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT04','GPU04' , '지포스 GTX1050 Ti',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT04','CPU04' , 'core I7-11세대',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT04','RAM03' , '삼성 DDR4-3200' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT04','BOARD03' , 'GIGABYTE A320M',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'DT04','POWER03' , '마이크로닉 Classic 2' ,NULL,'EA',300,0,'부품');

--모니터 반제품
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT01','ADBOARD01' , '정면소켓형 AD 보드'  ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT01','INVERTER01' , 'FIF1742-01A' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT01','SMPS01' , 'IDF060CV-S24V1',NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT01','LIPSBOARD01' , 'LI01' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT01','BL01' , '32MB25VQ' ,NULL,'EA',300,0,'부품');

INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT02','ADBOARD01' , '정면소켓형 AD 보드'  ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT02','ADBOARD02' , '초소형 AD 보드' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT02','INVERTER02' , 'TWT-122K' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT02','SMPS02' , 'IDF100CV-S24V1' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT02','LIPSBOARD02' , 'LI10' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT02','BL02' , '32LF550B'  ,NULL,'EA',300,0,'부품');

INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT03','ADBOARD03' , '2232GW AD 보드' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT03','INVERTER03' , 'DS-1307WK' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT03','SMPS03' , 'IDF600CV-S24V2' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT03','LIPSBOARD03' , 'LL01'  ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT03','ADBOARD03' , '2232GW AD 보드' ,NULL,'EA',300,0,'부품');
INSERT INTO CPM_BIM_BOM_Reg
VALUES (F_GET_NEXT_SEQ('CPM_BIM_BOM_Reg'),'MT03','BL03' , 'L32LX530H' ,NULL,'EA',300,0,'부품');


select * from CPM_BIM_BOM_Reg;

--불량유형등록
create table CPM_BIM_Def_Typ_Reg(
    --불량코드(PK)
    DefectCode varchar2(12) PRIMARY KEY,
    --불량유형명
    DefectiveTypeName varchar2(50) not null,
    --불량군코드
    DefectiveItemGroupCode varchar2(20),
    --불량군
    DefectiveItemGroup varchar2(20),
    --사용여부
    UsageStatus varchar2(20) not null,
     --불량설명
    DefectiveDescription varchar2(1000)  
    
);

create table CPM_BIM_DEF_GROUP(
    DefectiveTypeName varchar2(50) not null,
    DefectiveItemGroupCode varchar2(20)
);

insert into CPM_BIM_DEF_GROUP
values('100','조립불량');
insert into CPM_BIM_DEF_GROUP
values('200','부품불량');
--불량유형등록 데이터
INSERT INTO CPM_BIM_Def_Typ_Reg
VALUES ('A01','램 불량','100','조립불량', '사용',null);
INSERT INTO CPM_BIM_Def_Typ_Reg
VALUES ('A02','CPU 불량','200','부품불량', '사용',null);
INSERT INTO CPM_BIM_Def_Typ_Reg
VALUES ('A03','메인보드 불량','100','조립불량', '사용',null);
INSERT INTO CPM_BIM_Def_Typ_Reg
VALUES ('A04','파워 불량','200','부품불량', '사용',null);
INSERT INTO CPM_BIM_Def_Typ_Reg
VALUES ('A05','SSD 불량','100','조립불량', '사용',null);

---------------------------------------------------------------------
-----창고코드 함수
create or replace function func_hou_reg(
    IN_House_Code IN SM_BIM_HOU_REG.House_Code%TYPE
)
return varchar2
is
    OUT_House_Name SM_BIM_Hou_Reg.House_Name%TYPE;
begin
SELECT House_Name into OUT_House_Name
        FROM SM_BIM_HOU_REG
        WHERE House_Code = IN_House_Code;
return OUT_House_Name; 
end func_hou_reg;
/

--select func_hou_reg('M100') from dual;
select func_hou_reg(House_Code) from SM_BIM_HOU_REG;
---------------------------------------------------------------------
-----장소코드 함수
create or replace function func_Wor_Reg(
    IN_Location_Code  IN SM_BIM_Wor_Reg.Location_Code%TYPE
)
return varchar2
is
    OUT_Location_Name SM_BIM_Wor_Reg.Location_Name%TYPE;
begin
SELECT Location_Name into OUT_Location_Name
        FROM SM_BIM_Wor_Reg
        WHERE Location_Code  = IN_Location_Code ;
return OUT_Location_Name; 
end func_Wor_Reg;
/

--select func_Wor_Reg('M100') from dual;
select func_Wor_Reg(Location_Code) from SM_BIM_Wor_Reg;

---------------------------------------------------------------------
-----생산공정코드 함수
create or replace function func_pro_reg(
    IN_Process_Code  IN SM_BIM_Pro_Reg.Process_Code%TYPE
)
return varchar2
is
    OUT_Process_Name SM_BIM_Pro_Reg.Process_Name%TYPE;
begin
SELECT Process_Name into OUT_Process_Name
        FROM SM_BIM_Pro_Reg
        WHERE Process_Code = IN_Process_Code;
return OUT_Process_Name; 
end func_pro_reg;
/

--select func_pro_reg('L100') from dual;
select func_pro_reg(Process_Code ) from SM_BIM_Pro_Reg;
---------------------------------------------------------------------
-----생산작업장코드 함수
create or replace function func_Pro_Wor_Reg(
    IN_Workplace_Code   IN SM_BIM_Pro_Wor_Reg.Workplace_Code %TYPE
)
return varchar2
is
    OUT_Workplace_Name SM_BIM_Pro_Wor_Reg.Workplace_Name %TYPE;
begin
SELECT Workplace_Name  into OUT_Workplace_Name 
        FROM SM_BIM_Pro_Wor_Reg
        WHERE Workplace_Code  = IN_Workplace_Code ;
return OUT_Workplace_Name ; 
end func_Pro_Wor_Reg;
/

--select func_Pro_Wor_Reg('L101') from dual;
select func_Pro_Wor_Reg(Workplace_Code) from SM_BIM_Pro_Wor_Reg;

---------------------------------------------------------------------
-----외주공정코드 함수
create or replace function func_Out_Reg(
    IN_Outsourcing_Code   IN SM_BIM_Out_Reg.Outsourcing_Code%TYPE
)
return varchar2
is
    OUT_Outsourcing_Name SM_BIM_Out_Reg.Outsourcing_Name%TYPE;
begin
SELECT Outsourcing_Name  into OUT_Outsourcing_Name 
        FROM SM_BIM_Out_Reg 
        WHERE Outsourcing_Code = IN_Outsourcing_Code;
return OUT_Outsourcing_Name; 
end func_Out_Reg;
/

--select func_Out_Reg('P100') from dual;
select func_Out_Reg(Outsourcing_Code) from SM_BIM_Out_Reg;
---------------------------------------------------------------------
-----외주작업장코드 함수
create or replace function func_Out_Wor_Reg(
    IN_Workplace_Code IN SM_BIM_Out_Wor_Reg.Workplace_Code %TYPE
)
return varchar2
is
    OUT_Workplace_Name SM_BIM_Out_Wor_Reg.Workplace_Name %TYPE;
begin
SELECT Workplace_Name   into OUT_Workplace_Name 
        FROM SM_BIM_Out_Wor_Reg 
        WHERE Workplace_Code  = IN_Workplace_Code;
return OUT_Workplace_Name; 
end func_Out_Wor_Reg;
/

--select func_Out_Wor_Reg('P101') from dual;
select func_Out_Wor_Reg(Workplace_Code) from SM_BIM_Out_Wor_Reg;

---------------------------------------------------------------------
create table CPM_PM_Pro_Pla_Reg_vietnam(
    --생산계획번호(PK)
    ProductionPlanCode varchar2(12) PRIMARY KEY,
    --품번(FK)
    Item_Code varchar2(12) NOT NULL, 
    --품명(FK)
    Item_Name varchar2(50) NOT NULL,
    --규격
    Standard varchar2(20), 
    --재고단위
    Inventory_Unit varchar2(5) DEFAULT 'EA',
    --일 생산량
    dailyProduction number(5) not null,
    --순서
    sequence number(5),
    --작업예정일
    scheduledDateOfOperation date,
    --수량
    Quantity number(5),
    --비고
    note varchar2(1000),
    --생산/작업/외주 구분
    productionDivision varchar2(10) DEFAULT '생산',
     --생산설비
    productionFacility varchar2(50),
    --작업팀
    taskTeam varchar2(50),
    CONSTRAINT PLAREGviet_Item_Code_FK FOREIGN KEY(Item_Code) REFERENCES SM_BIM_Ite_Reg(Item_Code)on delete cascade
);




create table Pla_Reg_vietnam_erp_admin_IF(
    --생산계획번호(PK)
    ProductionPlanCode varchar2(12) PRIMARY KEY,
    --품번(FK)
    Item_Code varchar2(12) NOT NULL, 
    --품명(FK)
    Item_Name varchar2(50) NOT NULL,
    --규격
    Standard varchar2(20), 
    --재고단위
    Inventory_Unit varchar2(5) DEFAULT 'EA',
    --일 생산량
    dailyProduction number(5) not null,
    --순서
    sequence number(5),
    --작업예정일
    scheduledDateOfOperation date,
    --수량
    Quantity number(5),
    --비고
    note varchar2(1000),
    --생산/작업/외주 구분
    productionDivision varchar2(10) DEFAULT '생산',
     --생산설비
    productionFacility varchar2(50),
    --작업팀
    taskTeam varchar2(50),
    --upload여부
     ErpUpload VARCHAR2(1),
    CONSTRAINT PROPLAREGviet_Item_Code_FK FOREIGN KEY(Item_Code) REFERENCES SM_BIM_Ite_Reg(Item_Code)on delete cascade
);

--
--INSERT INTO CPM_PM_Pro_Pla_Reg_vietnam
--VALUES (F_GET_CURR_SEQ('CPM_PM_Pro_Pla_Reg'),'DT01','피카소VEGA8',NULL,'EA',100,F_GET_CURR_SEQ('SEQ'),sysdate,100,null,'생산','본체라인1호', '생산1반');
--INSERT INTO CPM_PM_Pro_Pla_Reg_vietnam
--VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'DT01','피카소VEGA8',NULL,'EA',100,F_GET_NEXT_SEQ('SEQ'),sysdate+1,110,null,'생산','본체라인2호', '생산2반');
--INSERT INTO CPM_PM_Pro_Pla_Reg_vietnam
--VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'DT01','피카소VEGA8',NULL,'EA',100,F_GET_NEXT_SEQ('SEQ'),sysdate+2,80,null,'생산','본체라인3호', '생산3반');
--INSERT INTO CPM_PM_Pro_Pla_Reg_vietnam
--VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'DT01','피카소VEGA8',NULL,'EA',100,F_GET_NEXT_SEQ('SEQ'),sysdate+3,80,null,'생산','본체라인4호', '생산4반');


create or replace trigger TRG_TB_ERP_VIETNAM_INSERT
AFTER INSERT ON CPM_PM_Pro_Pla_Reg_vietnam
FOR EACH ROW
BEGIN 
INSERT INTO Pla_Reg_vietnam_erp_admin_IF(
     ProductionPlanCode,Item_Code,Item_Name,Standard,Inventory_Unit,dailyProduction,sequence,scheduledDateOfOperation,Quantity,note,productionDivision,productionFacility,taskTeam)
     VALUES(:NEW.ProductionPlanCode,:NEW.Item_Code,:NEW.Item_Name,:NEW.Standard,:NEW.Inventory_Unit,:NEW.dailyProduction,
     :NEW.sequence,:NEW.scheduledDateOfOperation,:NEW.Quantity,:NEW.note,:NEW.productionDivision,:NEW.productionFacility,:NEW.taskTeam);
 END;
 /
    
    
create or replace trigger TRG_TB_ERP_VIETNAM_UPDATE
AFTER UPDATE ON CPM_PM_Pro_Pla_Reg_vietnam
FOR EACH ROW
BEGIN 
  UPDATE Pla_Reg_vietnam_erp_admin_IF
    SET Item_Code = :NEW.Item_Code, Item_Name = :NEW.Item_Name,
    Standard = :NEW.Standard, Inventory_Unit = :NEW.Inventory_Unit,dailyProduction=:NEW.dailyProduction,
    sequence = :NEW.sequence,scheduledDateOfOperation=:NEW.scheduledDateOfOperation,Quantity=:NEW.Quantity,
    note = :NEW.note, productionDivision = :NEW.productionDivision,productionFacility =  :NEW.productionFacility,
    taskTeam = :NEW.taskTeam
    WHERE ProductionPlanCode = :NEW.ProductionPlanCode; 
END;
 /
    
create or replace trigger TRG_TB_ERP_VIETNAM_DELETE
AFTER DELETE ON CPM_PM_Pro_Pla_Reg_vietnam
FOR EACH ROW
BEGIN 
    DELETE FROM Pla_Reg_vietnam_erp_admin_IF
    WHERE ProductionPlanCode = :NEW.ProductionPlanCode;
 END;
 /       
    
create or replace package erp_pkg is
    procedure erp_upload( p_ITEM_CODE in varchar2, p_pro_date in varchar2 );
end erp_pkg;
/
create or replace package body erp_pkg is

    procedure erp_upload( p_ITEM_CODE in varchar2, p_pro_date in varchar2 )
    is
        vn_cnt number :=0;
        e_no_data exception;
        r_erp_result Pla_Reg_vietnam_erp_admin_IF%rowtype;
    begin
        select count(*)
          into vn_cnt
          from Pla_Reg_vietnam_erp_admin_IF
         where ITEM_CODE = p_ITEM_CODE
           and to_char(scheduledDateOfOperation, 'yyyymmdd') = p_pro_date
           and erpupload is null;
    
         if vn_cnt = 0 then
            raise e_no_data;
         end if;
    
         select  ProductionPlanCode,Item_Code,Item_Name,Standard,Inventory_Unit,dailyProduction,sequence,scheduledDateOfOperation,Quantity,note,productionDivision,productionFacility,taskTeam
           into r_erp_result.ProductionPlanCode, r_erp_result.Item_Code,
                r_erp_result.Item_Name, r_erp_result.Standard, r_erp_result.Inventory_Unit,
                r_erp_result.dailyProduction, r_erp_result.sequence,r_erp_result.scheduledDateOfOperation,
                r_erp_result.Quantity,r_erp_result.note,r_erp_result.productionDivision,
                r_erp_result.productionFacility,r_erp_result.taskTeam
           from Pla_Reg_vietnam_erp_admin_IF
          where ITEM_CODE = p_ITEM_CODE
            and to_char(scheduledDateOfOperation, 'yyyymmdd') = p_pro_date
            and erpupload is null;
        
         insert into CPM_PM_Pro_Pla_Reg_erp_admin@dblk_erp
                    (ProductionPlanCode,Item_Code,Item_Name,Standard,Inventory_Unit,dailyProduction,sequence,scheduledDateOfOperation,Quantity,note,factoryCode,productionDivision,productionFacility,taskTeam
                    )
         values     (r_erp_result.ProductionPlanCode, r_erp_result.Item_Code,
                r_erp_result.Item_Name, r_erp_result.Standard, r_erp_result.Inventory_Unit,
                r_erp_result.dailyProduction, r_erp_result.sequence,r_erp_result.scheduledDateOfOperation,
                r_erp_result.Quantity,r_erp_result.note,'vietnam',
                r_erp_result.productionDivision,r_erp_result.productionFacility,r_erp_result.taskTeam);    
        
         update Pla_Reg_vietnam_erp_admin_IF
            set ErpUpload = 'Y'
          where ITEM_CODE = p_ITEM_CODE;
        
         commit;
        
         dbms_output.put_line(p_ITEM_CODE || ' 의 ERP_VIETNAM 생산실적이 ERP_DB에 성공적으로 업로드되었습니다.');
        
         exception when e_no_data then
            dbms_output.put_line('ERP_DB에 업로드 할 ERP_VIETNAM 생산실적이 없습니다.');
            rollback;
         when others then
            dbms_output.put_line(sqlerrm);
            rollback;
    end erp_upload;

end erp_pkg;   
/
    
select seq_CPM_PM_Pro_Pla_Reg_no.nextval from dual;
select seq_seq.nextval from dual;
INSERT INTO CPM_PM_Pro_Pla_Reg_vietnam
VALUES (F_GET_CURR_SEQ('CPM_PM_Pro_Pla_Reg'),'DT01','피카소VEGA8',NULL,'EA',100,F_GET_CURR_SEQ('SEQ'),sysdate,100,null,'생산','본체라인1호', '생산1반');
INSERT INTO CPM_PM_Pro_Pla_Reg_vietnam
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'DT01','피카소VEGA8',NULL,'EA',100,F_GET_NEXT_SEQ('SEQ'),sysdate+1,110,null,'생산','본체라인2호', '생산2반');
INSERT INTO CPM_PM_Pro_Pla_Reg_vietnam
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'DT01','피카소VEGA8',NULL,'EA',100,F_GET_NEXT_SEQ('SEQ'),sysdate+2,80,null,'생산','본체라인3호', '생산3반');
INSERT INTO CPM_PM_Pro_Pla_Reg_vietnam
VALUES (F_GET_NEXT_SEQ('CPM_PM_Pro_Pla_Reg'),'DT01','피카소VEGA8',NULL,'EA',100,F_GET_NEXT_SEQ('SEQ'),sysdate+3,80,null,'생산','본체라인4호', '생산4반');

UPDATE CPM_PM_Pro_Pla_Reg_vietnam
SET scheduledDateOfOperation = '210630'
WHERE ProductionPlanCode = 'PP2106000001';

select * from CPM_PM_Pro_Pla_Reg_vietnam;
select * from Pla_Reg_vietnam_erp_admin_IF;
--select * from CPM_PM_Pro_Pla_Reg_erp_admin;  

exec erp_pkg.erp_upload('DT01', '20210701');

-------------------------------------------------------------------

--erp_admin으로 접속해서 테이블 생성
create table CPM_PM_Pro_Pla_Reg_erp_admin(
    --생산계획번호(PK)
    ProductionPlanCode varchar2(12),
    --품번(FK)
    Item_Code varchar2(12) NOT NULL, 
    --품명(FK)
    Item_Name varchar2(50) NOT NULL,
    --규격
    Standard varchar2(20), 
    --재고단위
    Inventory_Unit varchar2(5) DEFAULT 'EA',
    --일 생산량
    dailyProduction number(5) not null,
    --순서
    sequence number(5),
    --작업예정일
    scheduledDateOfOperation date,
    --수량
    Quantity number(5),
    --비고
    note varchar2(1000),
    --공장코드
    factoryCode varchar2(12),
    --생산/작업/외주 구분
    productionDivision varchar2(10) DEFAULT '생산',
     --생산설비
    productionFacility varchar2(50),
    --작업팀
    taskTeam varchar2(50),
    PRIMARY KEY(ProductionPlanCode, factoryCode),
    CONSTRAINT PROPLAREGerpadmin_Item_Code_FK FOREIGN KEY(Item_Code) REFERENCES SM_BIM_Ite_Reg(Item_Code)on delete cascade
);

select * from CPM_PM_Pro_Pla_Reg_erp_admin;
